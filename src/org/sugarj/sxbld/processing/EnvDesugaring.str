/**
 * Desugar environmnt to SDF2 and Stratego
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/EnvDesugaring

imports org/sugarj/sxbld/Environment

imports org/sugarj/sxbld/processing/MetaExplode
        org/sugarj/sxbld/processing/SDF2


strategies
    /**
     * Generates SDF2 and Stratego from the definitions in the environment
     *
     * @type _ -> SXBldExtensionDecl
     */
    sxbld-env-extract-extension-decls =
  	    sxbld-env-get-grammar-elems => grm-elems-plain;
  	    sxbld-env-make-toplevel-decs => grm-elems-toplevel-decs;
  	    sxbld-env-make-toplevel-declaration => grm-elems-toplevel-declaration;
  	    sxbld-env-make-intf-judg => grm-elems-intf-judg;
  	    sxbld-env-make-get-intf-judg => grm-elems-get-intf-judg;
  	    sxbld-env-make-toplevel-dec-body => extension-elems-body-dec;
	    ((sxbld-env-is-interface-judgement-defined;
	      sxbld-env-get-interface-judgement => intf-judg;
	      sxbld-env-decls-to-stratego(|intf-judg, "interface-judgement")
	     ) <+ ![]) => trans-intf-judg;
	    <sxbld-env-get> "cons-names" => cons-names;
	    sxbld-env-decls-to-stratego(|cons-names, "cons-names") => trans-cons-names;
	    <sxbld-env-get; hashtable-getlist> "inference-rules" => inf-rules;
	    sxbld-env-decls-to-stratego(|inf-rules, "inference-rules") => trans-infrules;
	    <conc> (trans-intf-judg, trans-cons-names, trans-infrules) => transformation-elems;
	    <conc> (grm-elems-plain, grm-elems-toplevel-decs, grm-elems-intf-judg,
	    	grm-elems-get-intf-judg, grm-elems-toplevel-declaration) => grammar-elems;
  	    !SXBldExtensionDecl(<conc> (grammar-elems, transformation-elems, extension-elems-body-dec))

	/**
	 * Generates a Stratego definition key = term
	 *
	 * @param term The term to explode
	 * @param key The name of the definition
	 *
	 * @type _ -> List()
	 */
    sxbld-env-decls-to-stratego(|term, key) =
    	<trm-explode> term => stratego-alist;
    	<sxbld-env-prefix-name> (<conc-strings> ("-", key)) => strategy-name;
    	![transformation-elem(
    		Strategies([SDefNoArgs(strategy-name, Build(stratego-alist))])
    	 )]

    /**
     * Generates production for toplevel-declaration to ToplevelDeclaration
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-toplevel-declaration =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-get-toplevel-declaration; sxbld-env-prefix-name => dec;
    	 ![grammar-elem(context-free-syntax([
    	 	prod([sort(dec)], sort("ToplevelDeclaration"), no-attrs())
    	 ]))]
    	) <+ []

	/**
	 * Generates productions for list of toplevel declarations
	 *
	 * @type _ -> List(ExtensionElem)
	 */
    sxbld-env-make-toplevel-decs =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-is-toplevel-declarations-defined;
         sxbld-env-get-toplevel-declaration; sxbld-env-prefix-name => dec;
         sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
         ![grammar-elem(context-free-syntax([
    	     prod([sort(dec), sort(decs)], sort(decs),
    			   attrs([<sxbld-sdf2-cons-attribute> "SXToplevelDeclarationsCons"])),
    	     prod([], sort(decs), attrs([<sxbld-sdf2-cons-attribute> "SXToplevelDeclarationsNil"]))
          ]))]
    	) <+ ![]

    /**
     * Generates productions for the interface judgement declaration
     *
     * @type _ -> List(ExtensionElem)
     */
	sxbld-env-make-intf-judg =
	    (sxbld-env-is-toplevel-declarations-defined;
	     sxbld-env-is-interface-defined;
	     sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
	     sxbld-env-get-interface; sxbld-env-prefix-name => intf;
	     ![grammar-elem(context-free-syntax([
		     prod([sort(intf)], sort("SXBldIntfJudgInterface"), no-attrs()),
			 prod([sort(decs)], sort("SXBldIntfJudgToplevel"), no-attrs())
		  ]))]
	     ) <+ ![]

	/**
	 * Generates production for the get-interface judgement
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-get-intf-judg =
		(sxbld-env-is-interface-defined;
		 sxbld-env-is-namespace-identifier-defined;
		 sxbld-env-get-interface; sxbld-env-prefix-name => intf;
		 sxbld-env-get-namespace-identifier => symbol;
		 ![grammar-elem(context-free-syntax([
		 	prod([sort(intf), lit("="), lit("interface"), lit("("), symbol, lit(")")],
		 	     sort("SXJudgement"), 
		 	     attrs([<sxbld-sdf2-cons-attribute> "SXGetInterface"]))
		 ]))]) <+ ![]

	/**
	 * Generate code from body-decs
	 *
	 * Generates production that add all body sorts to the toplevel sort
	 * and stores the names of the body constructors in the Stratego code.
	 *
	 * @type _ -> List(ExtensionElem) 
	 */
    sxbld-env-make-toplevel-dec-body =
    	sxbld-env-get-body-decs => decs;
    	((sxbld-env-is-toplevel-declaration-defined;
    	  sxbld-env-get-toplevel-declaration; sxbld-env-prefix-name => name;
    	  <map(\(_, symbol) -> prod([symbol], sort(name), no-attrs())\)> decs => prods;
    	  ![grammar-elem(context-free-syntax(prods))]
    	 ) <+ ![]) => grm;
    	<map(\(name, _) -> name\)> decs => cons-names;
    	sxbld-env-decls-to-stratego(|cons-names, "body-decs") => trans;
    	<conc> (grm, trans)
