/**
 * Desugar environmnt to SDF2 and Stratego
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/EnvDesugaring

imports org/sugarj/soundx/SDF2

imports org/sugarj/sxbld/Environment

imports org/sugarj/sxbld/processing/MetaExplode
        org/sugarj/sxbld/processing/SortPrefixing

imports org/sugarj/languages/SXBld

strategies
    /**
     * Generates SDF2 and Stratego from the definitions in the environment
     *
     * @type _ -> SXBldExtensionDecl
     */
    sxbld-env-extract-extension-decls =
  	    sxbld-env-get-grammar-elems => grm-elems-plain;
  	    sxbld-env-make-extensible-file-ext => trans-ext-file-ext;
  	    sxbld-env-make-base-file-ext => trans-base-file-ext;
  	    sxbld-env-make-toplevel-decs => grm-elems-toplevel-decs;
  	    sxbld-env-make-toplevel-declaration => grm-elems-toplevel-declaration;
  	    sxbld-env-make-intf-judg => grm-elems-intf-judg;
  	    sxbld-env-make-get-intf-judg => grm-elems-get-intf-judg;
  	    sxbld-env-make-toplevel-dec-body => extension-elems-body-dec;
  	    sxbld-env-make-toplevel-dec-import => extension-elems-import-dec;
  	    sxbld-env-make-toplevel-dec-namespace => extension-elems-namespace-dec;
  	    sxbld-env-make-base-language-name => extension-elems-base-lang-name;
  	    sxbld-env-make-extension-delimiters => grm-elems-delims;
	    ((sxbld-env-is-interface-judgement-defined;
	      sxbld-env-get-interface-judgement => intf-judg;
	      sxbld-env-decls-to-stratego(|intf-judg, "interface-judgement")
	     ) <+ ![]) => trans-intf-judg;
	    <sxbld-env-get> "cons-names" => cons-names;
	    sxbld-env-decls-to-stratego(|cons-names, "cons-names") => trans-cons-names;
	    <sxbld-env-get; hashtable-values> "inference-rules" => inf-rules;
	    sxbld-env-decls-to-stratego(|inf-rules, "inference-rules") => trans-infrules;
	    <conc> (trans-intf-judg, trans-cons-names, trans-infrules,
	            trans-base-file-ext, trans-ext-file-ext) => transformation-elems;
	    <conc> (grm-elems-plain, grm-elems-toplevel-decs, grm-elems-intf-judg,
	    	grm-elems-get-intf-judg, grm-elems-toplevel-declaration,
	    	grm-elems-delims) => grammar-elems;
  	    !SXBldExtensionDecl(<conc> (grammar-elems, transformation-elems,
  	    	extension-elems-body-dec, extension-elems-namespace-dec,
  	    	extension-elems-import-dec, extension-elems-base-lang-name))

	/**
	 * Generates a Stratego definition key = term
	 *
	 * @param term The term to explode
	 * @param key The name of the definition
	 *
	 * @type _ -> List()
	 */
    sxbld-env-decls-to-stratego(|term, key) =
    	<trm-explode> term => stratego-alist;
    	<conc-strings> ("sx-", key) => strategy-name;
    	![transformation-elem(
    		Strategies([SDefNoArgs(strategy-name, Build(stratego-alist))])
    	 )]

	/**
	 * Generates productions for SXExtensionBegin and End
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-extension-delimiters =
		((sxbld-env-is-extension-begin-defined;
		  sxbld-env-get-extension-begin; sxbld-env-prefix-name => sort-begin;
		  ![grammar-elem(context-free-syntax(
		  	[prod([sort(sort-begin)], sort("SXExtensionBegin"), no-attrs())]))]
		 ) <+ ![]) => grm-begin;
		((sxbld-env-is-extension-end-defined;
		  sxbld-env-get-extension-end; sxbld-env-prefix-name => sort-end;
		  ![grammar-elem(context-free-syntax(
		  	[prod([sort(sort-end)], sort("SXExtensionEnd"), no-attrs())]))]
		 ) <+ ![]) => grm-end;
		<conc> (grm-begin, grm-end)

    /**
     * Saves base-language-name in Stratego file
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-toplevel-declaration =
    	 sxbld-env-get-base-language-name => dec;
    	 sxbld-env-decls-to-stratego(|dec, "base-language-name")

    /**
     * Saves toplevel-declaration in Stratego file
     *
     * We cannot write it directly to SDF since this would allow
     * base language toplevel input in the base language definition itself.
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-toplevel-declaration =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-get-toplevel-declaration => dec;
    	 sxbld-env-decls-to-stratego(|dec, "ToplevelDeclaration")
    	) <+ ![]

    /**
     * Saves extensible-file-ext in Stratego file
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-extensible-file-ext =
    	(sxbld-env-is-extensible-file-ext-defined;
    	 sxbld-env-get-extensible-file-ext => dec;
    	 sxbld-env-decls-to-stratego(|dec, "extensible-file-ext")
    	) <+ ![]

    /**
     * Saves base-file-ext in Stratego file
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-base-file-ext =
    	(sxbld-env-is-base-file-ext-defined;
    	 sxbld-env-get-base-file-ext => dec;
    	 sxbld-env-decls-to-stratego(|dec, "base-file-ext")
    	) <+ ![]

	/**
	 * Generates productions for list of toplevel declarations
	 *
	 * @type _ -> List(ExtensionElem)
	 */
    sxbld-env-make-toplevel-decs =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-is-toplevel-declarations-defined;
         sxbld-env-get-toplevel-declaration; sxbld-env-prefix-name => dec;
         sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
         ![grammar-elem(context-free-syntax([
    	     prod([sort(dec), sort(decs)], sort(decs),
    			   attrs([<sx-sdf2-cons-attribute> "SXToplevelDeclarationsCons"])),
    	     prod([], sort(decs), attrs([<sx-sdf2-cons-attribute> "SXToplevelDeclarationsNil"]))
          ]))]
    	) <+ ![]

    /**
     * Generates productions for the interface judgement declaration
     *
     * @type _ -> List(ExtensionElem)
     */
	sxbld-env-make-intf-judg =
	    (sxbld-env-is-toplevel-declarations-defined;
	     sxbld-env-is-interface-defined;
	     sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
	     sxbld-env-get-interface; sxbld-env-prefix-name => intf;
	     ![grammar-elem(context-free-syntax([
		     prod([sort(intf)], sort("SXBldIntfJudgInterface"), no-attrs()),
			 prod([sort(decs)], sort("SXBldIntfJudgToplevel"), no-attrs())
		  ]))]
	     ) <+ ![]

	/**
	 * Generates production for the get-interface judgement
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-get-intf-judg =
		(sxbld-env-is-interface-defined;
		 sxbld-env-is-namespace-identifier-defined;
		 sxbld-env-get-interface; sxbld-env-prefix-name => intf;
		 sxbld-env-get-namespace-identifier => symbol;
		 ![grammar-elem(context-free-syntax([
		 	prod([sort(intf), lit("="), lit("interface"), lit("("), symbol, lit(")")],
		 	     sort("SXJudgement"), 
		 	     attrs([<sx-sdf2-cons-attribute> "SXGetInterface"]))
		 ]))]) <+ ![]

	/**
	 * Generates code from body-decs
	 *
	 * Generates production that adds all body sorts to the toplevel sort
	 * and stores the names of the body constructors in the Stratego code.
	 *
	 * @type _ -> List(ExtensionElem) 
	 */
    sxbld-env-make-toplevel-dec-body =
    	sxbld-env-get-body-decs => decs;
    	((sxbld-env-is-toplevel-declaration-defined;
    	  sxbld-env-get-toplevel-declaration => name;
    	  <sxbld-env-prefix-name> name => meta-name;
		  <conc-strings> ("Gnd", name); sxbld-env-prefix-name => gnd-name;
    	  let map-s =
    	  	{ symbol, gnd-symbol, meta-symbol:
    	  		?(_, symbol);
    	  		<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => gnd-symbol;
				<sxbld-prefix-all-sorts-base-lang> symbol => meta-symbol;
				![prod([gnd-symbol], sort(gnd-name), no-attrs()),
				  prod([meta-symbol], sort(meta-name), no-attrs())]
    	  	}
    	  in
    	  	<mapconcat(map-s)> decs
    	  end => prods;
    	  ![grammar-elem(context-free-syntax(prods))]
    	 ) <+ ![]) => grm;
    	<map(\(name, _) -> name\)> decs => cons-names;
    	sxbld-env-decls-to-stratego(|cons-names, "body-decs") => trans;
    	<conc> (grm, trans)

	/**
	 * Generates code from import-decs
	 *
	 * Generates production that adds all import sorts to the toplevel sort
	 * and stores the names of the import constructors and module identifier
	 * positions in the Stratego code.
	 *
	 * @type _ -> List(ExtensionElem) 
	 */
	sxbld-env-make-toplevel-dec-import =
		sxbld-env-get-import-decs => decs;
    	((sxbld-env-is-toplevel-declaration-defined;
    	  sxbld-env-get-toplevel-declaration => name;
    	  <sxbld-env-prefix-name> name => meta-name;
		  <conc-strings> ("Gnd", name); sxbld-env-prefix-name => gnd-name;
		  let map-s =
		  	{ symbol, gnd-symbol, meta-symbol:
		  		?(_, _, symbol);
		  		<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => gnd-symbol;
				<sxbld-prefix-all-sorts-base-lang> symbol => meta-symbol;
				![prod([gnd-symbol], sort(gnd-name), no-attrs()),
				  prod([meta-symbol], sort(meta-name), no-attrs())]
		  	}
		  in
		  	<mapconcat(map-s)> decs
    	  end => prods;
    	  ![grammar-elem(context-free-syntax(prods))]
    	 ) <+ ![]) => grm;
    	<map(\(name, index, _) -> (name, index)\)> decs => cons-names-indices;
    	sxbld-env-decls-to-stratego(|cons-names-indices, "import-decs") => trans;
    	<conc> (grm, trans)

	/**
	 * Generates code from namespace-dec
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-toplevel-dec-namespace =
		if sxbld-env-is-namespace-dec-defined then
			sxbld-env-get-namespace-dec => (cons-name, index, symbol);
			<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => gnd-symbol;
			<sxbld-prefix-all-sorts-base-lang> symbol => meta-symbol;
			((sxbld-env-is-toplevel-declaration-defined;
			  sxbld-env-get-toplevel-declaration => name;
			  <sxbld-env-prefix-name> name => meta-name;
			  <conc-strings> ("Gnd", name); sxbld-env-prefix-name => gnd-name;
			  ![grammar-elem(context-free-syntax([
			  	  prod([meta-symbol], sort(meta-name), no-attrs()),
			  	  prod([gnd-symbol], sort(gnd-name), no-attrs())
			    ]))]
			 ) <+ ![]) => grm;
			sxbld-env-decls-to-stratego(|(cons-name, index), "namespace-dec") => trans;
			<conc> (grm, trans)
		else
			![]
		end
