/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Desugar environmnt to SDF2 and Stratego.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/EnvDesugaring

imports org/sugarj/transformations/GenerateSignatures

imports org/sugarj/soundx/SDF2
		org/sugarj/soundx/MetaExplode
		org/sugarj/soundx/PrettyPrint
		org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Debug

imports org/sugarj/soundx/PPTable

imports org/sugarj/sxbld/Environment

imports org/sugarj/sxbld/processing/SortPrefixing

imports org/sugarj/languages/SXBld

strategies
	/**
	 * Generates SDF2 from the definitions in the environment.
	 *
	 * @type _ -> SXBldExtensionDecl
	 */
	sxbld-env-extract-grm-elems =
		sxbld-env-get-grammar-elems => grm-elems-plain;
		sxbld-env-make-toplevel-decs => grm-elems-toplevel-decs;
		sxbld-env-make-intf-judg => grm-elems-intf-judg;
  	    sxbld-env-make-get-intf-judg => grm-elems-get-intf-judg;
  	    sxbld-env-make-toplevel-dec-body-grm => grm-elems-body-dec;
  	    sxbld-env-make-toplevel-dec-import-grm => grm-elems-import-dec;
  	    sxbld-env-make-toplevel-dec-namespace-grm => grm-elems-namespace-dec;
  	    sxbld-env-make-extension-delimiters => grm-elems-delims;
  	    sxbld-env-make-atoms-grm => grm-atoms;
  	    sxbld-env-make-neq-judgement-grm => grm-neq;
  	    <conc> (grm-elems-plain,
	    	    grm-elems-toplevel-decs,
	    	    grm-elems-intf-judg,
	    	    grm-elems-get-intf-judg,
	    	    grm-elems-delims,
	    	    grm-elems-body-dec,
	    	    grm-elems-namespace-dec,
	    	    grm-elems-import-dec,
	    	    grm-atoms,
	    	    grm-neq) => grammar-elems;
	    !SXBldExtensionDecl(grammar-elems)

    /**
     * Generates SDF2 and Stratego from the definitions in the environment.
     *
     * @type _ -> SXBldExtensionDecl
     */
    sxbld-env-extract-trans-grm-elems =
  	    sxbld-env-extract-grm-elems => SXBldExtensionDecl(grammar-elems);
  	    sxbld-env-make-extensible-file-ext => trans-ext-file-ext;
  	    sxbld-env-make-base-file-ext => trans-base-file-ext;
  	    sxbld-env-make-toplevel-dec-body-trans => trans-elems-body-dec;
  	    sxbld-env-make-toplevel-dec-import-trans => trans-elems-import-dec;
  	    sxbld-env-make-toplevel-dec-namespace-trans => trans-elems-namespace-dec;
  	    sxbld-env-make-namespace-kind => trans-namespace-kind;
  	    sxbld-env-make-base-language-name-trans => trans-elems-base-lang-name;
	    ((sxbld-env-is-interface-judgement-defined;
	      sxbld-env-get-interface-judgement => intf-judg;
	      sxbld-env-decls-to-stratego(|intf-judg, "interface-judgement")
	     ) <+ ![]) => trans-intf-judg;
	    sxbld-env-make-toplevel-declaration => trans-toplevel-declaration;
	    <sxbld-env-get> "cons-names" => cons-names;
	    sxbld-env-decls-to-stratego(|cons-names, "cons-names") => trans-cons-names;
	    <sxbld-env-get; hashtable-values> "inference-rules" => inf-rules;
	    sxbld-env-decls-to-stratego(|inf-rules, "inference-rules") => trans-infrules;
	    <sxbld-env-get; hashtable-getlist> "freshness-conditions" => freshness-conditions;
	    sxbld-env-decls-to-stratego(|freshness-conditions, "freshness-conditions") => trans-freshness;
	    <sxbld-env-get; hashtable-getlist> "error-annotations" => error-annotations;
	    sxbld-env-decls-to-stratego(|error-annotations, "error-annotations") => trans-error;
	    <sxbld-env-get> "namespace-suffices" => namespace-suffices;
	    sxbld-env-decls-to-stratego(|namespace-suffices, "namespace-suffices") => trans-namespace-suffices;
	    // generate a PP table for the base language
	    // Empty PP table since it slows down STRJ considerably
	    // <map(?grammar-elem(<id>))> grammar-elems => sdf2-defs;
	    // <sx-grammars-to-pp-table> sdf2-defs => pp-table;
	    !PP-Table([]) => pp-table;
	    sxbld-env-decls-to-stratego(|pp-table, "pp-table") => trans-pp-table;
	    // Since the SXBld desugaring is hooked into internal-main
	    // instead of desugaring gen-signature is called manually.
	    // This is also to avoid signature generation for the intermediate
	    // SDF files, which slows down STRJ quite a bit.
	    (<gen-signature> grammar-elems <+ ![]) => trans-signatures;
	    <conc> (trans-pp-table, 
	    		trans-toplevel-declaration,
	    		trans-intf-judg,
	    		trans-cons-names,
	    		trans-infrules,
	    		trans-freshness,
	    		trans-error,
	            trans-base-file-ext,
	            trans-ext-file-ext,
	            trans-namespace-kind,
	            trans-namespace-suffices,
	            trans-elems-body-dec,
	            trans-elems-namespace-dec,
	            trans-elems-import-dec,
	            trans-elems-base-lang-name,
	            trans-signatures) => transformation-elems;
  	    !SXBldExtensionDecl(<conc> (grammar-elems, transformation-elems))

	/**
	 * Generates a Stratego definition key = term
	 *
	 * @param term The term to explode
	 * @param key The name of the definition
	 *
	 * @type _ -> List()
	 */
    sxbld-env-decls-to-stratego(|term, key) =
    	<trm-explode> term => stratego-alist;
    	<conc-strings> ("sx-", key) => strategy-name;
    	![transformation-elem(
    		Strategies([SDefNoArgs(strategy-name, Build(stratego-alist))])
    	 )]

	/**
	 * Generates a declaration for the namespace kind.
	 */
	sxbld-env-make-namespace-kind =
		(sxbld-env-is-namespace-kind-defined;
		 sxbld-env-get-namespace-kind => namespace-kind;
		 sxbld-env-decls-to-stratego(|namespace-kind, "namespace-kind")) <+
		![]

	/**
	 * Generates productions for SXExtensionBegin and End
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-extension-delimiters =
		((sxbld-env-is-extension-begin-defined;
		  sxbld-env-get-extension-begin; sxbld-env-prefix-name => sort-begin;
		  ![grammar-elem(context-free-syntax(
		  	[prod([sort(sort-begin)], sort("SXExtensionBegin"), no-attrs())]))]
		 ) <+ ![]) => grm-begin;
		((sxbld-env-is-extension-end-defined;
		  sxbld-env-get-extension-end; sxbld-env-prefix-name => sort-end;
		  ![grammar-elem(context-free-syntax(
		  	[prod([sort(sort-end)], sort("SXExtensionEnd"), no-attrs())]))]
		 ) <+ ![]) => grm-end;
		<conc> (grm-begin, grm-end)

	/**
	 * Generates productions for the =/= judgement for all rhs.
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-neq-judgement-grm =
		sxbld-env-get-rhs-sort-names => names;
		let map-s = {
			name, unprefixed-name, cons-attr, qualified-neq:
				?name;
				<sxbld-env-unprefix-name> name => unprefixed-name;
				<conc-strings> ("=/=", unprefixed-name) => qualified-neq;
				<sx-sdf2-cons-attribute> "SXNeq" => cons-attr;
				![prod(
					[sort(name), lit("=/="), sort(name)], sort("SXJudgement"),
    	        	attrs([cons-attr])),
    	          prod(
    	          	[sort(name), lit(qualified-neq), sort(name)], sort("SXJudgement"),
    	          	attrs([cons-attr]))]
			}
		in
			<map(map-s); concat> names
		end => prods;
		![grammar-elem(context-free-syntax(prods))]
		

    /**
     * Generates a production for SXAtom for each sort in atom-sorts and
     * the namespace identifier. The concat and the suffix judgement
     * (predefined) are available for atom sorts.
     *
     * @type _ -> List(ExtensionElem)
     */
	sxbld-env-make-atoms-grm =
		sxbld-env-get-atom-sorts => sort-names;
		if sxbld-env-is-namespace-identifier-defined then
			sxbld-env-get-namespace-identifier => namespace-name;
			![namespace-name|sort-names]
		else
			!sort-names
		end => atom-names;
		<map(\name -> prod([sort(name)], sort("SXAtom"), no-attrs())\)> atom-names => prods;
		![grammar-elem(context-free-syntax(prods))]

    /**
     * Saves toplevel-declaration in Stratego file.
     *
     * We cannot write it directly to SDF since this would allow
     * base language toplevel input in the base language definition itself.
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-toplevel-declaration =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-get-toplevel-declaration => dec;
    	 sxbld-env-decls-to-stratego(|dec, "ToplevelDeclaration")
    	) <+ ![]

    /**
     * Saves extensible-file-ext in Stratego file
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-extensible-file-ext =
    	(sxbld-env-is-extensible-file-ext-defined;
    	 sxbld-env-get-extensible-file-ext => dec;
    	 sxbld-env-decls-to-stratego(|dec, "extensible-file-ext")
    	) <+ ![]

    /**
     * Saves base-file-ext in Stratego file
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-base-file-ext =
    	(sxbld-env-is-base-file-ext-defined;
    	 sxbld-env-get-base-file-ext => dec;
    	 sxbld-env-decls-to-stratego(|dec, "base-file-ext")
    	) <+ ![]

    /**
     * Saves base-language-name in Stratego file
     *
     * @type _ -> List(ExtensionElem)
     */
    sxbld-env-make-base-language-name-trans =
    	(sxbld-env-is-base-language-name-defined;
    	 sxbld-env-get-base-language-name => dec;
    	 sxbld-env-decls-to-stratego(|dec, "base-language-name")
    	) <+ ![]

	/**
	 * Generates productions for list of toplevel declarations
	 *
	 * @type _ -> List(ExtensionElem)
	 */
    sxbld-env-make-toplevel-decs =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-is-toplevel-declarations-defined;
         sxbld-env-get-toplevel-declaration; sxbld-env-prefix-name => dec;
         sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
         ![grammar-elem(context-free-syntax([
    	     prod([sort(dec), sort(decs)], sort(decs),
    			   attrs([<sx-sdf2-cons-attribute> "SXToplevelDeclarationsCons"])),
    	     prod([], sort(decs), attrs([<sx-sdf2-cons-attribute> "SXToplevelDeclarationsNil"]))
          ]))]
    	) <+ ![]

    /**
     * Generates productions for the interface judgement declaration
     *
     * @type _ -> List(ExtensionElem)
     */
	sxbld-env-make-intf-judg =
	    (sxbld-env-is-toplevel-declarations-defined;
	     sxbld-env-is-interface-defined;
	     sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
	     sxbld-env-get-interface; sxbld-env-prefix-name => intf;
	     ![grammar-elem(context-free-syntax([
		     prod([sort(intf)], sort("SXBldIntfJudgInterface"), no-attrs()),
			 prod([sort(decs)], sort("SXBldIntfJudgToplevel"), no-attrs())
		  ]))]
	     ) <+ ![]

	/**
	 * Generates production for the get-interface judgement
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-get-intf-judg =
		(sxbld-env-is-interface-defined;
		 sxbld-env-get-interface; sxbld-env-prefix-name => intf;
		 sxbld-env-determine-import-identifier => symbol;
		 ![grammar-elem(context-free-syntax([
		 	prod([sort(intf), lit("="), lit("interface"), lit("("), symbol, lit(")")],
		 	     sort("SXJudgement"), 
		 	     attrs([<sx-sdf2-cons-attribute> "SXGetInterface"]))
		 ]))]) <+ ![]

	/**
	 * Return the sort of the module identifier for the import. For flat and
	 * nested namespaces this is the namespace identifier sort, for
	 * prefixed namespaces this is the module identifier sort, of given, otherwise
	 * the namespace identifier sort.
	 *
	 * @type _ -> Sdf2Symbol
	 */
	sxbld-env-determine-import-identifier =
		sxbld-env-is-namespace-kind-defined;
		sxbld-env-get-namespace-kind => kind;
		((!kind; (?SXNamespaceFlat() + ?SXNamespaceNested(_));
		  sxbld-env-is-namespace-identifier-defined;
		  sxbld-env-get-namespace-identifier
		 ) <+
		 (!kind; ?SXNamespacePrefixed(_);
		  if sxbld-env-is-module-identifier-defined then
		  	sxbld-env-get-module-identifier
		  else
		  	if sxbld-env-is-namespace-identifier-defined then
		  		sxbld-env-get-namespace-identifier
		  	else
		  		fail
		  	end
		  end)
		)

	/**
	 * Generates productions that adds all body sorts to the toplevel sort.
	 *
	 * @type _ -> List(ExtensionElem) 
	 */
    sxbld-env-make-toplevel-dec-body-grm =
    	sxbld-env-get-body-decs => decs;
    	((sxbld-env-is-toplevel-declaration-defined;
    	  sxbld-env-get-toplevel-declaration => name;
    	  <sxbld-env-prefix-name> name => meta-name;
		  <conc-strings> ("Gnd", name); sxbld-env-prefix-name => gnd-name;
    	  let map-s =
    	  	{ symbol, gnd-symbol, meta-symbol:
    	  		?(_, symbol);
    	  		<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => gnd-symbol;
				<sxbld-prefix-all-sorts-base-lang> symbol => meta-symbol;
				![prod([gnd-symbol], sort(gnd-name), no-attrs()),
				  prod([meta-symbol], sort(meta-name), no-attrs())]
    	  	}
    	  in
    	  	<mapconcat(map-s)> decs
    	  end => prods;
    	  ![grammar-elem(context-free-syntax(prods))]
    	 ) <+ ![]) => grm;
    	!grm

	/**
	 * Stores the names of the body declaration constructors in the Stratego code.
	 *
	 * @type _ -> List(ExtensionElem) 
	 */
    sxbld-env-make-toplevel-dec-body-trans =
    	sxbld-env-get-body-decs => decs;
    	<map(\(name, _) -> name\)> decs => cons-names;
    	sxbld-env-decls-to-stratego(|cons-names, "body-decs")

	/**
	 * Generates productions that adds all import sorts to the toplevel sort.
	 *
	 * @type _ -> List(ExtensionElem) 
	 */
	sxbld-env-make-toplevel-dec-import-grm =
		sxbld-env-get-import-decs => decs;
    	((sxbld-env-is-toplevel-declaration-defined;
    	  sxbld-env-get-toplevel-declaration => name;
    	  <sxbld-env-prefix-name> name => meta-name;
		  <conc-strings> ("Gnd", name); sxbld-env-prefix-name => gnd-name;
		  let map-s =
		  	{ symbol, gnd-symbol, meta-symbol:
		  		?(_, _, symbol);
		  		<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => gnd-symbol;
				<sxbld-prefix-all-sorts-base-lang> symbol => meta-symbol;
				![prod([gnd-symbol], sort(gnd-name), no-attrs()),
				  prod([meta-symbol], sort(meta-name), no-attrs())]
		  	}
		  in
		  	<mapconcat(map-s)> decs
    	  end => prods;
    	  ![grammar-elem(context-free-syntax(prods))]
    	 ) <+ ![]) => grm;
    	!grm


	/**
	 * Stores the names of the import constructors and module identifier
	 * positions in the Stratego code.
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-toplevel-dec-import-trans =
		sxbld-env-get-import-decs => decs;
	    <map(\(name, index, _) -> (name, index)\)> decs => cons-names-indices;
    	sxbld-env-decls-to-stratego(|cons-names-indices, "import-decs")

	/**
	 * Generates production that makes the namespace declaration
	 * a ToplevelDeclaration.
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-toplevel-dec-namespace-grm =
		if sxbld-env-is-namespace-dec-defined then
			sxbld-env-get-namespace-dec => (cons-name, index, symbol);
			<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => gnd-symbol;
			<sxbld-prefix-all-sorts-base-lang> symbol => meta-symbol;
			((sxbld-env-is-toplevel-declaration-defined;
			  sxbld-env-get-toplevel-declaration => name;
			  <sxbld-env-prefix-name> name => meta-name;
			  <conc-strings> ("Gnd", name); sxbld-env-prefix-name => gnd-name;
			  ![grammar-elem(context-free-syntax([
			  	  prod([meta-symbol], sort(meta-name), no-attrs()),
			  	  prod([gnd-symbol], sort(gnd-name), no-attrs())
			    ]))]
			 ) <+ ![]) => grm;
			!grm
		else
			![]
		end

	/**
	 * Stores the namespace constructor and identifier index in the Stratego code.
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sxbld-env-make-toplevel-dec-namespace-trans =
		if sxbld-env-is-namespace-dec-defined then
			sxbld-env-get-namespace-dec => (cons-name, index, symbol);
			sxbld-env-decls-to-stratego(|(cons-name, index), "namespace-dec")
		else
			![]
		end
