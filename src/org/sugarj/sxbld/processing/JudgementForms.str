/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Process judgement forms sections
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/JudgementForms

imports org/sugarj/soundx/AbstractSyntax
        org/sugarj/soundx/SDF2

imports org/sugarj/sxbld/Environment

imports org/sugarj/sxbld/processing/SortPrefixing

imports org/sugarj/languages/SXBld

imports org/sugarj/soundx/Debug


/**
 * Register analyses and desugarings
 */
strategies
	sxbld-start-analysis = sxbld-analyze-judgement-forms

/**
 * Analysis
 */
strategies
	/**
	 * Analyzes all judgement forms and adds productions to the environment
	 *
	 * @type SXBldJudgementForms -> SXBldJudgementForms
	 */
	sxbld-analyze-judgement-forms =
		?SXBldJudgementForms(forms);
		where(
			<mapconcat(sxbld-analyze-judgement-form)> forms => prods;
			<sxbld-env-add-grammar-elems> [grammar-elem(context-free-syntax(prods))])

	/**
	 * Generates judgement and desugaring productions
	 *
	 * @type SXBldJudgementForm -> List(Sdf2Productions)
	 */
	sxbld-analyze-judgement-form =
		?SXBldJudgementForm(symbols, error-ann);
		<sxbld-env-fresh-judgement-name> () => judgement-name;
		<sxbld-analyze-error-annotation> (judgement-name, symbols, error-ann);
		<sxbld-prefix-all-sorts-base-lang> symbols => prefixed-symbols;
		<sxbld-analyze-judgement-prod(|judgement-name)> prefixed-symbols => judg-prod;
		!prefixed-symbols => [head|tail];
		<sxbld-analyze-guarded-desugaring-prods(|judgement-name)> ([], head, tail) => des-prods;
		![judg-prod|des-prods]
		
	/**
	 * Generates a production for SXJudgement
	 *
	 * Generates a constructor name for the judgement and
	 * prefixes all sort names.
	 *
	 * @param judgement-name String
	 *
	 * @type List(Sdf2Symbol) -> Sdf2Production
	 */
	sxbld-analyze-judgement-prod(|judgement-name) =
		?symbols;
    	!prod(symbols, sort("SXJudgement"), attrs([<sx-sdf2-cons-attribute> judgement-name]))

	/**
	 * Generates productions for guarded desugarings
	 *
	 * The first list of symbols are go before the subject expression,
	 * the second symbol is the subject expression, the third list
	 * of symbols goes after the subject expression.
	 * Literal symbols are skipped.<debug(!"BBBBBBBB")> ();
	 *
	 * @param judgement-name String
	 *
	 * @type (List(Sdf2Symbols), Sdf2Symbol, List(Sdf2Symbols))
	 *    -> List(Sdf2Production)
	 */
	sxbld-analyze-guarded-desugaring-prods(|judgement-name) =
		// Skip literal, is last symbol
		(?(before-symbols, lit(_), []);
		 ![]) <+
		// Skip literal, more symbols to process
		(?(before-symbols, symb@lit(_), [after-symbol|after-symbols]);
		 <sxbld-analyze-guarded-desugaring-prods(|judgement-name)>
		 (<conc> (before-symbols, [symb]), after-symbol, after-symbols)) <+
		// Termination case (no after symbols left)
		(?symbols@(before-symbols, subject-symbol, []);
		 <sxbld-analyze-guarded-desugaring-prod(|judgement-name)> symbols => prod;
		 ![prod]) <+
		// Iteration case (some after symbols left)
		(?symbols@(before-symbols, subject-symbol, [after-symbol|after-symbols]);
		 <sxbld-analyze-guarded-desugaring-prod(|judgement-name)> symbols => prod;
		 <sxbld-analyze-guarded-desugaring-prods(|judgement-name)>
	 	 	(<conc> (before-symbols, [subject-symbol]), after-symbol, after-symbols) => prods;
	 	 ![prod|prods])

	/**
	 * Generates a production for guarded desugaring ending with the given symbols
	 *
	 * @param judgement-name String
	 *
	 * @type (List(Sdf2Symbol), Sdf2Symbol, List(Sdf2Symbol)) -> Sdf2Production
	 */
	sxbld-analyze-guarded-desugaring-prod(|judgement-name) =
		?(before-symbols, subject-symbol, after-symbols);
		<conc> ( // The symbols of the conclusion with [, ]
			before-symbols,
			[lit("["), subject-symbol, lit("]")],
			after-symbols) => symbols-concl;
		<conc> ( // The entire left-hand side with {, ~~~>, }
			[lit("{"), sort("SXInfRulePremises"), sort("SXRULESEP")],
			symbols-concl,
			[sort("SXDESUGARINGSEP"), subject-symbol, sort("SXWhereClauses"), lit("}")]) => lhs-desugaring;
		<add> (1, <sx-sdf2-count-subtrees> before-symbols); int-to-string => index;
		<conc-strings> ("SXGuardedDesugaring", index, judgement-name) => cons-name;
		![
			<sx-sdf2-cons-attribute> cons-name,
			<sx-sdf2-aterm-attribute> ("layout", "2.first.col == 3.first.col && 3.first.col == 4.first.col")
		 ] => attributes;
		!prod(lhs-desugaring, sort("SXDesugaring"), attrs(attributes))

	/**
	 * Analyzes the error annotation, prepares the error string, and
	 * stores it in the environment.
	 *
	 * @type (String, List(Sdf2Symbol), Option(SXBldErrorAnnotation)) -> SXEnv
	 */
	sxbld-analyze-error-annotation =
		?(_, _, None())
	sxbld-analyze-error-annotation =
		?(judg-name, symbols, Some(SXBldErrorAnnotation(msg, unquoted(loc))));
		if <sx-sdf2-find-index-of-labelled-symbol(|loc)> symbols => loc-idx then
			<sx-debug(|"loc idx ")> loc-idx;
			<sx-sdf2-get-labels-and-positions> symbols => labs-pos;
			<sxbld-analyze-error-annotation-message> (msg, labs-pos) => msg1;
			<sx-debug(|"labs pos ")> labs-pos;
			<sxbld-env-set-error-annotation> (judg-name, msg1, loc-idx)
		else
			id
		end

	/**
	 * Replaces %label% by this labels index for all the
	 * label-index pairs in the list.
	 *
	 * @type (String, List((String, Int))) -> String
	 */
	sxbld-analyze-error-annotation-message =
		?(msg, []); !msg
	sxbld-analyze-error-annotation-message =
		?(msg, [(lab, pos) | labs-pos]);
		<conc-strings> ("%", lab, "%") => marker;
		<int-to-string> pos => pos-str;
		<conc-strings> ("%", pos-str, "%") => idx-marker;
		<string-replace(|marker, idx-marker)> msg => msg1;
		<sxbld-analyze-error-annotation-message> (msg1, labs-pos)
