/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Functions to signal errors.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/AnalysisFunctions

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/sxbld/Environment

imports org/sugarj/soundx/Utils

imports org/sugarj/soundx/Debug


strategies
    /**
     * Annotates error message, set failed flag, and abort analysis with fail.
     * Analysis is aborted after the first error to avoid
     * follow-up errors. Otherwise, all analyses would have
     * to check the failed flag and ignore certain errors as follow-ups.
     *
     * @param String
     * @type a -> a
     */
    sxbld-analyze-fail(|msg) =
    	where(<sxbld-env-failed> ());
    	<conc-strings; sx-print-error> ("sxbld-analyze-fail: ", msg);
    	sxbld-analyze-annotate-error(|msg);
    	fail

    /**
     * Annotates error message only if not failed and sets failed flag.
     *
     * This strategy is intended for default case handling, e. g.
     * using (... + ... + ...) <+ sxbld-analyze-unsupported(...)
     *
     * @param msg String
     * @type a -> a
     */
    sxbld-analyze-unsupported(|msg) =
    	where(<sxbld-env-get-failed> () => SXBldFalse());
    	where(<sxbld-env-failed> ());
    	sxbld-analyze-annotate-error(|msg);
    	fail

    /**
     * Extract list of error messages from aterm.
     *
     * @type a -> List(String)
     */
	sxbld-extract-errors =
		get-analysis-data(|"errors") <+ ![]    	

    /**
     * Adds error message as annotation to a term.
     *
     * @param msg String
     * @type a -> a
     */
    sxbld-analyze-annotate-error(|msg) =
    	?ast;
    	sxbld-extract-errors => msgs;
    	<put-analysis-data(|"errors", [msg|msgs])> ast
