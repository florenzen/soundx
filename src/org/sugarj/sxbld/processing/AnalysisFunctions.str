/**
 * Functions to signal errors
 */
module org/sugarj/sxbld/processing/AnalysisFunctions

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/sxbld/Environment


strategies
    /**
     * Annotates error message, set failed flag, and abort analysis with fail
     *
     * Analysis is aborted after the first error to avoid
     * follow-up errors. Otherwise, all analyses would have
     * to check the failed flag and ignore certain errors as follow-ups.
     *
     * @param String
     * @type a -> a
     */
    sxbld-analyze-fail(|msg) =
    	where(<sxbld-env-failed> ());
    	sxbld-analyze-annotate-error(|msg);
    	fail

    /**
     * Annotates error message only if not failed and sets failed flag
     *
     * This strategy is intended for default case handling, e. g.
     * using (... + ... + ...) <+ sxbld-analyze-unsupported(...)
     *
     * @param msg String
     * @type a -> a
     */
    sxbld-analyze-unsupported(|msg) =
    	where(<sxbld-env-get-failed> () => SXBldFalse());
    	where(<sxbld-env-failed> ());
    	sxbld-analyze-annotate-error(|msg);
    	fail

    /**
     * Extract list of error messages from term
     *
     * @type a -> List(String)
     */
	sxbld-extract-errors =
		get-analysis-data(|"errors") <+ ![]    	

    /**
     * Adds error message to a term
     *
     * @param msg String
     * @type a -> a
     */
    sxbld-analyze-annotate-error(|msg) =
    	?ast;
    	sxbld-extract-errors => msgs;
    	<put-analysis-data(|"errors", [msg|msgs])> ast
