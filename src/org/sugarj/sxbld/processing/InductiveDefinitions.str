/**
 * Processing of inductive definitions
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/InductiveDefinitions

imports org/sugarj/languages/SXBld

imports org/sugarj/sxbld/Environment
 	    org/sugarj/sxbld/processing/AnalysisFunctions

imports org/sugarj/soundx/InductiveDefinitions
		org/sugarj/soundx/AbstractSyntax


/**
 * Register analyses
 */
strategies
	sxbld-start-analysis = sxbld-analyze-inductive-definitions

/**
 * Analysis
 */
strategies
	/**
	 * Adds all inference rules to the environment
	 *
	 * @type SXInductiveDefinitions -> SXInductiveDefinitions
	 */
	sxbld-analyze-inductive-definitions =
		where(SXInductiveDefinitions(map(sxbld-analyze-inference-rule)))

    /**
     * Adds one inference rule to the environment
     *
     * Converts meta-var to SXMetaVar
     * 
     * @type SXNamedInferenceRule -> SXEnv
     */
	sxbld-analyze-inference-rule =
		?SXNamedInferenceRule(name, rule);
		<sxbld-analyze-named-infrule-to-abs(|name); sxbld-meta-var-to-sx-metavar> rule => analyzed-rule;
		<sxbld-analyze-add-inference-rule> (name, analyzed-rule)

    /**
     * Convert named inference rule to abstract syntax
     *
     * @type SXInferenceRule -> SXInfRule
     */
	sxbld-analyze-named-infrule-to-abs(|name) =
		?SXInferenceRule(premises, _, concl);
		<collect-all(sx-is-judgement, conc)> premises => premises-list;
		!SXInfRule(premises-list, name, concl)

	/**
	 * Adds an inference rule to the environment
	 *
	 * Fails if a rule of that name is already defined
	 *
	 * @type (String, SXInfRule) -> SXEnv
	 */
	sxbld-analyze-add-inference-rule =
		?(name, rule);
		<sxbld-env-get-inference-rule> name;
		if ?None() then
			<sxbld-env-add-inference-rule> (name, rule)
		else
			<sxbld-analyze-fail(|"Duplicate inference rule name")> name
		end
