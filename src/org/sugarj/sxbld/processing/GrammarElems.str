/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Processing of SDF2 sections.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/GrammarElems

imports org/sugarj/languages/SXBld

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/SDF2

imports org/sugarj/sxbld/Environment
        org/sugarj/sxbld/processing/AnalysisFunctions

imports org/sugarj/sxbld/processing/SortPrefixing

imports org/sugarj/soundx/Debug


strategies
    /**
     * Register analyses.
     */
	sxbld-start-analysis = sxbld-analyze-grammar-elems

	/**
	 * Analyzes list of SDF2 sections. Adds SDF2 sections as grammar
	 * elems to the environment.
	 *
	 * @type SXBldGrammarElems -> SXBldGrammarElems
	 */
	sxbld-analyze-grammar-elems =
		?SXBldGrammarElems(grammars);
		where(
			<map(sxbld-analyze-grammar-elem); concat> grammars;
		    // not using mapconcat here because it traverses the list from the end to front
		    // which lowers quality of error messages
			sxbld-add-grammar-elems)

    /**
     * Analyzes and transforms a single SDF2 section. Gives an error on
     * an unsupported section.
     *
     * @type Grammar -> List(Grammar)
     */
    sxbld-analyze-grammar-elem =
        ((sxbld-analyze-sorts +
          sxbld-analyze-cf-syntax +
          sxbld-analyze-lex-syntax +
          sxbld-analyze-variables +
          sxbld-analyze-lex-priorities +
          sxbld-analyze-cf-priorities +
          sxbld-analyze-lex-restrictions +
          sxbld-analyze-cf-restrictions) <+
         sxbld-analyze-unsupported(|"Unsupported SDF 2 section"));
        (?[_|_] <+ ![<id>])

	/**
	 * Prefixes sorts in lexical priorities.
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-lex-priorities =
		?lexical-priorities(prios);
		<sxbld-prefix-all-sorts(|"Gnd")> prios => prios-gnd;
		<conc; sxbld-prefix-all-sorts-base-lang> (prios, prios-gnd) => prios-prefixed;
		!lexical-priorities(prios-prefixed)
	
   /**
	 * Prefixes sorts in context-free priorities.
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-cf-priorities =
		?context-free-priorities(prios);
		<sxbld-prefix-all-sorts(|"Gnd")> prios => prios-gnd;
		<conc; sxbld-prefix-all-sorts-base-lang> (prios, prios-gnd) => prios-prefixed;
		!context-free-priorities(prios-prefixed)

    /**
	 * Prefixes sorts in lexical restrictions.
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-lex-restrictions =
		?lexical-restrictions(restr);
	    <sxbld-prefix-all-sorts(|"Gnd")> restr => restr-gnd;
		<conc; sxbld-prefix-all-sorts-base-lang> (restr, restr-gnd) => restr-prefixed;
	    !lexical-restrictions(restr-prefixed)

	/**
	 * Prefixes sorts in context-free restrictions.
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-cf-restrictions =
		context-free-restrictions(sxbld-prefix-all-sorts-base-lang)

	/**
	 * Prefixes sorts in variables.
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-variables =
	    variables(sxbld-prefix-all-sorts-base-lang)

    /**
     * Prefixes sorts in sorts.
     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-sorts =
        'sorts(sxbld-prefix-all-sorts-base-lang)

	/**
	 * Stores the rhs symbol in the environment.
	 *
	 * @type Sdf2Symbol -> _
	 */
	sxbld-analyze-store-rhs =
		?symbol;
		try(<sx-sdf2-symbol-name> symbol => name;
			<sxbld-env-add-rhs-sort-name> name)

    /**
     * Analyzes a context-free syntax section.
     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-cf-syntax =
    	?context-free-syntax(prods);
    	<map(sxbld-analyze-cf-production); concat> prods => analyzed-prods;
        !context-free-syntax(analyzed-prods)

    /**
     * Analyzes a context-free production.
     *
     * TODO generate fewer where equations
     *
     * @type Sdf2Production -> List(Sdf2Production)
     */
    sxbld-analyze-cf-production =
    	?prod(symbols, symbol, attributes);
    	<sxbld-analyze-cf-attributes> attributes => analyzed-attributes;
    	<sxbld-analyze-body-dec> (symbol, analyzed-attributes);
    	<sxbld-analyze-namespace-dec> (symbols, symbol, analyzed-attributes);
    	<sxbld-analyze-import-dec> (symbols, symbol, analyzed-attributes);
    	<sxbld-analyze-namespace-suffix> (symbols, symbol, analyzed-attributes);
    	<sxbld-prefix-all-sorts-base-lang> symbol => prefixed-symbol;
    	<sxbld-analyze-store-rhs> prefixed-symbol;
    	<sxbld-prefix-all-sorts-base-lang> symbols => prefixed-symbols;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbols => prefixed-ground-symbols;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => prefixed-ground-symbol;
    	<sxbld-analyze-universal-desugaring-prod> prefixed-symbol => univ-prod;
    	<sxbld-analyze-where-equation-prod> (symbol, prefixed-symbol) => where-eq-prods;
    	<conc> (where-eq-prods,
    		[univ-prod,
    	     prod(prefixed-symbols, prefixed-symbol, analyzed-attributes),
    	     prod(prefixed-ground-symbols, prefixed-ground-symbol, analyzed-attributes)])

	/**
	 * Generates a production for a universal desugaring.
	 *
	 * @type Sdf2Symbol -> Sdf2Production
	 */
	sxbld-analyze-universal-desugaring-prod =
		// TODO This simple approach generates the production many times for
		// a single sort blowing up the SDF2 code. Same for where equations.
		?symbol;
		!prod([symbol, sort("SXDESUGARINGSEP"), symbol, sort("SXWhereClauses")],
			sort("SXUniversalDesugaring"),
			attrs([<sx-sdf2-cons-attribute> "SXUniversalDesugaring"]))

	/**
	 * Generates a production for a where clause.
	 *
	 * @type (Sdf2Symbol, Sdf2Symbol) -> List(Sdf2Production)
	 */
	sxbld-analyze-where-equation-prod =
		?(symbol, prefixed-symbol);
		!prod([prefixed-symbol, lit("="), prefixed-symbol],
			sort("SXWhereEquation"),
			attrs([<sx-sdf2-cons-attribute> "SXWhereEquation"])) => unqualified-prod;
		if !symbol; ?sort(name) then
			!prod([prefixed-symbol, lit(<conc-strings> ("=", name)), prefixed-symbol],
				sort("SXWhereEquation"),
				attrs([<sx-sdf2-cons-attribute> "SXWhereEquation"])) => qualified-prod;
			![qualified-prod, unqualified-prod]
		else
			![unqualified-prod]
		end

    /**
     * Checks attributes of context-free production. Generates a constructor name
     * if necessary, includes it in the analyzed attributes and also returns it.
     *
     * @param sort-name String
     *
     * @type Sdf2Attributes -> Sdf2Attributes
     */
    sxbld-analyze-cf-attributes =
    	((?no-attrs(); ![]) +
    	 (?attrs(attrib-list); !attrib-list));
    	sxbld-analyze-cf-attribute-list-cons => attrib-list-with-cons;
    	!attrs(attrib-list-with-cons)

    /**
     * Adds or prefixes a cons attribute. It returns the new attribute list and the
     * name of the constructor. If a constructor name is given in an attribut the
     * exact string from the input is returned. Therefore, the constructor name is double-qouted.
     *
     * A constructor is only returned if the attribute list does not contain a
     * bracket attribute.
     *
     * @param sort-name String
     *
     * @type List(Sdf2Attribute) -> List(Sdf2Attribute)
     */
    sxbld-analyze-cf-attribute-list-cons =
    	where(<elem> (bracket(), <id>)) <
    	// bracket attribute, return attributes untouched
    	id +
    	// no bracket attribute
    	(partition(sx-sdf2-is-attribute(|"cons")) => (cons-attribs, other-attribs);
    	 ((// no cons attribute, generate one
    	   !cons-attribs; ?[];
     	   sxbld-env-fresh-cons-name => cons-name;
		   sxbld-env-add-cons-name;
    	   ![<sx-sdf2-cons-attribute> cons-name | other-attribs]) <+
    	  (// one cons attribute, prefix it
    	   !cons-attribs; ?[cons-attrib];
    	   <sx-sdf2-cons-attribute-name-quoted> cons-attrib => cons-name-quoted;
    	   <un-double-quote> cons-name-quoted => cons-name;
    	   <sxbld-env-prefix-name> cons-name => prefixed-cons-name;
		   if sxbld-env-cons-name-defined then
		   	   <sxbld-analyze-fail(|"Duplicate constructor name")> cons-name-quoted
		   else
		   	   <sxbld-env-add-cons-name> prefixed-cons-name;
    	       ![<sx-sdf2-cons-attribute> prefixed-cons-name | other-attribs]
    	   end) <+
    	  (// more than one cons attribute, error
    	   !cons-attribs; ?[_,_|_];
    	   <map(sxbld-analyze-fail(|"Several cons attributes are not allowed"))> cons-attribs)))

	/**
	 * Registers constructor and sort of body declaration if sx-body-dec
	 * attribute is given. The attributes must contain a cons attribute.
	 *
	 * @type (Sdf2Symbol, Sdf2Attributes) -> (Sdf2Symbol, Sdf2Attributes)
	 */
	sxbld-analyze-body-dec =
		?(symbol, attributes);
		where(try(
			<sx-sdf2-is-aterm-attribute-defined(|"sx-body-dec")> attributes;
			<sx-sdf2-extract-aterm-attribute(|"cons")> attributes => cons-attrib;
			<sx-sdf2-cons-attribute-name-quoted; un-double-quote> cons-attrib => cons-name;
			<sxbld-env-add-body-dec> (cons-name, symbol)
		))

	/**
	 * Registers constructor and sort of namespace declaration if sx-namespace-dec
	 * is given. The attributes must contain a cons attribute.
	 *
	 * @type (Sdf2Symbols, Sdf2Symbol, Sdf2Attributes) -> (Sdf2Symbols, Sdf2Symbol, Sdf2Attributes)
	 */
	sxbld-analyze-namespace-dec =
		?(symbols, symbol, attributes);
		where(try(
			<sx-sdf2-is-aterm-attribute-defined(|"sx-namespace-dec")> attributes;
			<sx-sdf2-extract-aterm-attribute(|"sx-namespace-dec")> attributes => namespace-attrib;
			if sxbld-env-is-namespace-dec-defined then
				<sxbld-analyze-fail(|"Only one `sx-namespace-dec' allowed")> namespace-attrib
			else
				<sx-sdf2-extract-aterm-attribute(|"cons")> attributes => cons-attrib;
				<sx-sdf2-cons-attribute-name-quoted; un-double-quote> cons-attrib => cons-name;
				<sx-sdf2-get-args-from-aterm-attribute> namespace-attrib => namespace-args;
				if ?[fun(unquoted(label))] then
					if <sx-sdf2-find-index-of-labelled-symbol(|label)> symbols => index then
						<sxbld-env-set-namespace-dec> (cons-name, index, symbol)
					else
						<sxbld-analyze-fail(|"Label of `sx-namespace-dec' must be attached to symbol on lhs")> label
					end
				else
					<sxbld-analyze-fail(|"`sx-namespace-dec' takes exatcly one argument")> namespace-attrib
				end
			end
		))

	/**
	 * Registers constructor and sort of import declaration if
	 * sx-import-dec is given. The attributes must contain a cons attribute.
	 *
	 * @type (Sdf2Symbols, Sdf2Symbol, Sdf2Attributes) -> (Sdf2Symbols, Sdf2Symbol, Sdf2Attributes)
	 */
	sxbld-analyze-import-dec =
		?(symbols, symbol, attributes);
		where(try(
			<sx-sdf2-is-aterm-attribute-defined(|"sx-import-dec")> attributes;
			<sx-sdf2-extract-aterm-attribute(|"sx-import-dec")> attributes => import-attrib;
			<sx-sdf2-extract-aterm-attribute(|"cons")> attributes => cons-attrib;
			<sx-sdf2-cons-attribute-name-quoted; un-double-quote> cons-attrib => cons-name;
			<sx-sdf2-get-args-from-aterm-attribute> import-attrib => import-args;
			if ?[fun(unquoted(label))] then
				if <sx-sdf2-find-index-of-labelled-symbol(|label)> symbols => index then
					<sxbld-env-add-import-dec> (cons-name, index, symbol)
				else
					<sxbld-analyze-fail(|"Label of `sx-import-dec' must be attached to symbol on lhs")> label
				end
			else
				<sxbld-analyze-fail(|"`sx-import-dec' takes exactly one argument")> import-attrib
			end
		))

	/**
	 * Registers constructor and argument index of namespace suffix if sx-namespace-suffix
	 * is given. The attributes must contain a cons attribute.
	 *
	 * @type (Sdf2Symbols, Sdf2Symbol, Sdf2Attributes) -> (Sdf2Symbols, Sdf2Symbol, Sdf2Attributes)
	 */
	sxbld-analyze-namespace-suffix =
		?(symbols, symbol, attributes);
		where(
			if <sx-sdf2-is-aterm-attribute-defined(|"sx-namespace-suffix")> attributes then
				<sx-sdf2-extract-aterm-attribute(|"sx-namespace-suffix")> attributes => import-attrib;
				<sx-sdf2-extract-aterm-attribute(|"cons")> attributes => cons-attrib;
				<sx-sdf2-cons-attribute-name-quoted; un-double-quote> cons-attrib => cons-name;
				<sx-sdf2-get-args-from-aterm-attribute> import-attrib => import-args;
				if ?[fun(unquoted(label))] then
					if <sx-sdf2-find-index-of-labelled-symbol(|label)> symbols => index then
						<sxbld-env-add-namespace-suffix> (cons-name, index)
					else
						<sxbld-analyze-fail(|"Label of `sx-namespace-suffix' must be attached to symbol on lhs")> label
					end
				else
					<sxbld-analyze-fail(|"`sx-namespace-suffix' takes exactly one argument")> import-attrib
				end
			else
				id
			end)

    /**
     * Analyzes a lexical syntax section.
–     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-lex-syntax =
    	?lexical-syntax(prods);
    	<map(sxbld-analyze-lex-production); unzip> prods => (cf-prod-lists, lex-prod-lists);
        ![context-free-syntax(<concat> cf-prod-lists), lexical-syntax(<concat> lex-prod-lists)]

    /**
     * Analyzes a lexical production.
     *
     * @type Sdf2Production -> (List(Sdf2Production), List(Sdf2Production))
     */
    sxbld-analyze-lex-production =
    	?prod(symbols, symbol, attributes);
    	<sxbld-prefix-all-sorts-base-lang> [symbol|symbols] => [prefixed-symbol|prefixed-symbols];
    	<sxbld-analyze-store-rhs> prefixed-symbol;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbols => ground-symbols;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => ground-symbol;
    	<sxbld-analyze-atoms> (attributes, prefixed-symbol);
    	<sxbld-analyze-namespace-kind> (attributes, prefixed-symbol);
    	<sxbld-analyze-module-identifier> (attributes, prefixed-symbol);
    	<sxbld-analyze-where-equation-prod> (symbol, prefixed-symbol) => where-eq-prods;
    	!(where-eq-prods,
    	  [prod(prefixed-symbols, prefixed-symbol, attributes),
    	   prod(ground-symbols, ground-symbol, attributes)])

    /**
     * Stores the rhs symbol name as atom sort if sx-atoms is given.
     *
     * @type (Sdf2Attributes, Sdf2Symbol) -> _
     */
    sxbld-analyze-atoms =
    	?(attributes, symbol);
    	try(
    		<sx-sdf2-extract-aterm-attribute(|"sx-atoms")> attributes => atoms-attrib; //then
    		if !symbol; ?sort(rhs-name) then
    			<sxbld-env-add-atom-sort> rhs-name
    		else
    			<sxbld-analyze-fail(|"`sx-atoms' requires a sort as right-hand side")> symbol
    		end
    	)

    /**
     * Records the module identifier if sx-module-identifier is given.
     *
     * @type (Sdf2Attributes, Sdf2Symbol) -> (Sdf2Attributes, Sdf2Symbol)
     */
    sxbld-analyze-module-identifier =
    	?(attributes, symbol);
    	where(try(
    		<sx-sdf2-is-aterm-attribute-defined(|"sx-module-identifier")> attributes;
    		if sxbld-env-is-module-identifier-defined then
    			<sx-sdf2-extract-aterm-attribute(|"sx-module-identifier")> attributes => attrib;
    			<sxbld-analyze-fail(|"Only one module identifier attribute allowed")> attrib
   			else
   				<sxbld-env-set-module-identifier> symbol
   			end
    	))

    /**
     * Records the namespace identifier sort and namespace kind if
     * sx-namespace-flat, sx-namespace-nested, or sx-namespace-prefixed
     * is given.
     *
     * @type (Sdf2Attributes, Sdf2Symbol) -> (Sdf2Attributes, Sdf2Symbol)
     */
    sxbld-analyze-namespace-kind =
    	?(attributes, symbol);
    	where(try(
    		<sxbld-analyze-find-namespace-kind> attributes => (namespace-kind, attrib);
    		if sxbld-env-is-namespace-kind-defined then
    			<sxbld-analyze-fail(|"Only one namespace attribute allowed")> attrib
    		else
   				<sxbld-env-set-namespace-kind> namespace-kind;
   				<sxbld-env-set-namespace-identifier> symbol
   			end
   		))

	/**
	 * Returns the namespace kind from the attribute list. It fails if
	 * there is no such attribute. It returns also the attribute to attach
	 * error messages, if necessary.
	 *
	 * If the argument to sx-namespace-nested or -prefixed is invalid, it
	 * fails with an error message.
	 *
	 * @type Sdf2Attributes -> (SXNamespaceKind, Sdf2Attribute)
	 */
	sxbld-analyze-find-namespace-kind =
		?attributes;
		((<sx-sdf2-is-aterm-attribute-defined(|"sx-namespace-flat")> attributes;
		  <sx-sdf2-extract-aterm-attribute(|"sx-namespace-flat")> attributes => attrib;
		  !(SXNamespaceFlat(), attrib)) <+
		 (<sx-sdf2-is-aterm-attribute-defined(|"sx-namespace-nested")> attributes;
		  <sx-sdf2-extract-aterm-attribute(|"sx-namespace-nested")> attributes => attrib;
		  if <sx-sdf2-get-arg-from-aterm-attribute(|1)> attrib => sep then
		  	if !sep; ?fun(quoted(str)) then
		  		<un-double-quote> str => sep-str;
		  		if <eq> (<string-length> sep-str, 1) then
		  			!(SXNamespaceNested(sep-str), attrib)
		  		else
		  			<sxbld-analyze-fail(|"Argument to sx-namespace-nested must be a one character string")> attrib
		  		end
		  	else
		  		<sxbld-analyze-fail(|"Invalid argument to sx-namespace-nested")> attrib
		  	end
		  else
		 	<sxbld-analyze-fail(|"Missing argument to sx-namespace-nested")> attrib
		  end) <+
		 (<sx-sdf2-is-aterm-attribute-defined(|"sx-namespace-prefixed")> attributes;
		  <sx-sdf2-extract-aterm-attribute(|"sx-namespace-prefixed")> attributes => attrib;
		  if <sx-sdf2-get-arg-from-aterm-attribute(|1)> attrib => sep then
		  	if !sep; ?fun(quoted(str)) then
		  		<un-double-quote> str => sep-str;
		  		if <eq> (<string-length> sep-str, 1) then
		  			!(SXNamespacePrefixed(sep-str), attrib)
		  		else
		  			<sxbld-analyze-fail(|"Argument to sx-namespace-prefixed must be a one character string")> attrib
		  		end
		  	else
		  		<sxbld-analyze-fail(|"Invalid argument to sx-namespace-prefixed")> attrib
		  	end
		  else
		  	<sxbld-analyze-fail(|"Missing argument to sx-namespace-prefixed")> attrib
		  end))

    /**
     * Adds the grammars to the environment.
     *
     * @type SXBldGrammarElems -> SXEnv
     */   
   sxbld-add-grammar-elems =
   	   map(\grm -> grammar-elem(grm)\);
   	   sxbld-env-add-grammar-elems
