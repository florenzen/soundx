/**
 * Processing of SDF2 sections
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/GrammarElems

imports org/sugarj/languages/SXBld

imports org/sugarj/soundx/AbstractSyntax

imports org/sugarj/sxbld/Environment
        org/sugarj/sxbld/processing/AnalysisFunctions

imports org/sugarj/sxbld/processing/SortPrefixing
        org/sugarj/sxbld/processing/SDF2


/**
 * Register analyses
 */
strategies
	sxbld-start-analysis = sxbld-analyze-grammar-elems

/**
 * Analyses
 */
strategies
	/**
	 * Analyzes list of SDF2 sections
	 *
	 * Adds SDF2 sections as grammar elems to the environment
	 *
	 * @type SXBldGrammarElems -> SXBldGrammarElems
	 */
	sxbld-analyze-grammar-elems =
		?SXBldGrammarElems(grammars);
		where(
			<map(sxbld-analyze-grammar-elem); concat> grammars;
		    // Not using mapconcat here because it traverses the list from the end to front
		    // which lowers quality of error messages
			sxbld-add-grammar-elems)

    /**
     * Analyzes and transforms a single SDF2 section
     *
     * Gives an error on an unsupported section
     *
     * @type Grammar -> List(Grammar)
     */
    sxbld-analyze-grammar-elem =
        ((sxbld-analyze-sorts +
          sxbld-analyze-cf-syntax +
          sxbld-analyze-lex-syntax +
          sxbld-analyze-variables +
          sxbld-analyze-lex-priorities +
          sxbld-analyze-cf-priorities +
          sxbld-analyze-lex-restrictions +
          sxbld-analyze-cf-restrictions) <+
         sxbld-analyze-unsupported(|"Unsupported SDF 2 section"));
        (?[_|_] <+ ![<id>])

	// TODO: restrictions, priorities must also be doubled like
	// productions

	/**
	 * Prefixes sorts in lexical priorities
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-lex-priorities =
		lexical-priorities(sxbld-prefix-all-sorts-base-lang)
	
   /**
	 * Prefixes sorts in context-free priorities
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-cf-priorities =
		context-free-priorities(sxbld-prefix-all-sorts-base-lang)

    /**
	 * Prefixes sorts in lexical restrictions
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-lex-restrictions =
		lexical-restrictions(sxbld-prefix-all-sorts-base-lang)

	/**
	 * Prefixes sorts in context-free restrictions
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-cf-restrictions =
		context-free-restrictions(sxbld-prefix-all-sorts-base-lang)

	/**
	 * Prefixes sorts in variables
	 *
	 * @type Grammar -> Grammar
	 */
	sxbld-analyze-variables =
	    variables(sxbld-prefix-all-sorts-base-lang)

    /**
     * Prefixes sorts in sorts
     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-sorts =
        'sorts(sxbld-prefix-all-sorts-base-lang)
    	// <map(sxbld-analyze-symbol); sxbld-prefix-all-sorts-base-lang> symbols => analyzed-symbols;
   	 //    !'sorts(analyzed-symbols)

    /**
     * Analyzes a context-free syntax section
     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-cf-syntax =
    	?context-free-syntax(prods);
    	<map(sxbld-analyze-cf-production); concat> prods => analyzed-prods;
        !context-free-syntax(analyzed-prods)

    /**
     * Analyzes a context-free production
     *
     * @type Sdf2Production -> Sdf2Production
     */
    sxbld-analyze-cf-production =
    	?prod(symbols, symbol, attributes);
    	<sxbld-analyze-cf-attributes> attributes => analyzed-attributes;
    	<sxbld-prefix-all-sorts-base-lang> symbol => prefixed-symbol;
    	<sxbld-prefix-all-sorts-base-lang> symbols => prefixed-symbols;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbols => prefixed-ground-symbols;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => prefixed-ground-symbol;
    	![prod(prefixed-symbols, prefixed-symbol, analyzed-attributes),
    	  prod(prefixed-ground-symbols, prefixed-ground-symbol, analyzed-attributes)]

    /**
     * Checks attributes of context-free production
     *
     * Generates a constructor name if necessary, includes it in
     * the analyzed attributes and also returns it.
     *
     * @param sort-name String name of the rhs sort to include in
     *   constructor name
     *
     * @type Sdf2Attributes -> Sdf2Attributes
     */
    sxbld-analyze-cf-attributes =
    	((?no-attrs(); ![]) +
    	 (?attrs(attrib-list); !attrib-list));
    	sxbld-analyze-cf-attribute-list-cons => attrib-list-with-cons;
    	!attrs(attrib-list-with-cons)

    /**
     * Adds or prefixes a cons attribute
     *
     * It returns the new attribute list and the name of the constructor.
     * If a constructor name is given in an attribut the exact string from
     * the input is returned. Therefore, the constructor name is double-qouted.
     *
     * A constructor is only returned if the attribute list does not contain a
     * bracket attribute.
     *
     * @param sort-name String name of the rhs sort to include in
     *   constructor name
     * @type List(Sdf2Attribute) -> List(Sdf2Attribute)
     */
    sxbld-analyze-cf-attribute-list-cons =
    	where(<elem> (bracket(), <id>)) <
    	// bracket attribute, return attributes untouched
    	id +
    	// No bracket attribute
    	(partition(sxbld-sdf2-is-attribute(|"cons")) => (cons-attribs, other-attribs);
    	 ((// No cons attribute, generate one
    	   !cons-attribs; ?[];
     	   sxbld-env-fresh-cons-name => cons-name;
		   sxbld-env-add-cons-name;
    	   ![<sxbld-sdf2-cons-attribute> cons-name | other-attribs]) <+
    	  (// One cons attribute, prefix it
    	   !cons-attribs; ?[cons-attrib];
    	   <sxbld-sdf2-cons-attribute-name-quoted> cons-attrib => cons-name-quoted;
    	   <un-double-quote> cons-name-quoted => cons-name;
    	   <sxbld-env-prefix-name> cons-name => prefixed-cons-name;
		   if sxbld-env-cons-name-defined then
		   	   <sxbld-analyze-fail(|"Duplicate constructor name")> cons-name-quoted
		   else
		   	   <sxbld-env-add-cons-name> prefixed-cons-name;
    	       ![<sxbld-sdf2-cons-attribute> prefixed-cons-name | other-attribs]
    	   end) <+
    	  (// More than one cons attribute, error
    	   !cons-attribs; ?[_,_|_];
    	   <map(sxbld-analyze-fail(|"Several cons attributes are not allowed"))> cons-attribs)))
        
    /**
     * Analyzes a lexical syntax section
     *
     * @type Grammar -> Gramar
     */
    sxbld-analyze-lex-syntax =
    	?lexical-syntax(prods);
    	<map(sxbld-analyze-lex-production); unzip; (concat, concat)> prods => (lex-prods, cf-prods);
        ![lexical-syntax(lex-prods), context-free-syntax(cf-prods)]

    /**
     * Analyzes a lexical production
     *
     * @type Sdf2Production -> (List(Sdf2Production), List(Sdf2Production))
     */
    sxbld-analyze-lex-production =
    	?prod(symbols, symbol, attributes);
    	<sxbld-prefix-all-sorts-base-lang> [symbol|symbols] => [prefixed-symbol|prefixed-symbols];
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbols => ground-symbols;
    	<sxbld-prefix-all-sorts(|"Gnd"); sxbld-prefix-all-sorts-base-lang> symbol => ground-symbol;
    	<sxbld-analyze-neq-judg> (attributes, prefixed-symbol) => cf-prods;
    	<sxbld-analyze-namespace-kind> (attributes, prefixed-symbol);
    	!([prod(prefixed-symbols, prefixed-symbol, attributes),
    	   prod(ground-symbols, ground-symbol, attributes)],
    	  cf-prods)

    /**
     * Generates inequality judgement for symbol if sx-requires-inequality is given
     *
     * @type (Sdf2Attributes, Sdf2Symbol) -> List(Sdf2Production)
     */
    sxbld-analyze-neq-judg =
    	?(attributes, symbol);
    	if <sxbld-sdf2-is-aterm-attribute-defined(|"sx-requires-inequality")> attributes then
    		![prod([symbol, lit("=/="), symbol], sort("SXJudgement"),
    	           attrs([<sxbld-sdf2-cons-attribute> "SXNeq"]))]
    	else
    		![]
    	end
    	    
    /**
     * Records the module identifier sort and namespace kind if sx-namespace-flat is given
     *
     * @type (Sdf2Attributes, Sdf2Symbol) -> (Sdf2Attributes, Sdf2Symbol)
     */
    sxbld-analyze-namespace-kind =
    	?(attributes, symbol);
    	where(
    		if <sxbld-sdf2-is-aterm-attribute-defined(|"sx-namespace-flat")> attributes then
    			<sxbld-env-set-namespace-kind> SXBldNamespaceFlat();
    			<sxbld-env-set-namespace-identifier> symbol
    		else
				id
    		end)

    /**
     * Adds the grammars to the environment
     *
     * @type SXBldGrammarElems -> SXEnv
     */   
   sxbld-add-grammar-elems =
   	   map(\grm -> grammar-elem(grm)\);
   	   sxbld-env-add-grammar-elems
