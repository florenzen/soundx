/**
 * Processing of SDF2 sections
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/processing/GrammarElems

imports org/sugarj/languages/SXBld

imports org/sugarj/soundx/AbstractSyntax

imports org/sugarj/sxbld/Environment
        org/sugarj/sxbld/Analysis

imports org/sugarj/sxbld/processing/SortRenaming

strategies
	/**
	 * Register analyses and desugarings
	 */
	sxbld-desugar-to-env = sxbld-desugar-grammar-elems
	sxbld-start-analysis = sxbld-analyze-grammar-elems

	/**
	 * Analyzes list of SDF2 sections
	 *
	 * @type SXBldGrammarElems -> SXBldGrammarElems
	 */
	sxbld-analyze-grammar-elems =
		?SXBldGrammarElems(grammars);
		<map(sxbld-analyze-grammar-elem)> grammars => analyzed-grammars;
		!SXBldGrammarElems(analyzed-grammars)

    /**
     * Analyzes a single SDF2 section
     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-grammar-elem =
        (sxbld-analyze-sorts +
         sxbld-analyze-cf-syntax +
         sxbld-analyze-lex-syntax) <+
        sxbld-analyze-unsupported(|"Unsupported SDF 2 section")

    /**
     * Analyzes a sorts section
     *
     * @type Grammar -> Grammar
     */
    sxbld-analyze-sorts =
        ?'sorts(symbols);
    	<map(sxbld-analyze-symbol)> symbols => analyzed-symbols;
   	    !'sorts(analyzed-symbols)

    /**
     * Analyzes one symbol of a sorts section
     *
     * The sort name is added as SXAbsUnknownSort() to the environment
     *
     * @type Sdf2Symbol -> Sdf2Symbol
     */
    sxbld-analyze-symbol =
    	sxbld-analyze-symbol-sort <+
    	sxbld-analyze-unsupported(|"Unsupported sort declaration")

    /**
     * Analyzes a sort name
     *
     * The sort name is added as SXAbsUnknownSort() to the environment
     *
     * @type Sdf2Symbol -> Sdf2Symbol
     */
	sxbld-analyze-symbol-sort =
		?symbol@sort(name);
		<sxbld-add-sort> (name, SXAbsSortUnknown());
		!symbol

    /**
     * Succeeds if two sorts are equal, fails otherwise
     *
     * SXAbsSortUnknown() is equal to any sort.
     *
     * @type (SXAbsSort, SXAbsSort) -> (SXAbsSort, SXAbsSort)
     */
    sxbld-sorts-equal =
   		?(SXAbsSortUnknown(), _) +
   		?(_, SXAbsSortUnknown()) +
   		?(SXAbsSortLexical(), SXAbsSortLexical()) +
   		?(SXAbsSortContextFree(), SXAbsSortContextFree())

    /**
     * Adds a sort to the environment
     *
     * If a sort of the same name is already defined the two
     * sorts must be equal, otherwise the analysis fails.
     * If the previously defined sort is
     * SXAbsSortUnknown() it is updated by the new sort.
     *
     * @type (String, SXAbsSort) -> SXEnv
     */
    sxbld-add-sort =
    	?(name, sort);
    	<sxbld-env-get-sort> name;
    	if ?None() then
    		<sxbld-env-add-sort> (name, sort)
    	else
    		?Some(other-sort);
    		if <sxbld-sorts-equal> (sort, other-sort) then
    			<sxbld-add-sort-unless-unknown> (name, sort)
    		else
    			<sxbld-analyze-fail(|"Invalid redeclaration of sort")> name
    		end
    	end

    /**
      * Adds a sort to the environment only if its not SXAbsSortUnknown()
      *
      * @type (String, SXAbsSort) -> SXEnv
      */
    sxbld-add-sort-unless-unknown =
    	(?(name, SXAbsSortUnknown()); sxbld-get-env-hashtable) <+ // Return the environment in any case
    	(?(name, sort); sxbld-env-add-sort)

    /**
     * Analyzes a context-free syntax section
     *
     * @type Grammar -> Gramar
     */
    sxbld-analyze-cf-syntax =
    	?(context-free-syntax(prods));
    	<map(sxbld-analyze-cf-production)> prods => analyzed-prods;
        !(context-free-syntax(analyzed-prods))

    /**
     * Analyzes a context-free production
     *
     * @type Sdf2Production -> Sdf2Production
     */
    sxbld-analyze-cf-production =
    	?prod(symbols, symbol, attributes);
    	<sxbld-analyze-cf-rhs> symbol;
    	!prod(symbols, symbol, attributes)

    /**
     * Analyzes the right-hand side of a context-free production
     *
     * @type Sdf2Symbol -> Sdf2Symbol
     */
    sxbld-analyze-cf-rhs =
    	sxbld-analyze-cf-rhs-sort <+
    	sxbld-analyze-unsupported(|"Unsupported right-hand side")

    /**
     * Adds the right-hand side sort as SXAbsSortContextFree() to environment
     *
     * @type Symbol -> SXEnv
     */
    sxbld-analyze-cf-rhs-sort =
    	?sort(name);
    	<sxbld-add-sort> (name, SXAbsSortContextFree())

    /**
     * Analyzes a lexical syntax section
     *
     * @type Grammar -> Gramar
     */
    sxbld-analyze-lex-syntax =
    	?(lexical-syntax(prods));
    	<map(sxbld-analyze-lex-production)> prods => analyzed-prods;
        !(lexical-syntax(analyzed-prods))

    /**
     * Analyzes a lexical production
     *
     * @type Sdf2Production -> Sdf2Production
     */
    sxbld-analyze-lex-production =
    	?prod(symbols, symbol, attributes);
    	<sxbld-analyze-lex-rhs> symbol;
    	!prod(symbols, symbol, attributes)

    /**
     * Analyzes the right-hand side of a lexical production
     *
     * @type Sdf2Symbol -> Sdf2Symbol
     */
    sxbld-analyze-lex-rhs =
    	sxbld-analyze-lex-rhs-sort <+
    	sxbld-analyze-unsupported(|"Unsupported right-hand side")

    /**
     * Adds the right-hand side sort as SXAbsSortLexical() to environment
     *
     * @type Symbol -> SXEnv
     */
    sxbld-analyze-lex-rhs-sort =
    	?sort(name);
    	<sxbld-add-sort> (name, SXAbsSortLexical())
   
    /**
     * Renames all sorts in the grammars and adds them to the environment
     *
     * @type SXBldGrammarElems -> SXEnv
     */   
    sxbld-desugar-grammar-elems =
    	?SXBldGrammarElems(grammars);
    	<sxbld-rename-all-sorts> grammars => renamed-grammars;
    	<map(\grm -> grammar-elem(grm)\)> renamed-grammars => grammar-elems;
    	<sxbld-env-add-grammar-elems> grammar-elems
