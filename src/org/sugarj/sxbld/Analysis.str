/**
 * Error handling in base language definitions
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/Analysis

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/sxbld/Environment

strategies
    /**
     * Collects all errors from the annotations
     *
     * @type a -> List((a, String))
     */
	constraint-error =
		?ast;
		sxbld-extract-errors;
		map(!(ast, <id>))

	/**
	 * Starts the analysis only if failed is not set
	 *
	 * @type a -> a
	 */
	start-analysis =
	    sxbld-analyze-unless-failed(changed-tree-or-analysis-data(sxbld-start-analysis))

    /**
     * Performs the actual analysis
     *
     * The different analyses must be added to this strategy.
     *
     * @type a -> a
     */
    sxbld-start-analysis = fail

	/**
	 * Analyzes a term unless the failed flag is set
	 *
	 * All analyses for toplevel declarations must be wrapped
	 * by this strategy to avoid follow-up errors.
	 *
	 * Wraps the result of analysis in a SXBldFinishedAnalysis
	 * to stop the iteration in org/sugarj/transformation/analysis/Data.
	 *
	 * @type s a -> a
	 * @type a -> SXBldFinishedAnalysis(a)
	 */
	sxbld-analyze-unless-failed(s) =
		where(<sxbld-env-get-failed> () => SXBldFalse());
		//debug(!"UNLESS FAILED ");
		s // => res; debug(!"RESULT "); !SXBldFinishedAnalysis(res)

    /**
     * Annotates error message, set failed flag, and abort analysis with fail
     *
     * Analysis is aborted after the first error to avoid
     * follow-up errors. Otherwise, all analyses would have
     * to check the failed flag and ignore certain errors as follow-ups.
     *
     * @param String
     * @type a -> a
     */
    sxbld-analyze-fail(|msg) =
    	where(<sxbld-env-failed> ());
    	sxbld-analyze-annotate-error(|msg);
    	fail

    /**
     * Annotates error message only if not failed and sets failed flag
     *
     * This strategy is intended for default case handling, e. g.
     * using (... + ... + ...) <+ sxbld-analyze-unsupported(...)
     *
     * @param msg String
     * @type a -> a
     */
    sxbld-analyze-unsupported(|msg) =
    	where(<sxbld-env-get-failed> () => SXBldFalse());
    	where(<sxbld-env-failed> ());
    	sxbld-analyze-annotate-error(|msg);
    	fail

    /**
     * Extract list of error messages from term
     *
     * @type a -> List(String)
     */
	sxbld-extract-errors =
		get-analysis-data(|"errors") <+ ![]    	

    /**
     * Adds error message to a term
     *
     * @param msg String
     * @type a -> a
     */
    sxbld-analyze-annotate-error(|msg) =
    	?ast;
    	sxbld-extract-errors => msgs;
    	<put-analysis-data(|"errors", [msg|msgs])> ast
