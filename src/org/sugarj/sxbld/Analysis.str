/**
 * Error handling in base language definitions
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/Analysis

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/sxbld/Environment

strategies
	// constraint-error = debug(!"C E "); !(<id>, "bogus")
	constraint-error =
		?ast;
		sxbld-extract-errors;
		map(!(ast, <id>))

	sxbld-extract-errors =
		get-analysis-data(|"errors") <+ ![]

	// constraint-error =
	// 	?ast;
	// 	//debug(!"C E1 ");
	// 	(get-analysis-data(|"error") <+ ![]);
	// 	debug(!"C E2 ");
	// 	map(!(ast, <id>))
	
	sxbld-analyze-unless-failed(s) =
		?ast;
		<sxbld-env-get-failed> () => SXBldFalse();
		<s> ast
		
		// <sxbld-env-get-failed> () => failed;
		// debug(!"UNLESS FAILED ");
		// !failed; ?SXBldFalse(); s

    /**
     * Annotate error message, set failed flag, and abort analysis with fail
     *
     * Analysis is aborted after the first error to avoid
     * follow-up errors. Otherwise, all analyses would have
     * to check the failed flag and ignore certain errors asfollow-ups.
     *
     * @param String
     * @type a -> a
     */
    sxbld-analyze-fail(|msg) =
    	where(<sxbld-env-failed> ());
    	sxbld-analyze-annotate-error(|msg);
    	fail
    	

    sxbld-analyze-annotate-error(|msg) =
    	?ast;
    	(get-analysis-data(|"errors") <+ ![]) => msgs;
    	<put-analysis-data(|"errors", [msg|msgs])> ast
