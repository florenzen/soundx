/**
 * Processing of base language definitions
 *
 * Performs analysis and desugaring
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/Processing

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/soundx/InductiveDefinitions

imports org/sugarj/languages/SXBld

imports org/sugarj/sxbld/Environment

imports org/sugarj/sxbld/processing/AnalysisFunctions
	    org/sugarj/sxbld/processing/EnvDesugaring
		org/sugarj/sxbld/processing/Header
        org/sugarj/sxbld/processing/JudgementForms
        org/sugarj/sxbld/processing/GrammarElems
		org/sugarj/sxbld/processing/InductiveDefinitions
		org/sugarj/sxbld/processing/ModuleStructure
		org/sugarj/sxbld/processing/BaseCompilation


/**
 * Analyses
 */
strategies
	/**
     * Collects all errors from the annotations
     *
     * @type a -> List((a, String))
     */
	constraint-error =
		?ast;
		sxbld-extract-errors;
		map(!(ast, <id>))
	// TODO: there is the following problem: if there is an error in some
	// declaration in the base language definition no more grammars are produced.
	// As a consequence, parse errors may occur later since the input depends on
	// the previous syntax definitions. But if there is a parse error,
	// constraint-error is not executed and the former error which caused
	// parsing to fail is not reported. This can only be repaired in the SugarJ
	// driver.

	/**
	 * Starts the analysis only if failed is not set
	 *
	 * @type a -> a
	 */
	start-analysis =
	    sxbld-analyze-unless-failed(changed-tree-or-analysis-data(sxbld-start-analysis))

	// TODO: when the last toplevel declaration has been seen, check that all
	// the required stuff has been mentioned in the base language definition.
	// This way, the language library can assume that all necessary declarations
	// are available and no checks have to be performed in BaseLanguageDefinition.java.
	// This can be done using the new SUGARJ_is_last_toplevel_declaration primitive.

    /**
     * Performs the actual analysis
     *
     * The different analyses must be added to this strategy.
     *
     * @type a -> a
     */
    sxbld-start-analysis = fail

	/**
	 * Analyzes a term unless the failed flag is set
	 *
	 * All analyses for toplevel declarations must be wrapped
	 * by this strategy to avoid follow-up errors.
	 *
	 * @param s a -> a
	 * @type a -> a
	 */
	sxbld-analyze-unless-failed(s) =
		where(<sxbld-env-get-failed> () => SXBldFalse()); s

/**
 * Desugaring
 */
strategies
    /**
     * Process declaration and return extension-elem from environment
     *
     * @type a -> List(ExtensionElem)
     */
	sxbld-desugaring-env-to-extension-elem =
		sxbld-is-extension-decl;
		sxbld-env-extract-extension-decls

    /**
     * Succeeds if toplevel term contributes to extension declarations
     *
     * @type ToplevelDeclaration -> ToplevelDeclaration
     */
	sxbld-is-extension-decl =
		?SXBldGrammarElems(_) +
		?SXInductiveDefinitions(_) +
		?SXBldJudgementForms(_) +
		?SXBldToplevelDeclarations(_) +
		?SXBldToplevelDeclaration(_) +
		?SXBldInterface(_) +
		?SXBldInterfaceJudgement(_, _, _) +
		?SXBldExtensionBegin(_) +
		?SXBldExtensionEnd(_) +
		?SXBldExtensibleFileExt(_) +
		?SXBldBaseFileExt(_)
	
	/**
	 * Register BLD processing as SugarJ desugarings
	 *
	 * @type a -> a
	 */
	sxbld-desugaring = sxbld-desugaring-env-to-extension-elem
	sxbld-desugaring = sxbld-process-header // TODO: put into desugar and remove sxbld-desugaring-strategy

    /**
     * The main desugaring strategy
     *
     * @type a -> a
     */
	desugar = changed-tree(sxbld-desugaring)
