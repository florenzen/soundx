/**
 * SoundX Base Language Definition environment
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/Environment

imports org/sugarj/languages/Stratego

imports org/sugarj/languages/SXBld

imports org/sugarj/sxbld/processing/MetaExplode
	    org/sugarj/sxbld/processing/SDF2Terms


/**
 * True and false
 */
signature constructors
	SXBldFalse: Bool
	SXBldTrue:  Bool

/**
 * Basic handling of the environment hash table
 *
 * The environment is a hash table from Strings to values.
 * We use SXEnv in type annotation.
 */
strategies
	/**
	 * The environment hash table
	 *
	 * Do not call directly, use sxbld-get-env-hashtable instead.
	 *
	 * @type _ -> SXEnv
	 */
    sxbld-env-hashtable = fail

    /**
     * Returns the environment
     *
     * Creates an empty hash table if called for the first time.
     *
     * @type _ -> SXEnv
     */
    sxbld-get-env-hashtable =
  	    sxbld-env-hashtable <+
  	    (sxbld-new-env-hashtable => ht;
  	    rules(sxbld-env-hashtable: () -> ht);
  	    !ht)

    /**
     * Creates empty environment containing all keys
     *
     * @type _ -> SXEnv
     */
    sxbld-new-env-hashtable =
  	    new-hashtable;
  	    hashtable-put(|"grammar-elems", []);
  	    hashtable-put(|"base-language-name", "");
  	    hashtable-put(|"name-counter", 0);
  	    hashtable-put(|"cons-names", []);
  	    hashtable-put(|"inference-rules", <new-hashtable> ());
  	    hashtable-put(|"toplevel-declaration", "");
  	    hashtable-put(|"toplevel-declarations", "");
  	    hashtable-put(|"interface", "");
  	    hashtable-put(|"interface-judgement", ());
  	    hashtable-put(|"failed", SXBldFalse())

    /**
     * Looks up a key in the environment
     *
     * @type String -> a
     */
    sxbld-env-get:
  	    key -> value
  	    where
  		    <sxbld-get-env-hashtable> ();
  		    hashtable-get(|key) => value

    /**
     * Sets a key to a value in the environment
     *
     * @type String * a -> SXEnv
     */
    sxbld-env-set =
        ?(key, value);
  	    <sxbld-get-env-hashtable> ();
  	    hashtable-put(|key, value)

/**
 * Handling of grammar-elems
 */
strategies
	/**
	 * Gets grammar-elems
	 *
	 * @type _ -> List(Grammar)
	 */
    sxbld-env-get-grammar-elems =
        <sxbld-env-get> "grammar-elems"

    /**
     * Sets grammar-elems
     *
     * @type List(Grammar) -> SXEnv
     */
    sxbld-env-set-grammar-elems =
        ?grammar-elems-new;
  	    <sxbld-env-set> ("grammar-elems", grammar-elems-new)

    /**
     * Adds grammar-elems
     *
     * @type List(Grammar) -> SXEnv
     */
    sxbld-env-add-grammar-elems =
  	    ?grammar-elems-new;
  	    sxbld-env-get-grammar-elems => grammar-elems-old;
  	    <sxbld-env-set-grammar-elems> (<conc> (grammar-elems-new, grammar-elems-old))

/**
 * Handling of inference rules
 */
strategies
    /**
	 * Gets an inference rule
	 *
	 * @type String -> Option(SXAbsInfRule)
	 */
    sxbld-env-get-inference-rule =
    	?name;
  	    <sxbld-env-get> "inference-rules";
  	    maybe(hashtable-get(|name))

    /**
     * Adds an inference rules
     *
     * @type (String, SXAbsInfRule) -> SXEnv
     */  
    sxbld-env-add-inference-rule =
  	    ?(name, rule);
  	    <sxbld-env-get> "inference-rules";
  	    hashtable-put(|name, rule)

/**
 * Handling of base-language-name
 */
strategies
	/**
	 * Gets base-language-name
	 *
	 * @type _ -> String
	 */
    sxbld-env-get-base-language-name =
  	    <sxbld-env-get> "base-language-name"

    /**
     * Sets base-language-name
     *
     * @type String -> SXEnv
     */  
    sxbld-env-set-base-language-name =
  	    ?name;
  	    <sxbld-env-set> ("base-language-name", name)

/**
 * Fresh names
 */
strategies
	/**
	 * Gets name-counter
	 *
	 * @type _ -> integer
	 */
	sxbld-env-get-name-counter =
		<sxbld-env-get> "name-counter"

    /**
     * Sets name-counter
     *
     * @type integer -> SXEnv
     */
    sxbld-env-set-name-counter =
    	?counter;
    	<sxbld-env-set> ("name-counter", counter)

    /**
     * Generates a fresh name with the given prefix
     *
     * @type String -> String
     */
    sxbld-env-fresh-name:
    	prefix -> fresh-name
    	where
    		<sxbld-env-get-name-counter> () => counter;
    	    <sxbld-env-set-name-counter> (<add> (counter, 1));
    	    <int-to-string> counter => suffix;
    	    <conc-strings> (prefix, suffix) => fresh-name

    /**
     * Generates a fresh name for a judgement
     *
     * @type _ -> String
     */
    sxbld-env-fresh-judgement-name =
    	<sxbld-env-fresh-name> "SXJudgement"

    /**
     * Generates a fresh name for a constructor
     *
     * The given sort name is included in the generated name
     *
     * @type String -> String
     */
    sxbld-env-fresh-cons-name =
    	<sxbld-env-fresh-name> "SXCons"
    	
    /**
     * Prefixes given name with the base language name
     *
     * @type String -> String
     */
    sxbld-env-prefix-name =
    	?name;
    	<sxbld-env-get-base-language-name> () => base-language-name;
    	<conc-strings> (base-language-name, name)

	/**
	 * Remove base language name prefix
	 *
	 * @type String -> String
	 */
	 sxbld-env-unprefix-name =
	 	where(<sxbld-env-get-base-language-name; string-length> () => len);
	 	explode-string;
	 	drop(|len);
	 	implode-string

/**
 * Handling of constructor names
 */
strategies
	/**
	 * Adds a constructor name
	 *
	 * @type String -> SXEnv
	 */
	sxbld-env-add-cons-name =
		?name;
		<sxbld-env-get> "cons-names" => names;
		<sxbld-env-set> ("cons-names", [name|names])

    /**
     * Succeeds if a constructor name is defined
     *
     * @type String -> List(String)
     */
	sxbld-env-cons-name-defined =
		?name;
		<sxbld-env-get> "cons-names" => names;
		<elem> (name, names)

/**
 * Handling of the failed flags
 */
strategies
	/**
	 * Gets failed flag
	 *
	 * @type _ -> SXBldBool
	 */
    sxbld-env-get-failed =
        <sxbld-env-get> "failed"

    /**
     * Sets the failed flag
     *
     * @type SXBldBool -> SXEnv
     */
    sxbld-env-set-failed =
        ?failed-new;
  	    <sxbld-env-set> ("failed", failed-new)

    /**
     * Set failed flag to true
     *
     * @type _ -> SXEnv
     */
    sxbld-env-failed =
    	<sxbld-env-set-failed> SXBldTrue()

/**
 * Handling of toplevel-declaration
 */
strategies
	/**
	 * Gets toplevel-declaration
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-toplevel-declaration =
		<sxbld-env-get> "toplevel-declaration"

	/**
	 * Sets toplevel-declaration
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-toplevel-declaration =
    	?sort-name;
    	<sxbld-env-set> ("toplevel-declaration", sort-name)

    /**
     * Succeeds if toplevel-declaration is defined
     *
     * @type _ -> String
     */
    sxbld-env-is-toplevel-declaration-defined =
    	sxbld-env-get-toplevel-declaration; not(?"")

/**
 * Handling of toplevel-declarations
 */
strategies
	/**
	 * Gets toplevel-declarations
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-toplevel-declarations =
		<sxbld-env-get> "toplevel-declarations"

	/**
	 * Sets toplevel-declarations
	 *
	 * @type String -> SXEnv
	 */
    sxbld-env-set-toplevel-declarations =
    	?sort-name;
    	<sxbld-env-set> ("toplevel-declarations", sort-name)

    /**
     * Succeeds if toplevel-declarations is defined
     *
     * @type _ -> String
     */
    sxbld-env-is-toplevel-declarations-defined =
    	sxbld-env-get-toplevel-declarations; not(?"")

/**
 * Handling of interface
 */
strategies
	/**
	 * Gets interface
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-interface =
		<sxbld-env-get> "interface"
		
    /**
	 * Sets interface
	 *
	 * @type String -> SXEnv
	 */
	sxbld-env-set-interface =
    	?sort-name;
    	<sxbld-env-set> ("interface", sort-name)

    /**
     * Succeeds if interface is defined
     *
     * @type _ -> String
     */
    sxbld-env-is-interface-defined =
    	sxbld-env-get-interface; not(?"")

/**
 * Handling of interface-judgement
 */
strategies
	/**
	 * Gets interface-judgement
	 *
	 * @type _ -> (SXBldIntfJudgToplevel, SXBldInfJudgInterface, SXJudgement)
	 */
	sxbld-env-get-interface-judgement =
		<sxbld-env-get> "interface-judgement"
		
    /**
	 * Sets interface-judgement
	 *
	 * @type (SXBldIntfJudgToplevel, SXBldInfJudgInterface, SXJudgement) -> SXEnv
	 */
	sxbld-env-set-interface-judgement =
    	?(toplevel, intf, judg);
    	<sxbld-env-set> ("interface-judgement", (toplevel, intf, judg))

    /**
     * Succeeds if interface-judgement is defined
     *
     * @type _ -> String
     */
    sxbld-env-is-interface-judgement-defined =
    	sxbld-env-get-interface-judgement; not(?())

/**
 * Extraction of extension-decls from environment
 * TODO: should go to desugaring
 */
strategies
    sxbld-env-decls-to-stratego(|term, key) =
    	<trm-explode> term => stratego-alist;
    	<sxbld-env-prefix-name> (<conc-strings> ("-", key)) => strategy-name;
    	![transformation-elem(
    		Strategies([SDefNoArgs(strategy-name, Build(stratego-alist))])
    	 )]

    sxbld-env-extract-extension-decls =
  	    sxbld-env-get-grammar-elems => grm-elems-plain;
  	    sxbld-env-make-toplevel-decs => grm-elems-toplevel-decs;
  	    sxbld-env-make-sig-judg => grm-elems-sig-judg;
	    ((sxbld-env-is-interface-judgement-defined;
	      sxbld-env-get-interface-judgement => sig-judg;
	      sxbld-env-decls-to-stratego(|sig-judg, "interface-judgement")
	     ) <+ ![]) => trans-intf-judg;
	    <sxbld-env-get> "cons-names" => cons-names;
	    sxbld-env-decls-to-stratego(|cons-names, "cons-names") => trans-cons-names;
	    <sxbld-env-get; hashtable-getlist> "inference-rules" => inf-rules;
	    sxbld-env-decls-to-stratego(|inf-rules, "inference-rules") => trans-infrules;
	    <conc> (trans-intf-judg, trans-cons-names, trans-infrules) => transformation-elems;
	    <conc> (grm-elems-plain, grm-elems-toplevel-decs, grm-elems-sig-judg) => grammar-elems;
  	    !SXBldExtensionDecl(<conc> (grammar-elems, transformation-elems))

    sxbld-env-make-toplevel-decs =
    	(sxbld-env-is-toplevel-declaration-defined;
    	 sxbld-env-is-toplevel-declarations-defined;
         sxbld-env-get-toplevel-declaration; sxbld-env-prefix-name => dec;
         sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
         ![grammar-elem(context-free-syntax([
    	     prod([sort(dec), sort(decs)], sort(decs),
    			   attrs([<sxbld-sdf2-cons-attribute> "SXToplevelDeclarationsCons"])),
    	     prod([], sort(decs), attrs([<sxbld-sdf2-cons-attribute> "SXToplevelDeclarationsNil"]))
          ]))]
    	) <+ ![]

	sxbld-env-make-sig-judg =
	    (sxbld-env-is-toplevel-declarations-defined;
	     sxbld-env-is-interface-defined;
	     sxbld-env-get-toplevel-declarations; sxbld-env-prefix-name => decs;
	     sxbld-env-get-interface; sxbld-env-prefix-name => intf;
	     ![grammar-elem(context-free-syntax([
		     prod([sort(intf)], sort("SXBldIntfJudgInterface"), no-attrs()),
			 prod([sort(decs)], sort("SXBldIntfJudgToplevel"), no-attrs())
		  ]))]
	     ) <+ ![]


