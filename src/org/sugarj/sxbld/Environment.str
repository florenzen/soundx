/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * SoundX Base Language Definition environment
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/Environment

imports org/sugarj/languages/Stratego

imports org/sugarj/languages/SXBld

imports org/sugarj/soundx/MetaExplode

imports org/sugarj/soundx/Debug


/**
 * Namespace kinds.
 */
signature constructors
	SXBldNamespaceFlat:     SXBldNamespaceKind
	SXBldNamespaceNested:   String -> SXBldNamespaceKind
	SXBldNamespacePrefixed: String -> SXBldNamespaceKind

/**
 * True and false.
 */
signature constructors
	SXBldFalse: SXBldBool
	SXBldTrue:  SXBldBool

/**
 * Basic handling of the environment hash table. The environment
 * is a hash table from Strings to values. We use SXEnv in type annotations.
 */
strategies
	/**
	 * The environment hash table. Do not call directly,
	 * use sxbld-get-env-hashtable instead.
	 *
	 * @type _ -> SXEnv
	 */
    sxbld-env-hashtable = fail

    /**
     * Returns the environment. Creates an empty hash table when 
     * called for the first time.
     *
     * @type _ -> SXEnv
     */
    sxbld-get-env-hashtable =
  	    sxbld-env-hashtable <+
  	    (sxbld-new-env-hashtable => ht;
  	    rules(sxbld-env-hashtable: () -> ht);
  	    !ht)

    /**
     * Creates empty environment containing all keys.
     *
     * @type _ -> SXEnv
     */
    sxbld-new-env-hashtable =
  	    new-hashtable;
  	    hashtable-put(|"grammar-elems", []);
  	    hashtable-put(|"base-language-name", "");
  	    hashtable-put(|"name-counter", 0);
  	    hashtable-put(|"inference-rules", <new-hashtable> ());
  	    hashtable-put(|"toplevel-declaration", "");
  	    hashtable-put(|"toplevel-declarations", "");
  	    hashtable-put(|"interface", "");
  	    hashtable-put(|"interface-judgement", ());
  	    hashtable-put(|"failed", SXBldFalse());
  	    hashtable-put(|"namespace-identifier", "");
  	    hashtable-put(|"namespace-kind", ());
  	    hashtable-put(|"body-decs", []);
  	    hashtable-put(|"namespace-dec", ());
  	    hashtable-put(|"cons-names", []);
  	    hashtable-put(|"import-decs", []);
  	    hashtable-put(|"extension-begin", "");
  	    hashtable-put(|"extension-end", "");
  	    hashtable-put(|"extensible-file-ext", "");
  	    hashtable-put(|"base-file-ext", "");
  	    hashtable-put(|"atom-sorts", []);
  	    hashtable-put(|"freshness-conditions", <new-hashtable> ());
  	    hashtable-put(|"error-annotations", <new-hashtable> ())

    /**
     * Looks up a key in the environment.
     *
     * @type String -> a
     */
    sxbld-env-get:
  	    key -> value
  	    where
  		    <sxbld-get-env-hashtable> ();
  		    hashtable-get(|key) => value

    /**
     * Sets a key to a value in the environment.
     *
     * @type String * a -> SXEnv
     */
    sxbld-env-set =
        ?(key, value);
  	    <sxbld-get-env-hashtable> ();
  	    hashtable-put(|key, value)

/**
 * Handling of grammar-elems.
 */
strategies
	/**
	 * Gets grammar-elems.
	 *
	 * @type _ -> List(Grammar)
	 */
    sxbld-env-get-grammar-elems =
        <sxbld-env-get> "grammar-elems"

    /**
     * Sets grammar-elems.
     *
     * @type List(Grammar) -> SXEnv
     */
    sxbld-env-set-grammar-elems =
        ?grammar-elems-new;
  	    <sxbld-env-set> ("grammar-elems", grammar-elems-new)

    /**
     * Adds grammar-elems.
     *
     * @type List(Grammar) -> SXEnv
     */
    sxbld-env-add-grammar-elems =
  	    ?grammar-elems-new;
  	    sxbld-env-get-grammar-elems => grammar-elems-old;
  	    <sxbld-env-set-grammar-elems> (<conc> (grammar-elems-new, grammar-elems-old))

/**
 * Handling of inference rules.
 */
strategies
    /**
	 * Gets an inference rule.
	 *
	 * @type String -> Option(SXInfRule)
	 */
    sxbld-env-get-inference-rule =
    	?name;
  	    <sxbld-env-get> "inference-rules";
  	    maybe(hashtable-get(|name))

    /**
     * Adds an inference rule.
     *
     * @type (String, SXInfRule) -> SXEnv
     */  
    sxbld-env-add-inference-rule =
  	    ?(name, rule);
  	    <sxbld-env-get> "inference-rules";
  	    hashtable-put(|name, rule)

/**
 * Handling of base-language-name.
 */
strategies
	/**
	 * Gets base-language-name.
	 *
	 * @type _ -> String
	 */
    sxbld-env-get-base-language-name =
  	    <sxbld-env-get> "base-language-name"

    /**
     * Sets base-language-name.
     *
     * @type String -> SXEnv
     */  
    sxbld-env-set-base-language-name =
  	    ?name;
  	    <sxbld-env-set> ("base-language-name", name)

    /**
     * Succeeds if a base-language-name is defined.
     *
     * @type _ -> String
     */
	sxbld-env-is-base-language-name-defined =
		sxbld-env-get-base-language-name; not(?"")

/**
 * Fresh names.
 */
strategies
	/**
	 * Gets name-counter.
	 *
	 * @type _ -> integer
	 */
	sxbld-env-get-name-counter =
		<sxbld-env-get> "name-counter"

    /**
     * Sets name-counter.
     *
     * @type Int -> SXEnv
     */
    sxbld-env-set-name-counter =
    	?counter;
    	<sxbld-env-set> ("name-counter", counter)

    /**
     * Generates a fresh name with the given prefix.
     *
     * @type String -> String
     */
    sxbld-env-fresh-name:
    	prefix -> fresh-name
    	where
    		<sxbld-env-get-name-counter> () => counter;
    	    <sxbld-env-set-name-counter> (<add> (counter, 1));
    	    <int-to-string> counter => suffix;
    	    <conc-strings> (prefix, suffix) => fresh-name

    /**
     * Generates a fresh name for a judgement.
     *
     * @type _ -> String
     */
    sxbld-env-fresh-judgement-name =
    	<sxbld-env-fresh-name> "SXJudgement"

    /**
     * Generates a fresh name for a constructor. The given
     * sort name is included in the generated name
     *
     * @type String -> String
     */
    sxbld-env-fresh-cons-name =
    	<sxbld-env-fresh-name> "SXCons"
    	
    /**
     * Prefixes given name with the base language name.
     *
     * @type String -> String
     */
    sxbld-env-prefix-name =
    	?name;
    	<sxbld-env-get-base-language-name> () => base-language-name;
    	<conc-strings> (base-language-name, name)

	/**
	 * Remove base language name prefix.
	 *
	 * @type String -> String
	 */
	 sxbld-env-unprefix-name =
	 	where(<sxbld-env-get-base-language-name; string-length> () => len);
	 	explode-string;
	 	drop(|len);
	 	implode-string

/**
 * Handling of constructor names.
 */
strategies
	/**
	 * Adds a constructor name.
	 *
	 * @type String -> SXEnv
	 */
	sxbld-env-add-cons-name =
		?name;
		<sxbld-env-get> "cons-names" => names;
		<sxbld-env-set> ("cons-names", [name|names])

    /**
     * Succeeds if a constructor name is defined.
     *
     * @type String -> List(String)
     */
	sxbld-env-cons-name-defined =
		?name;
		<sxbld-env-get> "cons-names" => names;
		<elem> (name, names)

/**
 * Handling of atom sorts.
 */
strategies
	/**
	 * Adds an atom sort name.
	 *
	 * @type String -> SXEnv
	 */
	sxbld-env-add-atom-sort =
		?name;
		<sxbld-env-get> "atom-sorts" => names;
		<sxbld-env-set> ("atom-sorts", [name|names])

    /**
     * Succeeds if an atom sort name is defined.
     *
     * @type String -> List(String)
     */
	sxbld-env-atom-sort-defined =
		?name;
		<sxbld-env-get> "atom-sorts" => names;
		<elem> (name, names)

/**
 * Handling of the failed flag.
 */
strategies
	/**
	 * Gets failed flag.
	 *
	 * @type _ -> SXBldBool
	 */
    sxbld-env-get-failed =
        <sxbld-env-get> "failed"

    /**
     * Sets the failed flag.
     *
     * @type SXBldBool -> SXEnv
     */
    sxbld-env-set-failed =
        ?failed-new;
  	    <sxbld-env-set> ("failed", failed-new)

    /**
     * Set failed flag to true.
     *
     * @type _ -> SXEnv
     */
    sxbld-env-failed =
    	<sxbld-env-set-failed> SXBldTrue()

/**
 * Handling of toplevel-declaration.
 */
strategies
	/**
	 * Gets toplevel-declaration.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-toplevel-declaration =
		<sxbld-env-get> "toplevel-declaration"

	/**
	 * Sets toplevel-declaration.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-toplevel-declaration =
    	?sort-name;
    	<sxbld-env-set> ("toplevel-declaration", sort-name)

    /**
     * Succeeds if toplevel-declaration is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-toplevel-declaration-defined =
    	sxbld-env-get-toplevel-declaration; not(?"")

/**
 * Handling of toplevel-declarations.
 */
strategies
	/**
	 * Gets toplevel-declarations.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-toplevel-declarations =
		<sxbld-env-get> "toplevel-declarations"

	/**
	 * Sets toplevel-declarations.
	 *
	 * @type String -> SXEnv
	 */
    sxbld-env-set-toplevel-declarations =
    	?sort-name;
    	<sxbld-env-set> ("toplevel-declarations", sort-name)

    /**
     * Succeeds if toplevel-declarations is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-toplevel-declarations-defined =
    	sxbld-env-get-toplevel-declarations; not(?"")

/**
 * Handling of interface.
 */
strategies
	/**
	 * Gets interface.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-interface =
		<sxbld-env-get> "interface"
		
    /**
	 * Sets interface.
	 *
	 * @type String -> SXEnv
	 */
	sxbld-env-set-interface =
    	?sort-name;
    	<sxbld-env-set> ("interface", sort-name)

    /**
     * Succeeds if interface is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-interface-defined =
    	sxbld-env-get-interface; not(?"")

/**
 * Handling of interface-judgement.
 */
strategies
	/**
	 * Gets interface-judgement.
	 *
	 * @type _ -> (SXBldIntfJudgToplevel, SXBldInfJudgInterface, SXJudgement)
	 */
	sxbld-env-get-interface-judgement =
		<sxbld-env-get> "interface-judgement"
		
    /**
	 * Sets interface-judgement.
	 *
	 * @type (SXBldIntfJudgToplevel, SXBldInfJudgInterface, SXJudgement) -> SXEnv
	 */
	sxbld-env-set-interface-judgement =
    	?(toplevel, intf, judg);
    	<sxbld-env-set> ("interface-judgement", (toplevel, intf, judg))

    /**
     * Succeeds if interface-judgement is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-interface-judgement-defined =
    	sxbld-env-get-interface-judgement; not(?())

/**
 * Handling of namespace-identifier.
 */
strategies
	/**
	 * Gets namespace-identifier.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-namespace-identifier =
		<sxbld-env-get> "namespace-identifier"

	/**
	 * Sets namespace-identifier.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-namespace-identifier =
    	?sort-name;
    	<sxbld-env-set> ("namespace-identifier", sort-name)

    /**
     * Succeeds if namespace-identifier is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-namespace-identifier-defined =
    	sxbld-env-get-namespace-identifier; not(?"")

/**
 * Handling of namespace-kind.
 */
strategies
	/**
	 * Gets namespace-kind.
	 *
	 * @type _ -> SXBldNamespaceKind
	 */
	sxbld-env-get-namespace-kind =
		<sxbld-env-get> "namespace-kind"

	/**
	 * Sets namespace-kind.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-namespace-kind =
    	?kind;
    	<sxbld-env-set> ("namespace-kind", kind)

    /**
     * Succeeds if namespace-kind is defined.
     *
     * @type _ -> SXBldNamespaceKind
     */
    sxbld-env-is-namespace-kind-defined =
    	sxbld-env-get-namespace-kind;
    	(?SXBldNamespaceFlat() + ?SXBldNamespaceNested(_) + ?SXBldNamespacePrefixed(_))

/**
 * Handling of body-decs.
 */
strategies
	/**
	 * Adds a constructor and SDF2 symbol.
	 *
	 * @type (String, Sdf2Symbol) -> SXEnv
	 */
	sxbld-env-add-body-dec =
		?(name, symbol);
		<sxbld-env-get> "body-decs" => decs;
		<sxbld-env-set> ("body-decs", [(name, symbol) | decs])

    /**
     * Gets list of body-decs constructors and SDF2 symbols.
     *
     * @type _ -> List((String, Sdf2Symbol))
     */
	sxbld-env-get-body-decs =
		<sxbld-env-get> "body-decs"

/**
 * Handling of namespace-dec
 */
strategies
	/**
	 * Adds a constructor, the namespace identifier position, and SDF2 symbol.
	 *
	 * @type (String, Int, Sdf2Symbol) -> SXEnv
	 */
	sxbld-env-set-namespace-dec =
		?(name, index, symbol);
		<sxbld-env-set> ("namespace-dec", (name, index, symbol))

    /**
     * Gets namespace-dec.
     *
     * @type _ -> (String, Int, Sdf2Symbol)
     */
	sxbld-env-get-namespace-dec =
		<sxbld-env-get> "namespace-dec"

	/**
	 * Succeeds if namespace-dec is defined.
	 *
	 * @type _ -> _
	 */
	sxbld-env-is-namespace-dec-defined =
		<sxbld-env-get> "namespace-dec"; not(?())

/**
 * Handling of freshness-condition.
 */
strategies
	/**
	 * Adds a freshness condition for a sort.
	 *
	 * @type (String, String, String, SXJudgement) -> SXEnv
	 */
	sxbld-env-set-freshness-condition =
		?(sort, name-atom, name-expr, judg);
		<sxbld-env-get> "freshness-conditions" => ht;
		<hashtable-put(|sort, (name-atom, name-expr, judg))> ht

    /**
     * Gets freshness-condition for a specific sort. Fails if there
     * is no freshness condition defined for that sort.
     *
     * @type String -> (String, String, SXJudgement)
     */
	sxbld-env-get-freshness-condition =
		?sort-name;
		<sxbld-env-get> "freshness-conditions" => ht;
		<hashtable-get(|sort-name)> ht

/**
 * Handling of error-annotations.
 */
strategies
	/**
	 * Adds an error annotation for a judgement.
	 *
	 * @type (String, String, Integer) -> SXEnv
	 */
	sxbld-env-set-error-annotation =
		?(judg-name, message, error-loc);
		<sxbld-env-get> "error-annotations" => ht;
		<hashtable-put(|judg-name, (message, error-loc))> ht
		// ;<hashtable-getlist; sx-debug(|"HT ")> ht

    /**
     * Gets error-annotation for a specific judgement. Fails if there
     * is no error annotation for that judgement.
     *
     * @type String -> (String, Integer)
     */
	sxbld-env-get-error-annotation =
		?judg-name;
		<sxbld-env-get> "error-annotations" => ht;
		<hashtable-get(|judg-name)> ht

/**
 * Handling of import-decs.
 */
strategies
	/**
	 * Adds a constructor, the module identifier position, and an SDF2 symbol.
	 *
	 * @type (String, Int, Sdf2Symbol) -> SXEnv
	 */
	sxbld-env-add-import-dec =
		?(name, index, symbol);
		<sxbld-env-get> "import-decs" => decs;
		<sxbld-env-set> ("import-decs", [(name, index, symbol)|decs])

    /**
     * Gets list of imports-decs constructors, positions, and SDF2 symbols.
     *
     * @type _ -> List((String, Int, Sdf2Symbol))
     */
	sxbld-env-get-import-decs =
		<sxbld-env-get> "import-decs"

/**
 * Handling of extension-begin.
 */
strategies
	/**
	 * Gets extension-begin.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-extension-begin =
		<sxbld-env-get> "extension-begin"

	/**
	 * Sets extension-begin.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-extension-begin =
    	?sort-name;
    	<sxbld-env-set> ("extension-begin", sort-name)

    /**
     * Succeeds if extension-begin is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-extension-begin-defined =
    	sxbld-env-get-extension-begin; not(?"")

/**
 * Handling of extension-end.
 */
strategies
	/**
	 * Gets extension-end.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-extension-end =
		<sxbld-env-get> "extension-end"

	/**
	 * Sets extension-end.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-extension-end =
    	?sort-name;
    	<sxbld-env-set> ("extension-end", sort-name)

    /**
     * Succeeds if extension-end is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-extension-end-defined =
    	sxbld-env-get-extension-end; not(?"")

/**
 * Handling of base-file-ext.
 */
strategies
	/**
	 * Gets base-file-ext.
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-base-file-ext =
		<sxbld-env-get> "base-file-ext"

	/**
	 * Sets base-file-ext.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-base-file-ext =
    	?string;
    	<sxbld-env-set> ("base-file-ext", string)

    /**
     * Succeeds if base-file-ext is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-base-file-ext-defined =
    	sxbld-env-get-base-file-ext; not(?"")

/**
 * Handling of extensible-file-ext.
 */
strategies
	/**
	 * Gets extensible-file-ext
	 *
	 * @type _ -> String
	 */
	sxbld-env-get-extensible-file-ext =
		<sxbld-env-get> "extensible-file-ext"

	/**
	 * Sets extensible-file-ext.
	 *
	 * @type String -> SXEnv
	 */		
    sxbld-env-set-extensible-file-ext =
    	?string;
    	<sxbld-env-set> ("extensible-file-ext", string)

    /**
     * Succeeds if extensible-file-ext is defined.
     *
     * @type _ -> String
     */
    sxbld-env-is-extensible-file-ext-defined =
    	sxbld-env-get-extensible-file-ext; not(?"")
