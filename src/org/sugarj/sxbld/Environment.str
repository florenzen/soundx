/**
 * SoundX Base Language Definition environment
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/sxbld/Environment

imports org/sugarj/languages/Stratego

imports org/sugarj/languages/SXBld

/**
 * True and false
 */
signature constructors
	SXBldFalse: Bool
	SXBldTrue:  Bool

/**
 * Basic handling of the environment hash table
 *
 * The environment is a hash table from Strings to values.
 * We use SXEnv in type annotation.
 */
strategies
	/**
	 * The environment hash table
	 *
	 * Do not call directly, use sxbld-get-env-hashtable instead.
	 *
	 * @type _ -> SXEnv
	 */
    sxbld-env-hashtable = fail

    /**
     * Returns the environment
     *
     * Creates an empty hash table if called for the first time.
     *
     * @type _ -> SXEnv
     */
    sxbld-get-env-hashtable =
  	    sxbld-env-hashtable <+
  	    (sxbld-new-env-hashtable => ht;
  	    rules(sxbld-env-hashtable: () -> ht);
  	    !ht)

    /**
     * Creates empty environment containing all keys
     *
     * @type _ -> SXEnv
     */
    sxbld-new-env-hashtable =
  	    new-hashtable;
  	    hashtable-put(|"grammar-elems", []);
  	    hashtable-put(|"inference-rules", []);
  	    hashtable-put(|"base-language-name", "");
  	    hashtable-put(|"name-counter", 0);
  	    hashtable-put(|"sorts", <new-hashtable> ());
  	    hashtable-put(|"form-declarations", []);
  	    hashtable-put(|"failed", SXBldFalse())

    /**
     * Looks up a key in the environment
     *
     * @type String -> a
     */
    sxbld-env-get:
  	    key -> value
  	    where
  		    <sxbld-get-env-hashtable> ();
  		    hashtable-get(|key) => value

    /**
     * Sets a key to a value in the environment
     *
     * @type String * a -> SXEnv
     */
    sxbld-env-set =
        ?(key, value);
  	    <sxbld-get-env-hashtable> ();
  	    hashtable-put(|key, value)

/**
 * Handling of grammar-elems
 */
strategies
	/**
	 * Gets grammar-elems
	 *
	 * @type _ -> List(Grammar)
	 */
    sxbld-env-get-grammar-elems =
        <sxbld-env-get> "grammar-elems"

    /**
     * Sets grammar-elems
     *
     * @type List(Grammar) -> SXEnv
     */
    sxbld-env-set-grammar-elems =
        ?grammar-elems-new;
  	    <sxbld-env-set> ("grammar-elems", grammar-elems-new)

    /**
     * Adds grammar-elems
     *
     * @type List(Grammar) -> SXEnv
     */
    sxbld-env-add-grammar-elems =
  	    ?grammar-elems-new;
  	    sxbld-env-get-grammar-elems => grammar-elems-old;
  	    <sxbld-env-set-grammar-elems> (<conc> (grammar-elems-new, grammar-elems-old))

/**
 * Handling of inference rules
 */
strategies
    /**
	 * Gets all inference-rules
	 *
	 * @type _ -> List(SXNamedInferenceRule)
	 */
    sxbld-env-get-inference-rules =
  	    <sxbld-env-get> "inference-rules"

    /**
     * Sets inference-rules
     *
     * @type List(SXNamedInferenceRule) -> SXEnv
     */  
    sxbld-env-set-inference-rules =
  	    ?inference-rules-new;
  	    <sxbld-env-set> ("inference-rules", inference-rules-new)

    /**
     * Adds inference-rules
     *
     * @type List(SXNamedInferenceRule) -> SXEnv
     */
    sxbld-env-add-inference-rules =
  	    ?inference-rules-new;
  	    sxbld-env-get-inference-rules => inference-rules-old;
  	    <sxbld-env-set-inference-rules> (<conc> (inference-rules-new, inference-rules-old))

/**
 * Handling of base-language-name
 */
strategies
	/**
	 * Gets base-language-name
	 *
	 * @type _ -> String
	 */
    sxbld-env-get-base-language-name =
  	    <sxbld-env-get> "base-language-name"

    /**
     * Sets base-language-name
     *
     * @type String -> SXEnv
     */  
    sxbld-env-set-base-language-name =
  	    ?name;
  	    <sxbld-env-set> ("base-language-name", name)

/**
 * Fresh names
 */
strategies
	/**
	 * Gets name-counter
	 *
	 * @type _ -> integer
	 */
	sxbld-env-get-name-counter =
		<sxbld-env-get> "name-counter"

    /**
     * Sets name-counter
     *
     * @type integer -> SXEnv
     */
    sxbld-env-set-name-counter =
    	?counter;
    	<sxbld-env-set> ("name-counter", counter)

    /**
     * Generates a fresh name with the given prefix
     *
     * @type String -> String
     */
    sxbld-env-fresh-name:
    	prefix -> fresh-name
    	where
    		<sxbld-env-get-name-counter> () => counter;
    	    <sxbld-env-set-name-counter> (<add> (counter, 1));
    	    <int-to-string> counter => suffix;
    	    <conc-strings> (prefix, suffix) => fresh-name

    /**
     * Generates a fresh name for a judgement
     *
     * @type _ -> String
     */
    sxbld-env-fresh-judgement-name =
    	<sxbld-env-get-base-language-name> () => name;
    	<sxbld-env-fresh-name> (<conc-strings> (name, "Judgement"))

    /**
     * Generates a fresh name for a constructor
     *
     * The given sort name is included in the generated name
     *
     * @type String -> String
     */
    sxbld-env-fresh-cons-name =
    	?sort-name;
    	<sxbld-env-get-base-language-name> () => name;
    	<sxbld-env-fresh-name> (<conc-strings> (name, sort-name, "Cons"))

/**
 * Handling of form-declarations
 */
strategies
	/**
	 * Gets form-declarations
	 *
	 * @type _ -> List(SXAbsJudgementForm)
	 */
    sxbld-env-get-form-declarations =
        <sxbld-env-get> "form-declarations"

    /**
     * Sets form-declarations
     *
     * @type List(SXAbsJudgementForm) -> SXEnv
     */
    sxbld-env-set-form-declarations =
        ?form-declarations-new;
  	    <sxbld-env-set> ("form-declaration", form-declarations-new)

    /**
     * Adds a form-declaration
     *
     * @type SXAbsJudgementForm -> SXEnv
     */
    sxbld-env-add-form-declaration =
  	    ?form-declaration-new;
  	    sxbld-env-get-form-declarations => form-declarations-old;
  	    <sxbld-env-set-form-declarations> [form-declaration-new|form-declarations-old]

/**
 * Handling of sort declarations
 */
strategies
    /**
     * Adds a sorts
     *
     * @type (String, SXAbsSort) -> SXEnv
     */
    sxbld-env-add-sort =
  	    ?(name, sort);
  	    <sxbld-env-get> "sorts";
  	    hashtable-put(|name, sort)

    /**
     * Gets a sort
     *
     * @type String -> Option(SXAbsSort)
     */
    sxbld-env-get-sort =
    	?name;
    	<sxbld-env-get> "sorts";
    	hashtable-get(|name) < !Some(<id>) + !None()
    	
/**
 * Handling of the failed flags
 */
strategies
	/**
	 * Gets failed flag
	 *
	 * @type _ -> SXBldBool
	 */
    sxbld-env-get-failed =
        <sxbld-env-get> "failed"

    /**
     * Sets the failed flag
     *
     * @type SXBldBool -> SXEnv
     */
    sxbld-env-set-failed =
        ?failed-new;
  	    <sxbld-env-set> ("failed", failed-new)

    /**
     * Set failed flag to true
     *
     * @type _ -> SXEnv
     */
    sxbld-env-failed =
    	<sxbld-env-set-failed> SXBldTrue()

/**
 * Extraction of extension-decls from environment
 */
strategies
    sxbld-env-extract-extension-decls =
  	    sxbld-env-get-grammar-elems => grammar-elems;
  	    // sxbld-env-get-inference-rules => inference-rules;
  	    // !transformation-elem(Rules([RDefNoArgs("infrules",
  	    //   RuleNoCond(Tuple([]), inference-rules))
  	    // ])) => transformation-elems;
  	    !SXBldExtensionDecl(grammar-elems)