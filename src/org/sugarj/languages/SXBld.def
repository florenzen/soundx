%%
%% Copyright (c) 2015, TU Berlin
%% All rights reserved.
%%
%% Redistribution and use in source and binary forms, with or without
%% modification, are permitted provided that the following conditions are
%% met:
%%
%% - Redistributions of source code must retain the above copyright
%%   notice, this list of conditions and the following disclaimer.
%% - Redistributions in binary form must reproduce the above
%%   copyright notice, this list of conditions and the following
%%   disclaimer in the documentation and/or other materials provided
%%   with the distribution.
%% - Neither the name of the TU Berlin nor the names of its
%%   contributors may be used to endorse or promote products derived
%%   from this software without specific prior written permission.
%%
%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
%% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
%% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
%% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
%% HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
%% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
%% LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
%% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
%% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
%% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%%
definition

module org/sugarj/languages/SXBld

imports org/sugarj/languages/Sugar

imports org/sugarj/soundx/InductiveDefinitions

exports
	
  sorts
	SXBldComment SXBldCommentPart SXBldMinus SXBldEOF

  lexical syntax
    [\ \t\r\n] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\r\n]

  lexical syntax
    SXBldComment                      -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | SXBldEOF) -> SXBldComment
    "/*" SXBldCommentPart* "*/"       -> SXBldComment
    ~[\*]                             -> SXBldCommentPart
    SXBldAsterisk                     -> SXBldCommentPart
    "*"                               -> SXBldAsterisk
                                      -> SXBldEOF

  lexical restrictions
    "/**"         -/- [\/]
    "/*"          -/- [\*]
    SXBldAsterisk -/- [\/]
    SXBldEOF      -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  sorts
  	SXBldNAME SXBldKeyword SXBldNONEMPTYSTRING SXBldQUOTEDSTRING

  lexical syntax
  	[a-zA-Z][a-zA-Z0-9]* -> SXBldNAME
 
    SXBldKeyword -> SXBldNAME {reject}

    "base"        -> SXBldKeyword
    "language"    -> SXBldKeyword
    "definition"  -> SXBldKeyword
    "extensible"  -> SXBldKeyword
    "base"        -> SXBldKeyword
    "file"        -> SXBldKeyword
    "extension"   -> SXBldKeyword
    "toplevel"    -> SXBldKeyword
    "declaration" -> SXBldKeyword
    "interface"   -> SXBldKeyword
    "for"         -> SXBldKeyword
    "is"          -> SXBldKeyword
    "derived"     -> SXBldKeyword
    "by"          -> SXBldKeyword
    "begin"       -> SXBldKeyword
    "end"         -> SXBldKeyword
    "fresh"       -> SXBldKeyword
    "in"          -> SXBldKeyword
    "error"       -> SXBldKeyword
    "message"     -> SXBldKeyword
    "location"    -> SXBldKeyword

    [a-zA-Z0-9]+ -> SXBldNONEMPTYSTRING
    
    ~[\"\n\r]                  -> SXBldSTRINGCHAR
    [\\][\"]                   -> SXBldSTRINGCHAR
    "\"" SXBldSTRINGCHAR* "\"" -> SXBldQUOTEDSTRING

  sorts
  	SXJudgement SXBldIntfJudgToplevel SXBldIntfJudgInterface

  context-free syntax
  	"base" "language" "definition" SXBldNAME -> ToplevelDeclaration {cons("SXBldHeader")}


  	"extensible" "file" "extension" SXBldNONEMPTYSTRING -> ToplevelDeclaration {cons("SXBldExtensibleFileExt")}

    "base" "file" "extension" SXBldNONEMPTYSTRING -> ToplevelDeclaration {cons("SXBldBaseFileExt")}

    "toplevel" "declaration" Sdf2Sort  -> ToplevelDeclaration {cons("SXBldToplevelDeclaration")}
    "toplevel" "declarations" Sdf2Sort -> ToplevelDeclaration {cons("SXBldToplevelDeclarations")}

    "interface" Sdf2Sort -> ToplevelDeclaration {cons("SXBldInterface")}
    
    "interface" "for" SXBldIntfJudgToplevel "is" SXBldIntfJudgInterface
      "derived" "by" SXJudgement -> ToplevelDeclaration {cons("SXBldInterfaceJudgement")}

    "extension" "begin" Sdf2Sort -> ToplevelDeclaration {cons("SXBldExtensionBegin")}
    "extension" "end" Sdf2Sort   -> ToplevelDeclaration {cons("SXBldExtensionEnd")}

	%% TODO instead of Sdf2Label we should have metavariables ranging over the sort
	%% declared after the `:'
     "fresh" Sdf2Label ":" Sdf2Sort "in" Sdf2Label ":" Sdf2Sort "by" SXJudgement
       -> ToplevelDeclaration {cons("SXBldFreshnessDeclaration")}

  sorts
  	SXBldJudgementForm SXBldJudgementForms
  	
  lexical syntax
  	"judgement" -> SXBldKeyword
  	"forms"     -> SXBldKeyword

  context-free syntax
  	"judgement" "forms" SXBldJudgementForm+ -> ToplevelDeclaration {cons("SXBldJudgementForms")}
  	
  	"{" Sdf2Symbols SXBldErrorAnnotation? "}" -> SXBldJudgementForm {cons("SXBldJudgementForm")}

  	"error" "message" SXBldQUOTEDSTRING "location" Sdf2Label
  	  -> SXBldErrorAnnotation {cons("SXBldErrorAnnotation")}

  context-free syntax
  	SXInductiveDefinitions -> ToplevelDeclaration {cons("SXBldInductiveDefinitions")}
    
  	Grammar+ -> ToplevelDeclaration {cons("SXBldGrammarElems")}
