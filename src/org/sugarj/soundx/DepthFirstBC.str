/**
 * Depth-first search backward chaining that build a derivation
 *
 * If no derivation can be found for the goal judgement
 * the algorithm simply fails.
 *
 * Primitive judgements like inequality or concatenation of lexical
 * elements require their input arguments to be bound. That is, it works
 * similar to Prolog arithmetics.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/DepthFirstBC

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Unification
		org/sugarj/soundx/Substitution
		org/sugarj/soundx/Declarations

imports org/sugarj/soundx/Debug


strategies
	sx-dfsbc-build-derivation =
		?(asms, inf-rules, judg);
		<sx-vars> asms => vars-asms;
		<sx-dfsbc-build-derivations(|vars-asms)> (asms, inf-rules, [judg]) => (_, [deriv]);
		!deriv

	sx-dfsbc-build-derivations(|vars-asms) =
		?(asms, inf-rules, []);
		!(<sx-sub-empty> (), [])
	sx-dfsbc-build-derivations(|vars-asms) =
		?(asms, inf-rules, goals@[judg|_]);
		(<sx-dfsbc-build-derivations-by-asm(|vars-asms)> (asms, asms, inf-rules, goals) <+
		 (<sx-is-prim-judgement> judg;
		  //debug(!"IS PRIM ");
		  <sx-dfsbc-build-derivations-by-prim(|vars-asms)> (asms, inf-rules, goals)) +
		  <sx-is-ind-def-judgement> judg;
		  //debug(!"IS IND DEF JUDG");
		  <sx-dfsbc-build-derivations-by-rule(|vars-asms)> (asms, inf-rules, inf-rules, goals))

	sx-dfsbc-build-derivations-by-asm(|vars-asms) =
		?(all-asms, [], inf-rules, goals);
		fail
	sx-dfsbc-build-derivations-by-asm(|vars-asms) =
		?(all-asms, [asm|asms], inf-rules, goals@[judg|judgs]);
		((<sx-dfsbc-unify(|vars-asms)> (judg, <sx-concl> asm) => mgu;
		  <sx-sub-apply> (mgu, judgs) => judgs1;
		  <sx-dfsbc-build-derivations(|vars-asms)> (all-asms, inf-rules, judgs1) => (sub, derivs);
		  <sx-sub-compose> (sub, mgu) => sub1;
		  !(sub1, [asm|derivs])) <+
		 <sx-dfsbc-build-derivations-by-asm(|vars-asms)> (all-asms, asms, inf-rules, goals))

	// Note: the rule names in the SXDerivInst nodes for a primitive judgement
	// must contain characters that are not allowed in rule names of inductive
	// definitions since the rule names of the base system are not prefixed.
	sx-dfsbc-build-derivations-by-prim(|vars-asms) =
		// inequality judgement
		?(asms, inf-rules, [judg@SXNeq(expr1, expr2) | judgs]);
		//debug(!"BY PRIM ");
		// both arguments must be bound to a ground expression
		<sx-vars> expr1 => [];
		<sx-vars> expr2 => [];
		not(<eq> (expr1, expr2));
		<sx-dfsbc-build-derivations(|vars-asms)> (asms, inf-rules, judgs) => (sub, derivs);
		!(sub, [SXDerivInst([], "=/=", judg) | derivs])
	sx-dfsbc-build-derivations-by-prim(|vars-asms) =
		// get interface judgement
		?(asms, inf-rules, [judg@SXGetInterface(var, mid) | judgs]);
		// first argument must be a metavariable, second one must be bound to a string
		<sx-is-metavar> var;
		<is-string> mid;
		<sx-interface-expr> mid => interface; // Get interface
		<sx-debug(|"Retrieved interface ")> (mid, interface);
		<sx-sub-singleton> (var, interface) => sub-intf;
		<sx-sub-apply> (sub-intf, judgs) => judgs1;
		<sx-dfsbc-build-derivations(|vars-asms)> (asms, inf-rules, judgs1) => (sub, derivs);
		<sx-sub-compose> (sub, sub-intf) => sub1;
		<sx-sub-apply> (sub1, judg) => judg1;
		!(sub1, [SXDerivInst([], "=interface()", judg1) | derivs])

	sx-dfsbc-build-derivations-by-rule(|vars-asms) =
		?(asms, all-inf-rules, [], goals);
		fail
	sx-dfsbc-build-derivations-by-rule(|vars-asms) =
		?(asms, all-inf-rules, [inf-rule|inf-rules], goals@[judg|judgs]);
		((<sx-fresh-inf-rule> inf-rule => SXInfRule(premises, name, concl);
		  //debug(!"FRESH RULE ****** ");
		  //debug(!"FRESH INF RULE");
		  <sx-dfsbc-unify(|vars-asms)> (judg, concl) => mgu;
		  <sx-sub-apply> (mgu, <conc> (premises, judgs)) => judgs1;
		  //debug(!"JUDGS1 ");
		  <sx-dfsbc-build-derivations(|vars-asms)> (asms, all-inf-rules, judgs1) => (sub, derivs);
		  //debug(!"SUB DERIVS ");
		  //where(<debug(!"RULE ")> name);
		  //where(<hashtable-getlist; debug(!"SUB *** ")> sub);
		  //where(<hashtable-getlist;debug(!"MGU *** ")> mgu);
		  <split-at(|<length> premises)> derivs => (derivs-prem, derivs-other);
		  <sx-sub-compose> (sub, mgu) => sub1;
		  <sx-sub-apply> (sub1, judg) => judg1;
		  !(sub1, [SXDerivInst(derivs-prem, name, judg1) | derivs-other])) <+
		 <sx-dfsbc-build-derivations-by-rule(|vars-asms)> (asms, all-inf-rules, inf-rules, goals))

	sx-dfsbc-unify(|vars-asms) =
		?(expr1, expr2);
		<sx-vars> (expr1, expr2) => vars-exprs;
		<diff> (vars-exprs, vars-asms) => vars-unify;
		//debug(!"VARS UNIFY");
		<sx-unify(|vars-unify)> (expr1, expr2) => result;
		if !result; ?SXUnificationFailure(_) then
			fail
		else
			!result
		end
