/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * The SoundX derivation top-down/bottom-up desugaring procedure.
 *
 * @author Florian Lorenzen <florian.lorenzen>
 */
module org/sugarj/soundx/DerivationDesugaring

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Unification
		org/sugarj/soundx/Substitution
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/DepthFirstBC
		org/sugarj/soundx/BasicDesugaring
		org/sugarj/soundx/Classification
		org/sugarj/soundx/Environment
		org/sugarj/soundx/AnalysisFunctions
		org/sugarj/soundx/PrettyPrint
		org/sugarj/soundx/FreshAtoms

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Desugars a derivation. It either returns the desugared
	 * list of toplevel declarations or it aborts if it is stuck in the forward step.
	 *
	 * @type _ -> List(ToplevelDeclaration)
	 */
	sx-derivation-desugaring =
		sx-env-get-derivation => deriv;
		sx-env-get-re-exports => imported-exts;
		<sx-deriv-desugar-from-imports(|imported-exts)> deriv => deriv-des;
		// extract desugared program from desugared conclusion
		<sx-concl> deriv-des => concl-des;
		sx-interface-judgement => (tlds-pattern, intf-pattern, judg);
		<sx-vars> judg => judg-vars;
		<sx-unify(|judg-vars)> (judg, concl-des) => result;
		if !result; ?SXUnificationFailure(unif-msg) then
			<conc-strings> ("Could not unify interface judgement and desugared conclusion",
				"\n(defect of base language definition)",
				"\nUnification returned: ", unif-msg) => msg;
			<sx-locate-source; sx-analysis-fail(|msg)> deriv
		else
			<sx-sub-apply> (result, tlds-pattern) => des-program;
			<sx-toplevel-decls-to-list> des-program
		end

	/**
	 * Desugars one extension after the other from beginning to end of the list.
	 *
	 * @param imported-exts List(String)
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-from-imports(|imported-exts) =
		?deriv;
		!imported-exts;
		((?[];
		  !deriv
		 ) <+
		 (?[imp-ext|imp-exts];
		  <sx-debug(|"Desugar extension: ")> imp-ext;
		  <sx-deriv-desugar-from-imports(|imp-ext, imp-exts)> deriv => deriv-des;
		  <sx-deriv-desugar-from-imports(|imp-exts)> deriv-des
		 )
		)
		
	/**
	 * Desugars one extension given the name of the current extension
	 * and the names of the imported extensions.
	 *
	 * @param current-ext String
	 * @param impored-exts List(String)
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-from-imports(|current-ext, imported-exts) =
		?deriv;
		<sx-extension-inference-rules> current-ext => ext-inf-rules;
		<mapconcat(sx-extension-inference-rules)> imported-exts => inf-rules-imported;
		sx-inference-rules => base-inf-rules;
		<sx-fresh-remove-fresh-judg-implies-freshness-cond-rules> base-inf-rules => base-inf-rules1;
		<conc> (base-inf-rules1, inf-rules-imported) => base-imp-rules;
		<sx-deriv-desugar-ext-base(|current-ext, ext-inf-rules, base-imp-rules)> deriv

	/**
	 * Desugars one extension given the name of the current extension
	 * the inference rules of the extension and the inference rules of
	 * the base system.
	 *
	 * @param current-ext String
	 * @param ext-inf-rules List(SXInfRule)
	 * @param base-inf-rules List(SXInfRule))
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-ext-base(|current-ext, ext-inf-rules, base-inf-rules) =
		sx-deriv-downup(
			sx-deriv-desugar-top-down(|current-ext, ext-inf-rules, base-inf-rules),
			sx-deriv-desugar-bottom-up(|current-ext, ext-inf-rules, base-inf-rules))

	/**
	 * Downup strategy for derivation trees. It is a specilization of
	 * the downup strategy.
	 * 
	 * @param down-s SXDeriv -> SXDeriv
	 * @param up-s SXDeriv -> SXDeriv
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-downup(down-s, up-s) =
		down-s => SXDerivInst(subderivs1, rule-name1, concl1);
		<map(sx-deriv-downup(down-s, up-s))> subderivs1 => subderivs2;
		<up-s> SXDerivInst(subderivs2, rule-name1, concl1)
		// We could also use downup and wrap sx-deriv-desugar-top-down
		// and sx-deriv-desugar-bottom-up such that they also
		// succeed with id on all the subterms but sx-deriv-downup
		// is more direct and performs fewer traversals.

	/**
	 * The one-step top-down rewriting of derivations.
	 *
	 * @param current-ext String
	 * @param ext-inf-rules List(SXInfRule)
	 * @param base-inf-rules List(SXInfRule))
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-top-down(|current-ext, ext-inf-rules, base-inf-rules) =
		?deriv@SXDerivInst(subderivs, rule-name, concl);
		(// base language rule (this implements TD-Base)
		 (<sx-deriv-desugar-is-rule-defined-in(|base-inf-rules)> rule-name;
		  !deriv
		 ) <+
		 // extension rule
		 (<sx-deriv-desugar-is-rule-defined-in(|ext-inf-rules)> rule-name => current-inf-rule;
		  <sx-fresh-inf-rule> current-inf-rule => fresh-inf-rule@SXInfRule(premises-fresh, inf-rule-name, concl-fresh);
		  if <sx-classify-inf-rule-x(|current-ext, ext-inf-rules, base-inf-rules)> fresh-inf-rule; ?SXRuleX() then
		  	// X rule (this implementes TD-ExtExt)
		  	<sx-basic-desugar-inf-rule(|current-ext)> fresh-inf-rule => SXInfRule(premises-des, _, concl-des);
		  	<sx-vars> fresh-inf-rule => vars-fresh-rule;
		  	<map(sx-concl)> subderivs => concl-subderivs;
		  	<sx-unify(|vars-fresh-rule)> ([concl-fresh|premises-fresh], [concl|concl-subderivs]) => result;
		  	if !result; ?SXUnificationFailure(unif-msg) then
		  		<sx-desugar-unification-failed-bug> ("TD", concl, rule-name, unif-msg,
		  			[concl-fresh|premises-fresh], [concl|concl-subderivs], vars-fresh-rule)
		  	else
		  		<sx-sub-apply> (result, concl-des) => concl-des-instantiated;
		  		<sx-fresh-atom-replace-all> concl-des-instantiated => concl-des-fresh-atoms;
		  		<conc> (ext-inf-rules, base-inf-rules) => all-inf-rules;
		  		<map(\SXDerivInst(_,_,c) -> c\); sx-debug(|"filling subderivs: ")> subderivs;
		  		<sx-debug(|"filling goal: ")> concl-des-fresh-atoms;
		  		if <sx-dfsbc-build-derivation> (subderivs, all-inf-rules, concl-des-fresh-atoms) => deriv-des then
		  			!deriv-des
		  		else
		  			<sx-desugar-filling-gap-failed-bug> (<conc-strings> ("TD-ExtExt for rule ", inf-rule-name), concl)
		  		end
		  	end
		  else
		  	// B rule (this implements TD-ExtBase)
		  	!deriv
		  end
		))

	/**
	 * The one-step bottom-up rewriting of derivations.
	 *
	 * @param current-ext String
	 * @param ext-inf-rules List(SXInfRule)
	 * @param base-inf-rules List(SXInfRule))
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-bottom-up(|current-ext, ext-inf-rules, base-inf-rules) =
		?deriv@SXDerivInst(_, rule-name, _);
		(// base language rule
		 (<sx-deriv-desugar-is-rule-defined-in(|base-inf-rules)> rule-name => current-inf-rule;
		  <sx-deriv-desugar-bottom-up-base(|current-ext, current-inf-rule)> deriv
		 ) <+
		 // extension rule
		 (<sx-deriv-desugar-is-rule-defined-in(|ext-inf-rules)> rule-name => current-inf-rule;
		  <sx-deriv-desugar-bottom-up-ext(|current-ext, current-inf-rule, base-inf-rules)> deriv
		 ))

	/**
	 * One-step bottom-up rewriting for base language rule.
	 *
	 * @param current-inf-rule SXInfRule
	 * @param current-ext String
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-bottom-up-base(|current-ext, current-inf-rule) =
		?SXDerivInst(subderivs, rule-name, concl);
		<sx-fresh-inf-rule> current-inf-rule => SXInfRule(premises-rule, _, concl-rule);
		<sx-vars> premises-rule => premises-rule-vars;
		<map(sx-concl)> subderivs => concls-subderivs;
		<zip; sx-unify(|premises-rule-vars)> (premises-rule, concls-subderivs) => result1;
		if !result1; ?SXUnificationFailure(unif-msg) then
 			<sx-forward-step-failure> (concl, rule-name, unif-msg, premises-rule, concls-subderivs)
		else
			<sx-vars> concl-rule => concl-rule-vars;
		  	<sx-unify(|concl-rule-vars)> (concl-rule, concl) => result2;
		  	if !result2; ?SXUnificationFailure(unif-msg) then
		  		<sx-desugar-unification-failed-bug> ("BU base", concl, rule-name, unif-msg,
		  			concl-rule, concl, concl-rule-vars)
		  	else
		  		<sx-sub-dom> result2 => dom-sub2;
		  		<sx-sub-restrict> (result2, <diff> (dom-sub2, premises-rule-vars)) => sub21;
		  		<sx-basic-desugar-sub(|current-ext)> sub21 => sub21-desugared;
		  		<sx-sub-compose> (sub21-desugared, result1) => sub;
		  		!SXDerivInst(subderivs, rule-name, <sx-sub-apply> (sub, concl-rule))
		  	end
		end

	/**
	 * One-step bottom-up rewriting for an extension rule.
	 * 
	 * @param current-inf-rule SXInfRule
	 * @param current-ext String
	 * @param base-rules List(SXInfRule)
	 *
	 * @type SXDeriv -> SXDeriv
	 */
	sx-deriv-desugar-bottom-up-ext(|current-ext, current-inf-rule, base-rules) =
		?SXDerivInst(subderivs, rule-name, concl);
		<sx-fresh-inf-rule> current-inf-rule => inf-rule-fresh@SXInfRule(_, _, concl-fresh);
		<sx-basic-desugar-inf-rule(|current-ext)> inf-rule-fresh => SXInfRule(premises-des, _, concl-des);
		<sx-vars> premises-des => premises-des-vars;
		<map(sx-concl)> subderivs => concls-subderivs;
		<zip; sx-unify(|premises-des-vars)> (premises-des, concls-subderivs) => result1;
		if !result1; ?SXUnificationFailure(unif-msg) then
			<sx-forward-step-failure> (concl, rule-name, unif-msg, premises-des, concls-subderivs)
		else
			<sx-vars> concl-fresh => concl-fresh-vars;
		  	<sx-unify(|concl-fresh-vars)> (concl-fresh, concl) => result2;
		  	if !result2; ?SXUnificationFailure(unif-msg) then
		  		<sx-desugar-unification-failed-bug> ("BU ext", concl, rule-name, unif-msg,
		  			concl-fresh, concl, concl-fresh-vars)
		  	else
		  		<sx-sub-dom> result2 => dom-sub2;
		  		<sx-sub-restrict> (result2, <diff> (dom-sub2, premises-des-vars)) => sub21;
		  		<sx-basic-desugar-sub(|current-ext)> sub21 => sub21-desugared;
		  		<sx-sub-compose> (sub21-desugared, result1) => sub;
		  		<sx-sub-apply> (sub, concl-des) => desugared-goal;
		  		<sx-fresh-atom-replace-all> desugared-goal => desugared-goal-fresh-atoms;
				if <sx-dfsbc-build-derivation> (subderivs, base-rules, desugared-goal-fresh-atoms)
					=> deriv-des then
					!deriv-des
				else
					<sx-desugar-filling-gap-failed-bug> ("BU-Ext", concl) 
				end		  		
		  	end
		end

	/**
	 * Succeeds if rule-name is defined in the given list of rules
	 * and returns that rule. Always returns an axiom scheme for a primitive
	 * judgement name like `=/=' or `=interface()' or `_SXFreshness<Sort>_<N>'.
	 *
	 * @param rules List(SXInfRule)
	 *
	 * @type String -> SXInfRule
	 */
	sx-deriv-desugar-is-rule-defined-in(|inf-rules) =
		?rule-name;
		((!rule-name; ?"=interface()"; sx-prim-axiom-interface) <+
		 (!rule-name; ?"=/="; sx-prim-axiom-neq) <+
		 (!rule-name; ?"concat()="; sx-prim-axiom-concat) <+
		 (!rule-name; ?"suffix()="; sx-prim-axiom-suffix) <+
		 (!rule-name; string-starts-with(|"_SXFreshness"); <sx-prim-axiom-freshness> rule-name) <+ 
		 (<collect-one(?SXInfRule(_, rule-name, _))> inf-rules))

	/**
	 * Signals a forward step failure.
	 *
	 * @type (SXJudgement, String, String, List(SXJudgement), List(SXJudgement)) -> _
	 */
	sx-forward-step-failure =
		?(concl, rule-name, unif-msg, premises-rule, concls-subderivs);
		<sx-pretty-print-comma> premises-rule => premises-msg;
    	<sx-pretty-print-comma> concls-subderivs => concls-msg;
      	<conc-strings> ("*** STUCK *** forward step stuck on rule ", rule-name,
		  	"\nUnification returned: ", unif-msg,
		  	"\nPremises:             ", premises-msg,
		  	"\nConclusions:          ", concls-msg) => stuck-msg;
		<sx-locate-source; sx-analysis-fail(|stuck-msg)> concl

	/**
	 * Signals that a unification of a conclusion failed (a bug).
	 *
	 * @type (SXJudgement, String, String) -> _
	 */
	sx-desugar-unification-failed-bug =
		?(pass, concl, rule-name, unif-msg, expr1, expr2, vars);
		<write-to-string> expr1 => expr1-string;
		<write-to-string> expr2 => expr2-string;
		<write-to-string> vars => vars-string;
		<conc-strings> ("Unification failed for rule ", rule-name,
			" in pass ", pass,
			"\nTried to unify",
			"\n  ", expr1-string,
			"\nand",
			"\n  ", expr2-string,
			"\nwith unification variables",
			"\n  ", vars-string,
			"\nThe error message is: ",
			"\n  ", unif-msg) => bug-msg;
		<sx-locate-source; sx-signal-bug(|bug-msg)> concl

	/** Signals that a derivation cannot be filled in (a bug).
	 *
	 * @type (String, SXJudgement) -> _
	 */
	sx-desugar-filling-gap-failed-bug =
		?(case, concl);
		<conc-strings> ("Filling the gap in ", case, " failed") => msg;
		<sx-locate-source; sx-signal-bug(|msg)> concl 
