/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * Desugaring of inference rules and substitutions.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de
 */
module org/sugarj/soundx/BasicDesugaring

imports org/sugarj/soundx/Declarations
		org/sugarj/soundx/Substitution


strategies
	/**
	 * Desugars an inference rule using the guarded and universal desugarings
	 * of the current extension
	 *
	 * @param current-ext String
	 *
	 * @type SXInfRule -> SXInfRule
	 */
	sx-basic-desugar-inf-rule(|current-ext) =
		sx-basic-desugar-apply-universal-guarded(|current-ext)

	/**
	 * Desugars a substitution using the universal desugarings of
	 * the current extension.
	 *
	 * @param current-ext String
	 *
	 * @type SXSub -> SXSub
	 */
	sx-basic-desugar-sub(|current-ext) =
		sx-sub-map(sx-basic-desugar-apply-universals(|current-ext))

	/**
	 * Applies the universal desugarings of the current extension
	 * using a repeated bottom-up strategy.
	 *
	 * @param String current-ext
	 *
	 * @type a - > a
	 */
	sx-basic-desugar-apply-universals(|current-ext) =
		sx-basic-desugar-apply-desugarings(sx-universal-desugarings|current-ext)

	/**
	 * Applies the guarded desugarings of the current extension
	 * using a repeated bottom-up strategy.
	 *
	 * @param String current-ext
	 *
	 * @type a - > a
	 */
	sx-basic-desugar-apply-guarded(|current-ext) =
		sx-basic-desugar-apply-desugarings(sx-guarded-desugarings|current-ext)
		
	/**
	 * Applies the guarded and universal desugarings of the current extension
	 * using a repeated bottom-up strategy.
	 *
	 * @param String current-ext
	 *
	 * @type a - > a
	 */
	sx-basic-desugar-apply-universal-guarded(|current-ext) =
		sx-basic-desugar-apply-desugarings(sx-guarded-desugarings + sx-universal-desugarings|current-ext)
	
	/**
	 * Applies the given desugarings of the current extension
	 * using a repeated bottom-up strategy. The rewrite rules
	 * of the current extension are activated by a scoped dynamic
	 * rule sx-desugaring-active-module.
	 *
	 * @param a -> a desugarings
	 * @param String current-ext
	 *
	 * @type a -> a
	 */
	sx-basic-desugar-apply-desugarings(desugarings|current-ext) =
		?term;
		{
			sx-desugaring-active-module:
				rules(sx-desugaring-active-module: _ -> current-ext);
				<repeat(oncebu(desugarings))> term => term-desugared
		}
