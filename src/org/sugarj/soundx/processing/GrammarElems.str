/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Processing of SDF2 sections
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/GrammarElems

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
        org/sugarj/soundx/AnalysisFunctions
        org/sugarj/soundx/SDF2
        org/sugarj/soundx/ExtensionDefinition

imports org/sugarj/soundx/processing/Prefixing

// TODO: generate =/= judgement for sorts that are introduced in this extension

strategies
	/**
	 * Analyzes list of SDF2 sections
	 *
	 * Adds SDF2 sections as grammar elems to the environment
	 *
	 * @type ToplevelDeclaration -> ToplevelDeclaration
	 */
	sx-process-grammar-elems =
		?SXGrammarElems(grammars);
		where(
			if sx-env-is-extension-processing then
				<map(sx-process-grammar-elem); concat> grammars;
		    	// Not using mapconcat here because it traverses the list from the end to front
		    	// which lowers quality of error messages
				sx-process-add-grammar-elems
			else
				sx-analysis-fail(|"grammars cannot appear outside extensions")
			end)

    /**
     * Analyzes and transforms a single SDF2 section
     *
     * Gives an error on an unsupported section
     *
     * @type Grammar -> List(Grammar)
     */
    sx-process-grammar-elem =
        ((sx-process-sorts +
          sx-process-cf-syntax +
          sx-process-lex-syntax +
          sx-process-variables +
          sx-process-lex-priorities +
          sx-process-cf-priorities +
          sx-process-lex-restrictions +
          sx-process-cf-restrictions) <+
         sx-analysis-unsupported(|"Unsupported SDF 2 section"));
        (?[_|_] <+ ![<id>])

	/**
	 * Prefixes sorts in lexical priorities
	 *
	 * @type Grammar -> Grammar
	 */
	sx-process-lex-priorities =
		?lexical-priorities(prios);
		<sx-prefix-all-sorts(|"Gnd")> prios => prios-gnd;
		<conc; sx-prefix-all-sorts-base-lang> (prios, prios-gnd) => prios-prefixed;
		!lexical-priorities(prios-prefixed)
	
   /**
	 * Prefixes sorts in context-free priorities
	 *
	 * @type Grammar -> Grammar
	 */
	sx-process-cf-priorities =
		?context-free-priorities(prios);
		<sx-prefix-all-sorts(|"Gnd")> prios => prios-gnd;
		<conc; sx-prefix-all-sorts-base-lang> (prios, prios-gnd) => prios-prefixed;
		!context-free-priorities(prios-prefixed)

    /**
	 * Prefixes sorts in lexical restrictions
	 *
	 * @type Grammar -> Grammar
	 */
	sx-process-lex-restrictions =
		?lexical-restrictions(restr);
	    <sx-prefix-all-sorts(|"Gnd")> restr => restr-gnd;
		<conc; sx-prefix-all-sorts-base-lang> (restr, restr-gnd) => restr-prefixed;
	    !lexical-restrictions(restr-prefixed)

	/**
	 * Prefixes sorts in context-free restrictions
	 *
	 * @type Grammar -> Grammar
	 */
	sx-process-cf-restrictions =
		context-free-restrictions(sx-prefix-all-sorts-base-lang)

	/**
	 * Prefixes sorts in variables
	 *
	 * @type Grammar -> Grammar
	 */
	sx-process-variables =
	    variables(sx-prefix-all-sorts-base-lang)

    /**
     * Prefixes sorts in sorts
     *
     * @type Grammar -> Grammar
     */
    sx-process-sorts =
        'sorts(sx-prefix-all-sorts-base-lang)

    /**
     * Analyzes a context-free syntax section
     *
     * @type Grammar -> Grammar
     */
    sx-process-cf-syntax =
    	?context-free-syntax(prods);
    	<map(sx-process-cf-production); concat> prods => analyzed-prods;
        !context-free-syntax(analyzed-prods)

    /**
     * Analyzes a context-free production
     *
     * @type Sdf2Production -> Sdf2Production
     */
    sx-process-cf-production =
    	?prod(symbols, symbol, attributes);
    	<sx-process-cf-attributes> attributes => analyzed-attributes;
    	<sx-prefix-all-sorts-base-lang> symbol => prefixed-symbol;
    	<sx-prefix-all-sorts-base-lang> symbols => prefixed-symbols;
    	<sx-prefix-all-sorts(|"Gnd"); sx-prefix-all-sorts-base-lang> symbols => prefixed-ground-symbols;
    	<sx-prefix-all-sorts(|"Gnd"); sx-prefix-all-sorts-base-lang> symbol => prefixed-ground-symbol;
    	<sx-process-desugaring-prod> prefixed-symbol => univ-prod;
    	<sx-process-where-equation-prod> prefixed-symbol => where-eq-prod;
    	![univ-prod,
    	  where-eq-prod,
    	  prod(prefixed-symbols, prefixed-symbol, analyzed-attributes),
    	  prod(prefixed-ground-symbols, prefixed-ground-symbol, analyzed-attributes)]

	/**
	 * Generates a production for a universal desugaring.
	 *
	 * @type Sdf2Symbol -> Sdf2Production
	 */
	sx-process-desugaring-prod =
		// This simple approach generates the production many times for
		// a single sort blowing up the SDF2 code.
		?symbol;
		!prod([lit("{"), symbol, sort("SXDESUGARINGSEP"), symbol, sort("SXWhereClauses"), lit("}")],
			sort("SXDesugaring"),
			attrs([<sx-sdf2-cons-attribute> "SXUniversalDesugaring"]))

	/**
	 * Generates a production for a where clause.
	 *
	 * @type Sdf2Symbol -> Sdf2Production
	 */
	sx-process-where-equation-prod =
		?symbol;
		!prod([symbol, lit("="), symbol],
			sort("SXWhereEquation"),
			attrs([<sx-sdf2-cons-attribute> "SXWhereEquation"]))

    /**
     * Checks attributes of context-free production
     *
     * Generates a constructor name if necessary, includes it in
     * the analyzed attributes and also returns it.
     *
     * @param sort-name String name of the rhs sort to include in
     *   constructor name
     *
     * @type Sdf2Attributes -> Sdf2Attributes
     */
    sx-process-cf-attributes =
    	((?no-attrs(); ![]) +
    	 (?attrs(attrib-list); !attrib-list));
    	sx-process-cf-attribute-list-cons => attrib-list-with-cons;
    	!attrs(attrib-list-with-cons)

    /**
     * Adds or prefixes a cons attribute
     *
     * It returns the new attribute list and the name of the constructor.
     * If a constructor name is given in an attribut the exact string from
     * the input is returned. Therefore, the constructor name is double-qouted.
     *
     * A constructor is only returned if the attribute list does not contain a
     * bracket attribute.
     *
     * @param sort-name String name of the rhs sort to include in
     *   constructor name
     * @type List(Sdf2Attribute) -> List(Sdf2Attribute)
     */
    sx-process-cf-attribute-list-cons =
    	where(<elem> (bracket(), <id>)) <
    	// bracket attribute, return attributes untouched
    	id +
    	// No bracket attribute
    	(partition(sx-sdf2-is-attribute(|"cons")) => (cons-attribs, other-attribs);
    	 ((// No cons attribute, generate one
    	   !cons-attribs; ?[];
     	   sx-env-fresh-cons-name => cons-name;
     	   sx-env-add-cons-name;
    	   ![<sx-sdf2-cons-attribute> cons-name | other-attribs]) <+
    	  (// One cons attribute, prefix it
    	   !cons-attribs; ?[cons-attrib];
    	   <sx-sdf2-cons-attribute-name-quoted> cons-attrib => cons-name-quoted;
    	   <un-double-quote> cons-name-quoted => cons-name;
    	   <sx-prefix-name> cons-name => prefixed-cons-name;
		   if sx-env-cons-name-defined then
		   	   <sx-analysis-fail(|"Duplicate constructor name")> cons-name-quoted
		   else
		   	   <sx-env-add-cons-name> prefixed-cons-name;
    	       ![<sx-sdf2-cons-attribute> prefixed-cons-name | other-attribs]
    	   end) <+
    	  (// More than one cons attribute, error
    	   !cons-attribs; ?[_,_|_];
    	   <map(sx-analysis-fail(|"Several cons attributes are not allowed"))> cons-attribs)))

    /**
     * Analyzes a lexical syntax section
â€“     *
     * @type Grammar -> Gramar
     */
    sx-process-lex-syntax =
    	?lexical-syntax(prods);
    	<map(sx-process-lex-production); unzip; (concat, concat)> prods => (lex-prods, cf-prods);
        ![lexical-syntax(lex-prods), context-free-syntax(cf-prods)]

    /**
     * Analyzes a lexical production
     *
     * @type Sdf2Production -> (List(Sdf2Production), List(Sdf2Production))
     */
    sx-process-lex-production =
    	?prod(symbols, symbol, attributes);
    	<sx-prefix-all-sorts-base-lang> [symbol|symbols] => [prefixed-symbol|prefixed-symbols];
    	<sx-prefix-all-sorts(|"Gnd"); sx-prefix-all-sorts-base-lang> symbols => ground-symbols;
    	<sx-prefix-all-sorts(|"Gnd"); sx-prefix-all-sorts-base-lang> symbol => ground-symbol;
    	<sx-process-neq-judg> (attributes, prefixed-symbol) => cf-prods;
    	!([prod(prefixed-symbols, prefixed-symbol, attributes),
    	   prod(ground-symbols, ground-symbol, attributes)],
    	  cf-prods)

    /**
     * Generates inequality judgement for symbol if sx-requires-inequality is given
     *
     * @type (Sdf2Attributes, Sdf2Symbol) -> List(Sdf2Production)
     */
    sx-process-neq-judg =
    	?(attributes, symbol);
    	if <sx-sdf2-is-aterm-attribute-defined(|"sx-requires-inequality")> attributes then
    		![prod([symbol, lit("=/="), symbol], sort("SXJudgement"),
    	           attrs([<sx-sdf2-cons-attribute> "SXNeq"]))]
    	else
    		![]
    	end
    	    
    /**
     * Adds the grammars to the environment
     *
     * @type SXBldGrammarElems -> SXEnv
     */   
   sx-process-add-grammar-elems =
   	   map(\grm -> grammar-elem(grm)\);
   	   sx-env-add-grammar-elems
