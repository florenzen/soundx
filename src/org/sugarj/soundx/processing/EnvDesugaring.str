/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Code generation from the environment.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/EnvDesugaring

imports org/sugarj/languages/Stratego

imports org/sugarj/transformations/GenerateSignatures

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
		org/sugarj/soundx/MetaExplode
		org/sugarj/soundx/ExtensionDefinition
		org/sugarj/soundx/PrettyPrint

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Generates Stratego and SDF code from the environment.
	 *
	 * @type _ -> SXExtensionDecl
	 */
	sx-env-extract-extension-decls =
		sx-env-extract-extension-decls-stratego => decls;
		sx-env-get-grammar-elems => grammar-elems;
		!SXExtensionDecl(<conc> (grammar-elems, decls))
	  
	/**
	 * Generates Stratego code from the environment.
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sx-env-extract-extension-decls-stratego =
		// generate Stratego definitions from the desugarings
		sx-env-make-desugarings => trans-desugarings;
		// generate a Stratego definition from the inference rules
		<sx-env-get; hashtable-values> "inference-rules" => inf-rules;
	    sx-env-module-decls-to-stratego(|inf-rules, "extension-inference-rules") => trans-infrules;
	    // extract all the SDF2 sections
	    sx-env-get-grammar-elems => grammar-elems;
	    // generate a PP table for the extension
	    <map(?grammar-elem(<id>))> grammar-elems => sdf2-defs;
	    <sx-grammars-to-pp-table> sdf2-defs => pp-table;
	    <sx-env-module-decls-to-stratego(|pp-table, "extension-pp-table")> pp-table => trans-pp-table;
	    // since the SoundX desugaring is hooked into the strategy internal-main
	    // instead of desugaring gen-signature has to be called manually here
	    (<gen-signature> grammar-elems <+ ![]) => trans-signatures;
	    // generate a Stratego definition for the interface
	    sx-env-make-interface => trans-interface;
		// generate a Stratego definition for the constructor names
		sx-env-get-cons-names => cons-names;
		sx-env-module-decls-to-stratego(|cons-names, "extension-cons-names") => trans-cons-names;
	    // concatenate everything into one list
	    <conc> (trans-signatures, trans-infrules, trans-pp-table,
	    	trans-desugarings, trans-interface, trans-cons-names) => trans;
	    !trans

		
	/**
	 * Generates a Stratego definition sx-<key> = ?<namespace>; !<term>.
	 *
	 * @param term The term to explode
	 * @param key The name of the definition
	 *
	 * @type _ -> List(ExtensionElem)
	 */
    sx-env-module-decls-to-stratego(|term, key) =
    	<trm-explode> term => stratego-alist;
    	<conc-strings> ("sx-", key) => strategy-name;
    	sx-env-get-namespace => namespace;
    	!Seq(Match(Str(namespace)), Build(stratego-alist)) => rhs;
    	![transformation-elem(
    		Strategies([SDefNoArgs(strategy-name, rhs)])
    	 )]

	/**
	 * Generate the code for the desugarings. It produces a definition for 
	 * uarded and universal desugarings each which looks like this:
	 *
	 * sx-guarded-desugarings =
	 *   where(sx-desugaring-active-module; ?<module-name>);
	 *   des1 <+ ... <+ desn
	 *
	 * Each desi has the form ?lhs; !rhs
	 *
	 * @type - -> List(ExtensionElem)
	 */
	sx-env-make-desugarings =
		sx-env-get-desugarings => desugarings;
		<partition(sx-is-universal-desugaring)> desugarings => (univ-desugs, guard-desugs);
		<sx-env-make-univ-desugarings> univ-desugs => trans-univ;
		<sx-env-make-guard-desugarings> guard-desugs => trans-guard;
		<conc> (trans-univ, trans-guard)

	/**
	 * Generate Stratego code for list of universal desugarings.
	 *
	 * @type List(SXDesugaring) -> List(ExtensionElem)
	 */
	sx-env-make-univ-desugarings =
		?desugs;
		<map(sx-env-make-univ-desugaring)> desugs => strats;
		<sx-env-make-desugaring-alternatives> strats => alternatives;
		sx-env-make-desugaring-activator => activator;
		!Seq(activator, alternatives) => activator-alternatives;
    	![transformation-elem(
    		Strategies([SDefNoArgs("sx-universal-desugarings", activator-alternatives)])
    	 )]

	/**
	 * Translates universal desugaring into Stratego match and build.
	 *
	 * @type SXDesugaring -> StrategoStrategy
	 */ 
	sx-env-make-univ-desugaring =
		?SXUnivDesug(lhs, rhs);
		<trm-explode> lhs => stratego-lhs;
		<trm-explode> rhs => stratego-rhs;
		!Seq(Match(stratego-lhs), Build(stratego-rhs))

	/**
	 * Generates Stratego code for list of guarded desugarings.
	 *
	 * @type List(SXDesugaring) -> List(ExtensionElem)
	 */
	sx-env-make-guard-desugarings =
		?desugs;
		<map(sx-env-make-guard-desugaring)> desugs => strats;
		<sx-env-make-desugaring-alternatives> strats => alternatives;
		sx-env-make-desugaring-activator => activator;
		!Seq(activator, alternatives) => activator-alternatives;
    	![transformation-elem(
    		Strategies([SDefNoArgs("sx-guarded-desugarings", activator-alternatives)])
    	 )]

	/**
	 * Translates guarded desugaring into Stratego match and build.
	 *
	 * A guarded desugaring
	 *   premise1 ... premisen
	 *   --------------------------
	 *   expr1 ... [expr] ... exprm
	 *   ~~~~~~~~~~~~~~~~~~~~~~~~~~>
	 *   expr'
	 * is translated into
	 *   ?SXInfRule([premise1,...,premisen], name, expr1 ... expr ... exprn);
	 *   !SXInfRule([premise1,...,premisen], name, expr1 ... expr' ... exprn)
	 * such that it is directly applicable to an inference rule.
	 *
	 * @type SXDesugaring -> StrategoStrategy
	 */
	sx-env-make-guard-desugaring =
		?SXGuardDesug(premises, before-exprs, subject-expr, after-exprs, judg-name, rhs);
		<trm-explode> premises => stratego-premises;
		// lhs conclusion
		<conc> (before-exprs, [subject-expr], after-exprs) => lhs-args-concl;
		!judg-name#(lhs-args-concl) => lhs-concl;
		<trm-explode> lhs-concl => stratego-lhs-concl;
		// rhs conclusion
		<conc> (before-exprs, [rhs], after-exprs) => rhs-args-concl;
		!judg-name#(rhs-args-concl) => rhs-concl;
		<trm-explode> rhs-concl => stratego-rhs-concl;
		// lhs rule pattern
		!Op("SXInfRule", [stratego-premises, Var("sx-rule-name"), stratego-lhs-concl]) => stratego-lhs;
		// rhs rule pattern
		!Op("SXInfRule", [stratego-premises, Var("sx-rule-name"), stratego-rhs-concl]) => stratego-rhs;
		// rule
		!Seq(Match(stratego-lhs), Build(stratego-rhs))		

	/**
	 * Generates the activation check for desugarings with the name
	 * of the current module.
	 *
	 * @type _ -> StrategoStrategy
	 */	
	sx-env-make-desugaring-activator =
		sx-env-get-namespace => namespace;
		!Where(
			Seq(
				CallNoArgs(SVar("sx-desugaring-active-module")),
				Match(Str(namespace))
			))

	/**
	 * Folds a list of strategies using <+.
	 *
	 * @type List(StrategoStrategy) -> StrategoStrategy
	 */ 
	sx-env-make-desugaring-alternatives =
		?strats;
		<foldl(\(strat, output) -> LChoice(strat, output)\)> (strats, Fail())

	/**
	 * Generates a definition for the module interface. 
	 * It contains the interface expression and the names
	 * of the re-exported modules
	 *
	 * @type _ -> List(ExtensionElem)
	 */
	sx-env-make-interface =
		if sx-env-is-interface-defined then
			sx-env-get-interface => interface;
			sx-env-get-re-exports => re-exports;
			sx-env-module-decls-to-stratego(|(interface, re-exports), "interface")
		else
			![]
		end
