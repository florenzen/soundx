module org/sugarj/soundx/processing/EnvDesugaring

imports org/sugarj/languages/Stratego

imports org/sugarj/transformations/GenerateSignatures

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
		org/sugarj/soundx/MetaExplode
		org/sugarj/soundx/ExtensionDefinition
		

strategies
	sx-env-extract-extension-decls =
		sx-env-make-desugarings => trans-desugarings;
		<sx-env-get; hashtable-values> "inference-rules" => inf-rules;
	    sx-env-module-decls-to-stratego(|inf-rules, "extension-inference-rules") => trans-infrules;
	    sx-env-get-grammar-elems => grammar-elems;
	    (<gen-signature> grammar-elems <+ ![]) => trans-signatures;
	    sx-env-make-interface => trans-interface;
	    <conc> (trans-signatures, trans-infrules,
	    	trans-desugarings, trans-interface) => transformation-elems;
	    !SXExtensionDecl(<conc> (grammar-elems, transformation-elems))
	  
	/**
	 * Generates a Stratego definition sx-<key> = ?<namespace>; !<term>
	 *
	 * @param term The term to explode
	 * @param key The name of the definition
	 *
	 * @type _ -> List(ExtensionElem)
	 */
    sx-env-module-decls-to-stratego(|term, key) =
    	<trm-explode> term => stratego-alist;
    	<conc-strings> ("sx-", key) => strategy-name;
    	sx-env-get-namespace => namespace;
    	!Seq(Match(Str(namespace)), Build(stratego-alist)) => rhs;
    	![transformation-elem(
    		Strategies([SDefNoArgs(strategy-name, rhs)])
    	 )]

	sx-env-make-desugarings =
		sx-env-get-desugarings => desugarings;
		//debug(!"GOT DESUGARINGS ");
		<partition(sx-is-universal-desugaring)> desugarings => (univ-desugs, guard-desugs);
		<sx-env-make-univ-desugarings> univ-desugs => trans-univ;
		<sx-env-make-guard-desugarings> guard-desugs => trans-guard;
		<conc> (trans-univ, trans-guard)

	sx-env-make-univ-desugarings =
		?desugs;
		<map(sx-env-make-univ-desugaring)> desugs => strats;
		//debug(!"MADE STRATS ");
		<sx-env-make-desugaring-alternatives> strats => alternatives;
		//debug(!"MADE ALTS ");
		sx-env-make-desugaring-activator => activator;
		!Seq(activator, alternatives) => activator-alternatives;
		//debug(!"ACTIVATOR STUFF ");
    	![transformation-elem(
    		Strategies([SDefNoArgs("sx-universal-desugarings", activator-alternatives)])
    	 )]

	sx-env-make-univ-desugaring =
		?SXUnivDesug(lhs, rhs);
		<trm-explode> lhs => stratego-lhs;
		<trm-explode> rhs => stratego-rhs;
		!Seq(Match(stratego-lhs), Build(stratego-rhs))

	sx-env-make-guard-desugarings =
		?desugs;
		<map(sx-env-make-guard-desugaring)> desugs => strats;
		<sx-env-make-desugaring-alternatives> strats => alternatives;
		//debug(!"MADE ALTS ");
		sx-env-make-desugaring-activator => activator;
		!Seq(activator, alternatives) => activator-alternatives;
		//debug(!"ACTIVATOR STUFF ");
    	![transformation-elem(
    		Strategies([SDefNoArgs("sx-guarded-desugarings", activator-alternatives)])
    	 )]

	sx-env-make-guard-desugaring =
		?SXGuardDesug(premises, before-exprs, subject-expr, after-exprs, judg-name, rhs);
		<trm-explode> premises => stratego-premises;
		// lhs conclusion
		<conc> (before-exprs, [subject-expr], after-exprs) => lhs-args-concl;
		!judg-name#(lhs-args-concl) => lhs-concl;
		<trm-explode> lhs-concl => stratego-lhs-concl;
		// rhs conclusion
		<conc> (before-exprs, [rhs], after-exprs) => rhs-args-concl;
		!judg-name#(rhs-args-concl) => rhs-concl;
		<trm-explode> rhs-concl => stratego-rhs-concl;
		// lhs rule pattern
		!Op("SXInfRule", [stratego-premises, Var("sx-rule-name"), stratego-lhs-concl]) => stratego-lhs;
		// rhs rule pattern
		!Op("SXInfRule", [stratego-premises, Var("sx-rule-name"), stratego-rhs-concl]) => stratego-rhs;
		// Rule
		!Seq(Match(stratego-lhs), Build(stratego-rhs))		
		
	sx-env-make-desugaring-activator =
		sx-env-get-namespace => namespace;
		!Where(
			Seq(
				CallNoArgs(SVar("sx-desugaring-active-module")),
				Match(Str(namespace))
			))

	sx-env-make-desugaring-alternatives =
		?strats;
		<foldl(\(strat, output) -> LChoice(strat, output)\)> (strats, Fail())

	sx-env-make-interface =
		if sx-env-is-interface-defined then
			sx-env-get-interface => interface;
			sx-env-module-decls-to-stratego(|interface, "interface")
		else
			![]
		end
