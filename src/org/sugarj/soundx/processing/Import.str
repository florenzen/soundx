/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Processing of an import declaration.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/Import

imports org/sugarj/soundx/Declarations
		org/sugarj/soundx/Environment
		org/sugarj/soundx/AnalysisFunctions

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Adds an import declaration to the list of toplevel declarations and
	 * stores the name of the imported module in the environment.
	 *
	 * @type ToplevelDeclaration -> SXEnv
	 */
	sx-process-import-decl =
		?decl;
		sx-is-import-decl;
		<sx-env-add-toplevel-declaration> decl;
		<sx-process-register-import> decl

	/**
	 * Stores the imported module name in the environment. It aborts
	 * if the import declaration is in an extension definition.
	 *
	 * @type ToplevelDeclaration -> SXEnv
	 */
	sx-process-register-import =
		?decl@con#(args);
		where(
				sx-import-decs => decs;
				if sx-env-is-extension-processing then
					<sx-analysis-fail(|"import declaration cannot be inside an extension")> decl
				else
					// look up the import declaration in the base language definition
					let fetch-s =
						{ cons-name, index:
							?(cons-name, index);
							<eq> (cons-name, con);
							!index
						}
					in
						<fetch-elem(fetch-s)> decs => index;
						// extract the name of the imported module
						<index> (<add> (index, 1), args) => import;
						<sx-env-add-import> import
					end
				end
			)
