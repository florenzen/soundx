/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Processing of a namespace declaration.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/Namespace

imports org/sugarj/soundx/Declarations
		org/sugarj/soundx/Environment
		org/sugarj/soundx/AnalysisFunctions

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Adds a namespace declaration to the list of toplevel declarations and
	 * stores the namespace identifier in the environment. It aborts if
	 * there was already a previous namespace declaration.
	 *
	 * @type ToplevelDeclaration -> SXEnv
	 */
	sx-process-namespace-decl =
		?decl;
		sx-is-namespace-decl;
		if sx-env-is-namespace-defined then
			<sx-analysis-fail(|"only one namespace declaration is allowed")> decl
		else
			<sx-env-add-toplevel-declaration> decl;
			<sx-process-register-namespace> decl
		end

	/**
	 * Stores the namespace identifier in the environment. It aborts if
	 * the import declaration is inside an extension definition.
	 *
	 * @type ToplevelDeclaration -> SXEnv
	 */
	sx-process-register-namespace =
		?decl@con#(args);
		where(
			sx-namespace-dec => (cons-name, index);
			if sx-env-is-extension-processing then
				<sx-analysis-fail(|"namespace declaration cannot be inside an extension")> decl
			else
				if <eq> (con, cons-name) then
					<index> (<add> (index, 1), args) => namespace;
					<sx-env-set-namespace> namespace
				else
					id
				end
			end)
