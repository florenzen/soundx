/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Processing of a desugarings section.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/Desugarings

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
		org/sugarj/soundx/ExtensionDefinition
		org/sugarj/soundx/AnalysisFunctions
		org/sugarj/soundx/Substitution
		org/sugarj/soundx/Unification

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Processes a desugarings section
	 *
	 * Aborts with an error, if extension processing is off
	 *
	 * @type ToplevelDeclaration -> ToplevelDeclaration
	 */
	sx-process-desugarings =
		?SXDesugarings(_);
		where(
			if sx-env-is-extension-processing then
				SXDesugarings(map(sx-process-desugaring))
			else
				sx-analysis-fail(|"desugarings must be inside an extension")
			end)

	/**
	 * Convert a desugaring to abstract syntax and store it in the environment.
	 *
	 * @type SXDesugaring -> SXEnv
	 */
	sx-process-desugaring =
		sx-process-guarded-desugaring +
		sx-process-universal-desugaring

	/**
	 * Store abstract form of universal desugaring in environment.
	 *
	 * @type SXDesugaring -> SXEnv
	 */
	sx-process-universal-desugaring =
		?SXUniversalDesugaring(lhs, _, rhs, where-eqs);
		<sx-process-where-clauses> where-eqs => sub;
		<sx-meta-var-to-sx-metavar> rhs => rhs1;
		<sx-sub-apply> (sub, rhs1) => rhs2;
		<sx-metavar-to-meta-var> rhs2 => rhs3;
		!SXUnivDesug(lhs, rhs3) => desugaring;
		<sx-env-add-desugaring> desugaring

	/**
	 * Store abstract form of guarded desugaring in environment.
	 * The conclusion of the left-hand side is split into
	 * left, target, and right expressions.
	 *
	 * @type SXDesugaring -> SXEnv
	 */
	sx-process-guarded-desugaring =
		?con#(args);
		<sx-process-split-guarded-des-cons> con => (index, judg-name);
		<length> args => len;
		<index> (1, args) => premises;
		<collect-all(sx-is-judgement, conc)> premises => premises-list;
		<index> (<subt> (len, 1), args) => rhs;
		<index> (len, args) => where-eqs;
		<sx-process-where-clauses> where-eqs => sub; 
		<drop(|2); take(|<subt> (len, 5))> args => concl-args;
		<split-at(|<subt> (index, 1))> concl-args => (exprs-before, [expr-subject|exprs-after]);
		<sx-meta-var-to-sx-metavar> rhs => rhs1;
		<sx-sub-apply> (sub, rhs1) => rhs2;
		<sx-metavar-to-meta-var> rhs2 => rhs3;
		!SXGuardDesug(premises-list, exprs-before, expr-subject, exprs-after, judg-name, rhs3) => desugaring;
		<sx-env-add-desugaring> desugaring

	/**
	 * Splits the constructor name of a guarded desugaring.
	 * It returns the judgement name of the left-hand side's
	 * conclusion and the index of the subject expression.
	 * It fails if the input is not the constructor name of a
	 * guarded desugaring.
	 *
	 * @type String -> (Int, String)
	 */
	sx-process-split-guarded-des-cons =
		?con;
		<string-starts-with(|"SXGuardedDesugaring")> con;
		<explode-string> con => chars;
		<drop(|19)> chars => chars-no-prefix;
		<take-while(is-num); implode-string; string-to-int> chars-no-prefix => index;
		<drop-while(is-num); implode-string> chars-no-prefix => judg-name;
		!(index, judg-name)

	/**
	 * Analyzes where clauses and returns a substitution for the rhs
	 * of a desugaring or fails if the where clauses are invalid.
	 *
	 * @type SXWhereClauses -> SXSub
	 */
	sx-process-where-clauses =
		?SXWhereClauses(where-eqs);
		<sx-process-where-equations> where-eqs

	/**
	 * Analyzes a list of where equations and returns a substitution for the rhs
	 * of a desugaring or fails if the where clauses are invalid.
	 *
	 * @type List(SXWhereEquation) -> SXSub
	 */
	sx-process-where-equations =
		?[];
		<sx-sub-empty> ()
	sx-process-where-equations =
		?[eq|eqs];
		<sx-process-where-equations> eqs => sub;
		<sx-sub-apply> (sub, eq) => eq1;
		<sx-process-where-equation> eq1 => sub1;
		<sx-sub-compose> (sub1, sub)

	/**
	 * Analyzes a where equation. It returns a substitution
	 * resulting from matching lhs and rhs or fails if
	 * matching is not possible.
	 *
	 * @type SXWhereEquation -> SXSub
	 */
	sx-process-where-equation =
		?eq@SXWhereClause(SXWhereEquation(lhs, rhs));
		<sx-meta-var-to-sx-metavar> (lhs, rhs) => (lhs1, rhs1);
		<sx-vars> lhs1 => lhs1-vars;
		<sx-unify(|lhs1-vars)> (lhs1, rhs1) => result;
		if !result; ?SXUnificationFailure(_) then
			<sx-analysis-fail(|"lhs and rhs do not match structurally")> eq
		else
			!result
		end
