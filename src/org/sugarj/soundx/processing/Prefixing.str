/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Prefixing of SDF2 sort names and name mangling.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/Prefixing

imports org/sugarj/languages/Sdf2

imports org/sugarj/soundx/Declarations
		org/sugarj/soundx/Environment
		org/sugarj/soundx/AnalysisFunctions

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Prefixes all sort names with the base language name.
	 *
	 * @type a -> a
	 */
	sx-prefix-all-sorts-base-lang = topdown(try(sx-prefix-sort-base-lang))

    /**
     * Prefixes all sort names with the given prefix.
     *
     * @param prefix String
     *
     * @type a -> a
     */
	sx-prefix-all-sorts(|prefix) = topdown(try(sx-prefix-sort(|prefix)))
	
	/**
	 * Prefixes the sort name with the base language name.
	 *
	 * @type Sdf2Symbol -> Sdf2Symbol
	 */
	sx-prefix-sort-base-lang =
		where(sx-base-language-name => prefix);
		sx-prefix-sort(|prefix)

    /**
     * Prefixes the sort name with the given prefix.
     *
     * @param prefix String
     *
     * @type Sdf2Symbol -> Sdf2Symbol
     */
	sx-prefix-sort(|prefix) =
		let conc-prefix = ?orig-name; <conc-strings> (prefix, orig-name)
		in
			sort(conc-prefix) +
			parameterized-sort(conc-prefix, id)
		end

	/**
	 * Prefixes the string with the base language name and the mangled namespace.
	 *
	 * @type String -> String
	 */
	sx-prefix-name =
		?name;
		sx-base-language-name => prefix;
		(sx-env-get-namespace => namespace <+
		 <sx-analysis-fail(|"no namespace defined")> name);
		<sx-prefix-mangle-namespace> namespace => mangled-namespace;
		<conc-strings> (prefix, mangled-namespace, name)

	/**
	 * Mangles the namespace such that it contains only characters that
	 * are valid as Stratego constructor names.
	 *
	 * @type String -> String
	 */
	sx-prefix-mangle-namespace =
		?namespace;
		![(".", "_dot_"),
		  (":", "_colon_"),
		  ("!", "_bang_"),
		  ("@", "_at_"),
		  (",", "_comma_"),
		  (":", "_semi_"),
		  ("=", "_equal_"),
		  ("#", "_hash_"),
		  ("$", "_dollar_"),
		  ("%", "_percent_"),
		  ("^", "_caret_"),
		  ("&", "_amp_"),
		  ("*", "_asterisk_"),
		  ("(", "_open_"),
		  (")", "_close_"),
		  ("+", "_plus_"),
		  ("|", "_pipe_"),
		  ("\\", "_backslash_"),
		  ("/", "_slash_"),
		  ("?", "_question_"),
		  ("~", "_tilde_"),
		  ("<", "_lt_"),
		  (">", "_gt_"),
		  ("[", "_bracketopen_"),
		  ("]", "_bracketclose_"),
		  ("{", "_braceopen_"),
		  ("}", "_braceclose_")] => mangle-map;
		let fold-s = {
			char, repl, current-namespace:
				?((char, repl), current-namespace);
				<string-replace(|char, repl)> current-namespace
			}
		in
			<sx-debug(|"mangle in ")> namespace; 
			<foldl(fold-s)> (mangle-map, namespace) => mangled-namespace;
			<sx-debug(|"mangle out ")> mangled-namespace;
			!mangled-namespace
		end
	
	/**
	 * Removes the base language and namespace prefix from the string.
	 *
	 * @type String -> String
	 */
	sx-unprefix-name =
		?name;
		sx-base-language-name => prefix;
		(sx-env-get-namespace => namespace <+
		 <sx-analysis-fail(|"no namespace defined")> name);
		<sx-prefix-mangle-namespace> namespace => mangled-namespace;
		<string-length> (<conc-strings> (prefix, mangled-namespace)) => len;
		<explode-string> name => name-chars;
		<drop(|len)> name-chars => dropped-chars;
		<implode-string> dropped-chars
