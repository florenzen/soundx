/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Processing of inductive definitions section.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/processing/InductiveDefinitions

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/InductiveDefinitions
		org/sugarj/soundx/Environment
		org/sugarj/soundx/AnalysisFunctions

imports	org/sugarj/soundx/processing/Prefixing


strategies
	/**
	 * Adds all inference rules to the environment.
	 *
	 * @type SXInductiveDefinitions -> SXInductiveDefinitions
	 */
	sx-process-inductive-defs =
		?SXInductiveDefinitions(_);
		where(
			if sx-env-is-extension-processing then
				SXInductiveDefinitions(map(sx-process-inference-rule))
			else
				sx-analysis-fail(|"inductive definitions must be inside an extension")
			end)

    /**
     * Adds one inference rule to the environment. Converts meta-var to SXMetaVar.
     * 
     * @type SXNamedInferenceRule -> SXEnv
     */
	sx-process-inference-rule =
		?named-rule@SXNamedInferenceRule(name, rule);
		<sx-prefix-name> name => prefixed-name;
		<sx-env-add-named-inf-rule> (prefixed-name, named-rule);
		<sx-process-named-infrule-to-abs(|prefixed-name);
		 sx-meta-var-to-sx-metavar> rule => analyzed-rule;
		<sx-process-add-inference-rule> (name, analyzed-rule)

    /**
     * Convert named inference rule to abstract syntax.
     *
     * @type SXInferenceRule -> SXInfRule
     */
	sx-process-named-infrule-to-abs(|name) =
		?SXInferenceRule(premises, _, concl);
		<collect-all(sx-is-judgement, conc)> premises => premises-list;
		!SXInfRule(premises-list, name, concl)

	/**
	 * Adds an inference rule to the environment. Aborts with an error
	 * if a rule of that name is already defined. In the environment,
	 * the rules are stored by their original name without the prefix.
	 *
	 * @type (String, SXInfRule) -> SXEnv
	 */
	sx-process-add-inference-rule =
		?(name, rule);
		<sx-env-get-inference-rule> name;
		if ?None() then
			<sx-env-add-inference-rule> (name, rule)
		else
			<sx-analysis-fail(|"Duplicate inference rule name")> name
		end
