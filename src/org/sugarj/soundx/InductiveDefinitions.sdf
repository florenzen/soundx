%%
%% Copyright (c) 2015, TU Berlin
%% All rights reserved.
%%
%% Redistribution and use in source and binary forms, with or without
%% modification, are permitted provided that the following conditions are
%% met:
%%
%% - Redistributions of source code must retain the above copyright
%%   notice, this list of conditions and the following disclaimer.
%% - Redistributions in binary form must reproduce the above
%%   copyright notice, this list of conditions and the following
%%   disclaimer in the documentation and/or other materials provided
%%   with the distribution.
%% - Neither the name of the TU Berlin nor the names of its
%%   contributors may be used to endorse or promote products derived
%%   from this software without specific prior written permission.
%%
%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
%% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
%% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
%% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
%% HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
%% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
%% LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
%% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
%% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
%% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%%

%%
%% Syntax of inductive definitions.
%%
%% Author: Florian Lorenzen <florian.lorenzen@tu-berlin.de>
%%
module org/sugarj/soundx/InductiveDefinitions

exports
  sorts
  	SXInferenceRule SXInductiveDefinitions

  lexical syntax
  	"---" "-"* -> SXRULESEP
  	[a-zA-Z][a-zA-Z0-9\-\_]* -> SXINFRULENAME
  	
  	"inductive"   -> SXIndDefKeyword
  	"definitions" -> SXIndDefKeyword

  lexical restrictions
  	SXRULESEP -/- [\-]

  context-free syntax
  	"inductive" "definitions" SXNamedInferenceRule+ ->
  	  SXInductiveDefinitions {cons("SXInductiveDefinitions")}
  	
  	SXINFRULENAME ":" SXInferenceRule ->
  	  SXNamedInferenceRule {cons("SXNamedInferenceRule")}

    SXInfRulePremises SXRULESEP SXJudgement ->
      SXInferenceRule {cons("SXInferenceRule"),
                       layout("1.first.col == 2.first.col && 2.first.col == 3.first.col")}

    SXInfRulePremiseParen+ -> SXInfRulePremisesEnum {cons("SXInfRulePremiseEnum")}
    SXInfRulePremise       -> SXInfRulePremisesEnum {cons("SXInfRulePremise")}
    
    SXJudgement         -> SXInfRulePremise {layout("1.first.col < 1.left.col")}
    "(" SXJudgement ")" -> SXInfRulePremiseParen {bracket}
    
                                            -> SXInfRulePremises {cons("SXInfRulePremisesNil")}
    SXInfRulePremisesEnum SXInfRulePremises ->
      SXInfRulePremises {cons("SXInfRulePremisesCons"),
                         layout("1.first.col == 2.first.col")}

    "concat" "(" SXAtom "," SXAtom ")" "=" SXAtom -> SXJudgement {cons("SXConcat")}
    "suffix" "(" SXAtom ")" "=" SXAtom            -> SXJudgement {cons("SXSuffix")}
