/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Generation of fresh atoms
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/FreshAtoms

imports org/sugarj/soundx/Declarations
		org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Substitution
		org/sugarj/soundx/DepthFirstBC
		org/sugarj/soundx/AnalysisPhase

imports org/sugarj/soundx/Debug

strategies
	/**
	 * Replaces all references to SXFreshFun<Sort>_NN by fresh atoms.
	 *
	 * @type a -> a
	 */
	sx-fresh-atom-replace-all =
		bottomup(try(sx-fresh-atom-generator))

	/**
	 * Replaces reference to SXFreshFun<Sort>_NN.
	 *
	 * @type SXExpr -> SXExpr
	 */
	sx-fresh-atom-generator =
		?term;
		<sx-is-fresh-fun> term => (sort-name, args);
		sx-freshness-conditions => freshness-conds;
		<lookup> (sort-name, freshness-conds) => freshness-cond;
		<sx-fresh-atom> (freshness-cond, args)

	/**
	 * Finds a fresh name starting with counter at 0.
	 *
	 * @type ((String, String, SXJudgement), List(SXExpr)) -> SXExpr
	 */
	sx-fresh-atom =
		sx-fresh-atom(|0)

	/**
	 * Finds a fresh name starting with counter at count.
	 *
	 * @param count Int
	 *
	 * @type ((String, String, SXJudgement), List(SXExpr)) -> SXExpr
	 */
	sx-fresh-atom(|count) =
		?(freshness-cond, args);
		<int-to-string> count => num;
		<conc-strings> (<sx-fresh-atom-prefix> (), num) => cand;
		<sx-debug(|"candidate ")> cand;
		if <sx-fresh-atom-ok(|freshness-cond, args)> cand then
			<sx-debug(|"cand was ok ")> cand;
			!cand
		else
			<sx-fresh-atom(|<add> (count, 1))> (freshness-cond, args)
		end

	/**
	 * Checks if atom fulfills all freshness conditions. This strategy
	 * fails if not all conditions are satisfied.
	 *
	 * @param freshness-cond (String, String, SXJudgement)
	 * @param args List(SXExpr)
	 *
	 * @type String -> _
	 */
	sx-fresh-atom-ok(|freshness-cond, args) =
		?cand;
		<map(sx-fresh-atom-ok1(|freshness-cond, cand))> args

	/**
	 * Instantiated freshness condition for given argument and tries
	 * to derive the resulting judgement. The strategy fails, if the
	 * judgement cannot be derived.
	 *
	 * @param freshness-cond (String, String, SXJudgement)
	 * @param cand String
	 *
	 * @type SXExpr -> _
	 */ 
	sx-fresh-atom-ok1(|freshness-cond, cand) =
		?arg;
		!freshness-cond => (atom-name, sort-name, judg);
		<sx-sub-singleton> (SXMetaVar(atom-name), cand) => sub1;
		<sx-sub-singleton> (SXMetaVar(sort-name), arg) => sub2;
		<sx-sub-apply> (sub1, judg) => judg1;
		<sx-sub-apply> (sub2, judg1) => judg2;
		<sx-debug(|"checking frshness condition ")> judg2;
		<sx-dfsbc-build-derivation> ([], <sx-fresh-inference-rules> (), judg2)

	/**
	 * Returns all active inference rules.
	 *
	 * @type _ -> List(SXInfRule)
	 */
	sx-fresh-inference-rules =
		sx-inference-rules => inf-rules-base;
		sx-inference-rules-from-extensions => inf-rules-ext;
		<conc> (inf-rules-base, inf-rules-ext)

	/**
	 * Returns the prefix for the generated atoms.
	 *
	 * TODO should be customizable in the base language definition
	 *
	 * @type _ -> String
	 */
	sx-fresh-atom-prefix = !"gen"
