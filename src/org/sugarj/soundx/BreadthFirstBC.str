/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Breadth-first search backward chaining to find errors.
 *
 * Breadth-first search is only invoked if depth-first search encountered an
 * error. It does not take assumptions (it is not used in the classification
 * procedure).
 *
 * Primitive judgements like inequality or concatenation of lexical
 * elements require their input arguments to be bound. That is, it works
 * similar to Prolog arithmetics.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/BreadthFirstBC

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Unification
		org/sugarj/soundx/Substitution
		org/sugarj/soundx/AnalysisFunctions
		org/sugarj/soundx/PrettyPrint
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/FreshAtoms

imports org/sugarj/soundx/Debug

// TODO why BFS?
// TODO: could we drop a non-derivable judgement and continue and find more error w/o diverging?

strategies
	/**
	 * Returns a list of error locations and error messages.
	 *
	 * @type (List(SXInfRules), SXJudgement) -> List((SXExpr, String))
	 */
	sx-bfsbc-find-errors =
		?(inf-rules, judg);
		<sx-bfsbc> (inf-rules, [[judg]]) => errors;
		<sx-bfsbc-remove-spurious-errors> errors

	/**
	  * Removes spurious errors using the goal markers in the list.
	  *
	  * @type List(SXBfsbcError) -> List((SXExpr, String))
	  */
	sx-bfsbc-remove-spurious-errors =
		?errors;
		//<sx-debug(|"errors before pruning ")> errors;
		<sx-bfsbc-filter-errors> errors => filtered-errors;
		//<sx-debug(|"errors after filtering ")> filtered-errors;
		<map(?SXBfsbcError(_, <id>))> filtered-errors

	/**
	 * Deletes the errors caused by goals which could later be derived.
	 *
	 * @type List(SXBfsbcError) -> List(SXBfsbcError)
	 */
	sx-bfsbc-filter-errors =
		// Finished
		?[];
		![]
	sx-bfsbc-filter-errors =
		// Remove errors that have this goal markers judgement in their goal list
		?[SXBfsbcGoalMarker(judg) | errors];
		let filter-s = {
			judgs, err:	
				where(
					(?SXBfsbcGoalMarker(_)) <+
					(?SXBfsbcError(judgs, err);
				 	 //<sx-debug(|"filtering ")> (judg, judgs);
				 	 <not(elem)> (judg, judgs))
				 	 //;<sx-debug(|"KEEP IN LIST ")> ""
				 	 )
			}
		in
			<filter(filter-s)> errors => errors1;
			//<sx-debug(|"ERRORS 1 ")> errors1;
			<sx-bfsbc-filter-errors> errors1
		end
	sx-bfsbc-filter-errors =
		// Keep this error and filter the remaining errors
		?[error@SXBfsbcError(_, _) | errors];
		<sx-bfsbc-filter-errors> errors => errors1;
		![error|errors1]
		
	/**
	 * Returns a list goal markers and errors.
	 *
	 * @type (List(SXInfRule), Queue(List(SXJudgement))) -> List(SXBfsbcError)
	 */
	sx-bfsbc =
		// Empty queue, unsuccessful derivation
		// Can only happen if no other path was successful before
		?(inf-rules, []);
		![SXBfsbcBogus()] // Bogus error for sx-bfsbc-join-errors
	sx-bfsbc =
		// Empty goals at head of queue, successful derivation
		?(inf-rules, [[]|judgs-queue]);
		![]
	sx-bfsbc =
		// Drop goal marker
		?(inf-rules, [[SXBfsbcGoalMarker(judg) | judgs] |  judgs-queue]);
		<sx-bfsbc> (inf-rules, [judgs | judgs-queue]) => errors;
		![SXBfsbcGoalMarker(judg) | errors]
	sx-bfsbc =
		// Non empty goals at head of queue
		?(inf-rules, queue@[[judg|judgs] | judgs-queue]);
		if <sx-is-prim-judgement> judg then
			// <sx-debug(|"By prim ")> judg;
			<sx-bfsbc-by-prim> (inf-rules, queue)
		else
			// <sx-debug(|"By rule ")> judg;
			<sx-bfsbc-by-rule> (inf-rules, queue)
		end

	/**
	 * Try to solve first goal which must be a primitive judgement.
	 *
	 * @type (List(SXInfRule), Queue(List(SXJudgement))) -> List((SXexpr, String))
	 */
	sx-bfsbc-by-prim =
		?(inf-rules, [[judg|judgs] | judgs-queue]);
		if <sx-bfsbc-solve-prim> judg => sub then
			// Goal could be solved, add premises to queue
			<sx-sub-apply> (sub, judgs) => judgs1;
			<sx-bfsbc> (inf-rules, <conc> (judgs-queue, [judgs1]))
		else
			// An error
			<sx-bfsbc-make-error> judg => error;
			<sx-bfsbc-collect-goal-markers> judgs => goal-markers;
			<sx-bfsbc> (inf-rules, judgs-queue) => errors;
			<sx-bfsbc-join-errors> (SXBfsbcError(goal-markers, error), errors)
		end

	/**
	 * Try to solve first goal which must be an inductively defined judgement.
	 *
	 * @type (List(SXInfRule), Queue(List(SXJudgement))) -> List((SXExpr, String))
	 */
	sx-bfsbc-by-rule =
		?(inf-rules, [[judg|judgs] | judgs-queue]);
		<sx-bfsbc-find-inf-rules> (inf-rules, judg) => candidates;
		// <sx-debug(|"found candidates ")> candidates;
		if !candidates; ?[] then
			// An error
			<sx-debug(|"should make error ")> "";
			<sx-bfsbc-make-error> judg => error;
			<sx-bfsbc-collect-goal-markers> judgs => goal-markers;
			<sx-bfsbc> (inf-rules, judgs-queue) => errors;
			<sx-bfsbc-join-errors> (SXBfsbcError(goal-markers, error), errors)
		else
			// Goal could be solved, add premises to queue
			let map-s = {
				premises, sub, judgs1:
					?(premises, sub);
					<sx-sub-apply> (sub, judgs) => judgs1;
					<conc> (premises, [SXBfsbcGoalMarker(judg)], judgs1)
				}
			in
				<map(map-s)> candidates => new-judgs;
				<sx-debug(|"new judgements ")> new-judgs;
				<sx-bfsbc> (inf-rules, <conc> (judgs-queue, new-judgs))
			end
		end

	/**
	 * Tries to solve primitive judgement.
	 *
	 * Fails if judgement cannot be solved.
	 *
	 * @type SXJudgement -> SXSub
	 */
	sx-bfsbc-solve-prim =
		// Inequality judgement
		?(SXNeq(expr1, expr2));
		<sx-vars> expr1 => [];
		<sx-vars> expr2 => [];
		not(<eq> (expr1, expr2));
		<sx-sub-empty> ()
	sx-bfsbc-solve-prim =
		// Get interface judgement
		?(SXGetInterface(var, mid));
		<sx-is-metavar> var;
		<is-string> mid;
		<sx-interface-expr> mid => interface; // Get interface
		<sx-sub-singleton> (var, interface)
	sx-bfsbc-solve-prim =
		// Fresh in judgement
		?(SXFreshIn(expr1, expr2));
		<sx-vars> expr2 => [];
		// <sx-debug(|"befor atoms ")> "";
		<sx-atoms> expr2 => atom-list;
		(// metavariable
		 (!expr1; sx-is-metavar;
		  // <sx-debug(|"is metavar")> "";
		  <sx-fresh-atom> atom-list => fresh-atom;
		  <sx-sub-singleton> (expr1, fresh-atom)
		 ) <+
		 // generate fresh atom (argument must be ground)
		 // (?SXFreshAtom(arg);
		 //  // <sx-debug(|"fresh atom ")> "";
		 //  <sx-vars> arg => [];
		 //  <sx-atoms> arg => arg-atom-list;
		 //  <subseteq> (atom-list, arg-atom-list);
		 //  <sx-sub-empty> () => sub-fresh;
		 //  !SXDerivInst([], "_notin_", judg) => deriv
		 // ) <+
		 // concrete atom
		 (// <sx-debug(|"other (fixed atom)")> "";
		  <sx-vars> expr1 => [];
		  // <sx-debug(|"no meta vars")> "";
		  not(<elem> (expr1, atom-list));
		  // <sx-debug(|"not elem ")> "";
		  <sx-sub-empty> ()
		 ))

	/**
	 * Finds matching inference rules by unification.
	 *
	 * It returns the instantiated premises for each candidate rule and the
	 * instantiation substitution.
	 *
	 * @type (List(SXInfRule), SXJudgement) -> List((List(SXJudgement), SXSub))
	 */
	sx-bfsbc-find-inf-rules =
		// No more possible rules
		?([], judg);
		![]
	sx-bfsbc-find-inf-rules =
		// Try first rule
		?([inf-rule|inf-rules], judg);
		<sx-fresh-inf-rule> inf-rule => SXInfRule(premises, name, concl);
		(// Unification successful
		 (<sx-bfsbc-unify> (concl, judg) => sub;
		  <sx-sub-apply> (sub, premises) => instantiated-premises;
		  <sx-bfsbc-find-inf-rules> (inf-rules, judg) => more-candidates;
		  ![(instantiated-premises, sub) | more-candidates]) <+
		 // Try next rule
		 <sx-bfsbc-find-inf-rules> (inf-rules, judg))

    /**
     * Unifies the two judgements.
     *
     * Fails if unification is not possible and returns the
     * mgu otherwise.
     *
     * @type (SXJudgement, SXJudgement) -> SXSub
     */
	sx-bfsbc-unify =
		?(judg1, judg2);
		<sx-vars> (judg1, judg2) => vars-unify;
		<sx-unify(|vars-unify)> (judg1, judg2) => result;
		if !result; ?SXUnificationFailure(_) then
			fail
		else
			!result
		end

	/**
	 * Adds an error to a list of error messages.
	 *
	 * If the list of errors is empty this indicates
	 * a successful derivation and the error is discarded.
	 * If it contains only SXBfsbcBogus(), this is also discarded and
	 * replaced by the error. In all other cases, the error
	 * is simply prepended to the list.
	 *
	 * @type (SXBfsbcResult, List(SXBfsbcResult)) -> List(SXBfsbcResult)
	 */
	sx-bfsbc-join-errors =
		?(error, []);
		![]
	sx-bfsbc-join-errors =
		?(error, [SXBfsbcBogus()]);
		[error]
	sx-bfsbc-join-errors =
		?(error, errors);
		![error|errors]

	/**
	 * Makes an error from a judgement.
	 *
	 * @type SXJudgement -> (SXExpr, String)
	 */
	sx-bfsbc-make-error =
		?judg;
		<sx-locate-source> judg => expr;
		<sx-debug(|"error expr ")> expr;
		<sx-pretty-print-term> judg => judg-string;
		<conc-strings> ("Could not derive ", judg-string) => message;
		<sx-debug(|"made error ")> message;
		!(expr, message)

	/**
	 * Collects all judgements of goal markers from list of goals.
	 *
	 * @type List(SXBfsbcResult) -> List(SXBfsbcResult)
	 */
	sx-bfsbc-collect-goal-markers =
		filter(?SXBfsbcGoalMarker(<id>))//; map(?SXBfsbcGoalMarker(<id>))

/**
 * Results of error detection.
 */
signature constructors
	SXBfsbcGoalMarker: SXJudgement                          -> SXBfsbcResult
	SXBfsbcError:      List(SXJudgement) * (SXExpr, String) -> SXBfsbcResult
	SXBfsbcBogus:                                              SXbfsbcResult
