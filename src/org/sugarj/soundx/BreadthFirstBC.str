/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Breadth-first search backward chaining to find errors.
 *
 * Breadth-first search is only invoked if depth-first search encountered an
 * error. It does not take assumptions (it is not used in the classification
 * procedure).
 *
 * Primitive judgements like inequality or concatenation of lexical
 * elements require their input arguments to be bound. That is, it works
 * similar to Prolog arithmetics.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/BreadthFirstBC

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Unification
		org/sugarj/soundx/Substitution
		org/sugarj/soundx/AnalysisFunctions
		org/sugarj/soundx/PrettyPrint
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/FreshAtoms
		org/sugarj/soundx/Utils

imports org/sugarj/soundx/Debug

// TODO why BFS? DFS would also work.
// TODO could we drop a non-derivable judgement and continue and find more error w/o diverging?

strategies
	/**
	 * Returns a list of error locations and error messages.
	 *
	 * @type (List(SXInfRules), SXJudgement) -> List((SXExpr, String))
	 */
	sx-bfsbc-find-errors =
		?(inf-rules, judg);
		<sx-bfsbc> (inf-rules, [[judg]]) => errors;
		<sx-bfsbc-remove-spurious-errors> errors

	/**
	  * Removes spurious errors using the goal markers in the list and
	  * removes duplicates.
	  *
	  * @type List(SXBfsbcError) -> List((SXExpr, String))
	  */
	sx-bfsbc-remove-spurious-errors =
		?errors;
		<partition(?SXBfsbcGoalMarker(<id>))> errors => (goals, errs);
		<filter(where({judgs:
			?SXBfsbcError(judgs, _);
			<isect> (judgs, goals) => []}))> errs => filtered-errs;
		<map(?SXBfsbcError(_, <id>)); nub> filtered-errs

	/**
	 * Returns a list goal markers and errors.
	 *
	 * @type (List(SXInfRule), Queue(List(SXJudgement))) -> List(SXBfsbcError)
	 */
	sx-bfsbc =
		// empty queue, unsuccessful derivation
		// can only happen if no other path was successful before
		?(inf-rules, []);
		![SXBfsbcBogus()] // bogus error for sx-bfsbc-join-errors
	sx-bfsbc =
		// empty goals at head of queue, successful derivation
		?(inf-rules, [[]|judgs-queue]);
		![]
	sx-bfsbc =
		// drop goal marker
		?(inf-rules, [[SXBfsbcGoalMarker(judg) | judgs] |  judgs-queue]);
		<sx-bfsbc> (inf-rules, [judgs | judgs-queue]) => errors;
		![SXBfsbcGoalMarker(judg) | errors]
	sx-bfsbc =
		// non empty goals at head of queue
		?(inf-rules, queue@[[judg|judgs] | judgs-queue]);
		if <sx-is-prim-judgement> judg then
			<sx-bfsbc-by-prim> (inf-rules, queue)
		else
			<sx-bfsbc-by-rule> (inf-rules, queue)
		end

	/**
	 * Try to solve first goal which must be a primitive judgement.
	 *
	 * @type (List(SXInfRule), Queue(List(SXJudgement))) -> List((SXexpr, String))
	 */
	sx-bfsbc-by-prim =
		?(inf-rules, [[judg|judgs] | judgs-queue]);
		if <sx-bfsbc-solve-prim> judg => sub then
			// goal could be solved, add premises to queue
			<sx-sub-apply> (sub, judgs) => judgs1;
			<sx-bfsbc> (inf-rules, <conc> (judgs-queue, [judgs1]))
		else
			// error
			<sx-bfsbc-make-error> judg => error;
			<sx-bfsbc-collect-goal-markers> judgs => goal-markers;
			<sx-bfsbc> (inf-rules, judgs-queue) => errors;
			<sx-bfsbc-join-errors> (SXBfsbcError(goal-markers, error), errors)
		end

	/**
	 * Try to solve first goal which must be an inductively defined judgement.
	 *
	 * @type (List(SXInfRule), Queue(List(SXJudgement))) -> List((SXExpr, String))
	 */
	sx-bfsbc-by-rule =
		?(inf-rules, [[judg|judgs] | judgs-queue]);
		<sx-bfsbc-find-inf-rules> (inf-rules, judg) => candidates;
		if !candidates; ?[] then
			// error
			<sx-bfsbc-make-error> judg => error;
			<sx-bfsbc-collect-goal-markers> judgs => goal-markers;
			<sx-bfsbc> (inf-rules, judgs-queue) => errors;
			<sx-bfsbc-join-errors> (SXBfsbcError(goal-markers, error), errors)
		else
			// goal could be solved, add premises to queue
			let map-s = {
				premises, sub, judgs1:
					?(premises, sub);
					<sx-sub-apply> (sub, judgs) => judgs1;
					<conc> (premises, [SXBfsbcGoalMarker(judg)], judgs1)
				}
			in
				<map(map-s)> candidates => new-judgs;
				<sx-bfsbc> (inf-rules, <conc> (judgs-queue, new-judgs))
			end
		end

	// TODO Clean up the primitives in the two inference engines. There is
	// too much code duplication.

	/**
	 * Tries to solve primitive judgement. Fails if judgement cannot be solved.
	 *
	 * @type SXJudgement -> SXSub
	 */
	sx-bfsbc-solve-prim =
		// inequality judgement
		?SXNeq(expr1, expr2);
		if <eq> (expr1, expr2) then
			fail // if they are equal, it must fail
		else
			// if they are not equal we can only be sure if they are ground
			<sx-vars> expr1 => [];
			<sx-vars> expr2 => [];
			not(<eq> (expr1, expr2));
			<sx-sub-empty> ()
		end
	sx-bfsbc-solve-prim =
		// get interface judgement
		?SXGetInterface(lhs, mid);
		<is-string> mid;
		<sx-interface-expr> mid => interface; // get interface
		<sx-vars> lhs => vars-unify;
		<sx-unify(|vars-unify)> (lhs, interface) => result;
		if !result; ?SXUnificationFailure(_) then
			fail
		else
			!result
		end
	sx-bfsbc-solve-prim =
		// concat judgement
		?SXConcat(expr1, expr2, var);
		<sx-is-metavar> var;
		<is-string> expr1;
		<is-string> expr2;
		(sx-namespace-kind; ?SXNamespaceNested(sep) + sx-namespace-kind; ?SXNamespacePrefixed(sep));
		<sx-sub-singleton> (var, <conc-strings> (expr1, sep, expr2))
	sx-bfsbc-solve-prim =
		// suffix judgement
		?SXSuffix(expr, var);
		<sx-is-metavar> var;
		<is-string> expr;
		(sx-namespace-kind; ?SXNamespaceNested(sep) + sx-namespace-kind; ?SXNamespacePrefixed(sep));
		<sx-split-string(|sep)> expr => strings;
		<sx-sub-singleton> (var, <last> strings)
	sx-bfsbc-solve-prim =
		// freshness judgement
		?judg;
		<sx-is-freshness-judgement> judg => (sort-name, [var|args]);
		<sx-vars> args => []; // rhs must be ground
		sx-freshness-conditions => freshness-conds;
		<lookup> (sort-name, freshness-conds) => freshness-cond;
		if <sx-is-metavar> var then
			// generate fresh atom
			<sx-fresh-atom> (freshness-cond, args) => fresh-atom;
			<sx-sub-singleton> (var, fresh-atom) => sub-fresh
		else
			// only check freshness condition
			<sx-fresh-atom-ok(|freshness-cond, args)> var;
			<sx-sub-empty> () => sub-fresh
		end;
		!sub-fresh

	/**
	 * Finds matching inference rules by unification. It returns the
	 * instantiated premises for each candidate rule and the
	 * instantiation substitution.
	 *
	 * @type (List(SXInfRule), SXJudgement) -> List((List(SXJudgement), SXSub))
	 */
	sx-bfsbc-find-inf-rules =
		// no more possible rules
		?([], judg);
		![]
	sx-bfsbc-find-inf-rules =
		// try first rule
		?([inf-rule|inf-rules], judg);
		<sx-fresh-inf-rule> inf-rule => SXInfRule(premises, name, concl);
		(// unification successful
		 (<sx-bfsbc-unify> (concl, judg) => sub;
		  <sx-sub-apply> (sub, premises) => instantiated-premises;
		  <sx-bfsbc-find-inf-rules> (inf-rules, judg) => more-candidates;
		  ![(instantiated-premises, sub) | more-candidates]) <+
		 // try next rule
		 <sx-bfsbc-find-inf-rules> (inf-rules, judg))

    /**
     * Unifies the two judgements. Fails if unification is not possible and returns the
     * mgu otherwise.
     *
     * @type (SXJudgement, SXJudgement) -> SXSub
     */
	sx-bfsbc-unify =
		?(judg1, judg2);
		<sx-vars> (judg1, judg2) => vars-unify;
		<sx-unify(|vars-unify)> (judg1, judg2) => result;
		if !result; ?SXUnificationFailure(_) then
			fail
		else
			!result
		end

	/**
	 * Adds an error to a list of error messages. If the list of errors is
	 * empty this indicate a successful derivation and the error is discarded.
	 * If it contains only SXBfsbcBogus(), this is also discarded and
	 * replaced by the error. In all other cases, the error
	 * is simply prepended to the list.
	 *
	 * @type (SXBfsbcResult, List(SXBfsbcResult)) -> List(SXBfsbcResult)
	 */
	sx-bfsbc-join-errors =
		?(error, []);
		![]
	sx-bfsbc-join-errors =
		?(error, [SXBfsbcBogus()]);
		[error]
	sx-bfsbc-join-errors =
		?(error, errors);
		![error|errors]

	/**
	 * Make an error for a judgement.
	 *
	 * @type SXJudgement -> (SXExpr, String)
	 */
	sx-bfsbc-make-error =
		sx-bfsbc-make-error-neq <+
		sx-bfsbc-make-error-ind-def

	/**
	 * Make an error for an inequality judgement.
	 *
	 * @type SXJudgement -> (SXExpr, String)
	 */
	sx-bfsbc-make-error-neq =
		?SXNeq(expr1, expr2);
		<sx-locate-source> expr1 => err-expr;
		<sx-pretty-print-term> expr1 => err-str;
		<conc-strings> ("Required something else than ", err-str) => msg;
		!(err-expr, msg)
		
	/**
	 * Makes an error from an inductively defined judgement.
	 *
	 * @type SXJudgement -> (SXExpr, String)
	 */
	sx-bfsbc-make-error-ind-def =
		?judg@judg-name#(args);
		if <sx-bfsbc-get-error-annotation> judg-name => (msg, loc) then
			<index> (<add> (loc, 1), args) => arg-loc;
			<sx-locate-source> arg-loc => expr-loc;
			<map(sx-pretty-print-term)> args => pp-args;
			<sx-bfsbc-fill-message> (0, pp-args, msg) => filled-msg;
			!(expr-loc, filled-msg)
		else
			<sx-pretty-print-term> judg => judg-string;
			<conc-strings> ("Could not derive ", judg-string) => message;
			!((), message)
		end

	/**
	 * Fills the message template with the concrete arguments.
	 *
	 * @type (Int, List(String), String) -> String
	 */
	sx-bfsbc-fill-message =
		?(_, [], msg);
		!msg
	sx-bfsbc-fill-message =
		?(n, [arg|args], msg);
		<conc-strings> ("%", <int-to-string> n, "%") => mark;
		<string-replace(|mark, arg)> msg => msg1;
		<sx-bfsbc-fill-message> (<add> (n, 1), args, msg1)

	/**
	 * Looks up the error annotation for the givene judgement name. Fails,
	 * if there is no annotation for that judgement.
	 *
	 * @type String -> (String, Int)
	 */
	sx-bfsbc-get-error-annotation =
		?judg-name;
		sx-error-annotations => annos;
		<lookup> (judg-name, annos)

	/**
	 * Collects all judgements of goal markers from list of goals.
	 *
	 * @type List(SXBfsbcResult) -> List(SXBfsbcResult)
	 */
	sx-bfsbc-collect-goal-markers =
		filter(?SXBfsbcGoalMarker(<id>))

/**
 * Results of error detection.
 */
signature constructors
	SXBfsbcGoalMarker: SXJudgement                          -> SXBfsbcResult
	SXBfsbcError:      List(SXJudgement) * (SXExpr, String) -> SXBfsbcResult
	SXBfsbcBogus:                                              SXbfsbcResult
