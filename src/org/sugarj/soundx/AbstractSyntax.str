/**
 * SoundX abstract syntax
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/AbstractSyntax

imports org/sugarj/sxbld/processing/MetaExplode


/**
 * Metavariables
 */
signature constructors
	SXMetaVar:    String       -> SXMetaVar
	SXMetaVarGen: String * Int -> SXMetaVar

strategies
	/**
	 * Translates meta-var to SXMetaVar
	 *
	 * @type a -> a
	 */
    sxbld-meta-var-to-sx-metavar =
    	topdown(try(\meta-var(name) -> SXMetaVar(name)\))

	/**
	 * Checks if term is a metavariable
	 *
	 * @type a -> a
	 */
	sx-is-metavar =
		?SXMetaVar(_) +
		?SXMetaVarGen(_, _)

	/**
	 * Collects all metavariables of an expression
	 *
	 * @type a -> List(SXMetavar)
	 */
    sx-vars =
    	collect-all(sx-is-metavar)

	/**
	 * Returns the name of a metavariable
	 *
	 * @type SXMetaVar -> String
	 */
	sx-metavar-name:
		SXMetaVar(name) -> name
	sx-metavar-name:
		SXMetaVarGen(name, num) -> <conc-strings> (name, <int-to-string> num)

/**
 * Inference rules
 */
signature constructors
	SXInfRule: List(SXJudgement) * SXJudgement -> SXAbsInfRule

/**
 * Judgements
 */
signature constructors
	SXEq:           SXExpr * SXExpr -> SXJudgement
    SXNeq:          SXExpr * SXExpr -> SXJudgement
    SXGetInterface: SXExpr * SXExpr -> SXJudgement

strategies
	/**
	 * Checks if term is an SXEq judgement
	 *
	 * @type SXJudgement -> _
	 */
	sx-is-eq-judgement =
		?SXEq(_, _)

/**
 * Toplevel declaration list
 */
signature constructors
	SXToplevelDeclarationsCons: SXToplevelDeclaration * SXToplevelDeclarations -> SXToplevelDeclarations
	SXToplevelDeclarationsNil:                                                    SXToplevelDeclarations

	SXFinished: List(SXToplevelDeclarations) -> SXFinished

strategies
	/**
	 * Converts list of toplevel declarations into ToplevelDeclarations
	 *
	 * @type List(SXToplevelDeclaration) -> SXToplevelDeclarations
	 */
	sx-list-to-toplevel-decls:
		[] -> SXToplevelDeclarationsNil()
	sx-list-to-toplevel-decls:
		[decl|decls] -> SXToplevelDeclarationsCons(decl, decls1)
		where
			<sx-list-to-toplevel-decls> decls => decls1

	/**
	 * Converts ToplevelDeclarations into list of toplevel declarations
	 *
	 * @type SXToplevelDeclarations -> List(SXToplevelDeclaration)
	 */
	sx-toplevel-decls-to-list:
		SXToplevelDeclarationsNil() -> []
	sx-toplevel-decls-to-list:
		SXToplevelDeclarationsCons(decl, decls) -> [decl|decls1]
		where
			<sx-toplevel-decls-to-list> decls => decls1

/**
 * Derivations
 */
signature constructors
	SXDerivInst: List(SXDeriv) * String * SXJudgement -> SXDeriv
	SXDerivAsm:  SXJudgement                          -> SXDeriv
	SXDerivFail: SXJudgement                          -> SXDeriv

strategies
	/**
	 * Extracts the conclusion from a derivation
	 *
	 * @type SXDeriv -> SXJudgement
	 */
	sx-concl:
		SXDerivInst(_, _, concl) -> concl
	sx-concl:
		SXDerivAsm(concl) -> concl
	sx-concl:
		SXDerivFail(concl) -> concl

/**
 * Various
 */
signature constructors
	SXUnificationFailure: String -> SXUnificationResult

	SXFalse: SXBool
	SXTrue:  SXBool

