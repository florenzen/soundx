/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Pretty printing of base language and extension fragments.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/PrettyPrint

imports org/sugarj/soundx/Utils
		org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/PPTable

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Pretty prints a term or a list of terms. For a list, each element is
	 * printed on a separate line.
	 *
	 * @type a -> String
	 * @type List(a) -> String
	 */
	sx-pretty-print-nl =
		sx-pretty-print-list-nl <+
		sx-pretty-print-term

	/**
	 * Pretty prints a term or a list of terms. For a list, the elements are
	 * separated by sep.
	 *
	 * @param sep String
	 *
	 * @type a -> String
	 * @type List(a) -> String
	 */
	sx-pretty-print-sep(|sep) =
		sx-pretty-print-list-sep(|sep) <+
		sx-pretty-print-term

	/**
	 * Pretty prints a term or a list of terms. For a list, the elements are
	 * separated by a comma.
	 *
	 * @type a -> String
	 * @type List(a) -> String
	 */	
	sx-pretty-print-comma =
		sx-pretty-print-list-comma <+
		sx-pretty-print-term

	/**
	 * Pretty prints a list of terms. The elements are
	 * separated by a commad.
	 *
	 * @type List(a) -> String
	 */	
	sx-pretty-print-list-comma =
		sx-pretty-print-list-sep(|", ")

	/**
	 * Pretty prints a list of terms. Each element is
	 * printed on a separate line.
	 *
	 * @type List(a) -> String
	 */
	sx-pretty-print-list-nl =
		map(sx-pretty-print-term); lines

	/**
	 * Pretty prints a list of terms. The elements are
	 * separated by sep.
	 *
	 * @param sep String
	 *
	 * @type a -> String
	 * @type List(a) -> String
	 */
	sx-pretty-print-list-sep(|sep) =
		map(sx-pretty-print-term); separate-by(!sep); concat-strings

	/**
	 * Pretty prints a term. For generated meta-variables it prints
	 * only the name, not the number.
	 *
	 * @type a -> String
	 */
	sx-pretty-print-term =
		?expr;
		sx-get-pp-table => tbl;
		<bottomup(try(\SXMetaVarGen(name, _) -> SXMetaVar(name)\))> expr => expr1;
		<bottomup(try(\SXMetaVar(name) -> name\))> expr1 => expr2;
		(// <sx-pretty-print(|tbl)> expr1 <+
		 <sx-base-lang-pretty-print> expr2 <+
		 <write-to-string> expr1)

	/**
	 * Converts a list of Grammars to a pretty printer table.
	 *
	 * @type List(Sdf2Grammar) -> PP-Table
	 */
	sx-grammars-to-pp-table =
		?grms;
		((<sx-generate-pp-table> grms => pptable)
		 <+ <sx-debug(|"Gen PP Table failed.")> "")
	
	/**
	 * Returns the current PP table from the environment. It is
	 * loaded from the Stratego files if necessary.
	 *
	 * @type _ -> PP-Table
	 */	
	sx-get-pp-table =
		if sx-env-is-pp-table-defined then
			sx-env-get-pp-table
		else
			sx-load-pp-table;
			sx-env-get-pp-table
		end

	/**
	 * Loads the PP table from the base language and all imported extensions
	 * into the environment.
	 * 
	 * @type _ -> SXEnv
	 */
	sx-load-pp-table =
		sx-pp-table => PP-Table(entries);
		let map-s = {
				module-name, mod-entries:
					?module-name;
					if <sx-extension-pp-table> module-name => PP-Table(mod-entries) then
						!mod-entries
					else
						![]
					end
			}
		in
			sx-env-get-imports => imports;
			sx-env-get-namespace => namespace;
			<map(map-s); concat> [namespace|imports] => entries-exts;
			sx-pp-entries-metavars => entries-mv;
			<conc> (entries, entries-mv, entries-exts) => all-entries;
			!PP-Table(all-entries) => pp-table;
			<sx-env-set-pp-table> pp-table
		end

	/**
	 * Returns the PP entries for meta-variables.
	 *
	 * @type _ -> List(PP-Entry)
	 */
	sx-pp-entries-metavars =
		![PP-Entry(Path1("SXMetaVar"), [Arg("1")]),
		  PP-Entry(Path1("SXMetaVarGen"), [Arg("1")])]
