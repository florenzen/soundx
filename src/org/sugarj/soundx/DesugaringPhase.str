/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * SoundX desugaring phase: desugaring the derivation
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/DesugaringPhase

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
		org/sugarj/soundx/ExtensionDefinition
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/InductiveDefinitions
		org/sugarj/soundx/Utils
		org/sugarj/soundx/DerivationDesugaring

imports org/sugarj/soundx/processing/EnvDesugaring

imports org/sugarj/soundx/Debug


strategies
	/**
 	 * Hook desugaring into SugarJ
 	 */
	internal-main = sx-desugar

	/**
	 * Main SoundX desugaring procedure
	 */
	sx-desugar =
		?decl;
		<sx-debug(|"process decl ")> decl;
		sx-is-toplevel-declaration;
		if sx-is-last-toplevel-decl then
			sx-env-get-errors => errors;
			if !errors; ?[] then // Only desugar if there are no errors
				sx-env-extract-extension-decls => env-decls;
				if !decl; (sx-is-namespace-decl + sx-is-import-decl) then
					![decl|env-decls]
				else
					![env-decls]
				end => decls;
				(sx-derivation-desugaring <+ ![]) => desugared-decls;
				<sx-remove-imports> desugared-decls => desugared-decls-no-imports;
				// Imports must be removed since they have been stored in the
				// base processor when they have been seen the first time. Without
				// filtering all imports would appear twice.
				// Imports cannot be skipped when first reading them since imported
				// modules have to be processed before the following declarations
				// of the current module.
				sx-env-get-errors => errors-desugar;
				<conc> (decls, desugared-decls-no-imports) => all-decls;
				<put-analysis-data(|"all-errors", errors-desugar)> decl;
				if !all-decls; ?[] then
					!""
				else
					!all-decls
				end
				// look for errors again after desugaring since it may also cause errors
			else
				// If there are errors, attach them all to the last
				// declaration. Desugar the declaration into the empty
				// string such that it gets added to the list of sugared
				// toplevel declarations in the SugarJ driver and
				// can be extracted by constraint-error.
				// If it is a namespace of import decl return it unchanged.
				<put-analysis-data(|"all-errors", errors)> decl;
				if !decl; (sx-is-namespace-decl + sx-is-import-decl +
					sx-is-extension-begin + sx-is-extension-end) then
					!decl
				else
					!""
				end
			end
		else
			if sx-env-is-extension-processing then
				sx-env-extract-extension-decls => ext-decls;
				<sx-debug(|"is extension processing")> "";
				if <sx-is-extension-begin> decl then
					![decl|ext-decls]
				else
					!ext-decls
				end
			else
				// the Stratego code is always written to be available at
				// verification time which takes place before the desugaring
				// of the last toplevel declaration
				sx-env-extract-extension-decls-stratego => trans-decls;
				if !decl; (sx-is-namespace-decl + sx-is-import-decl +
					sx-is-extension-begin + sx-is-extension-end) then
					<sx-debug(|"passed through ")> decl;
					![decl, SXExtensionDecl(trans-decls)]
				else
					![SXExtensionDecl(trans-decls)]
				end
			end
		end
		
	sx-remove-imports =
		filter(not(sx-is-import-decl))

	sx-is-toplevel-declaration =
		sx-is-extension-end +
		sx-is-extension-begin +
		sx-is-grammar-elems +
		sx-is-inductive-definitions +
		sx-is-desugarings +
		sx-is-import-decl +
		sx-is-namespace-decl +
		sx-is-body-decl

	sx-is-extension-end =
		?SXExtensionEnd(_)

	sx-is-extension-begin =
		?SXExtensionBegin(_)

	sx-is-grammar-elems =
		?SXGrammarElems(_)

	sx-is-inductive-definitions =
		?SXInductiveDefinitions(_)

	sx-is-desugarings =
		?SXDesugarings(_)
