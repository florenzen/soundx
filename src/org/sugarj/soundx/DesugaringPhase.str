/**
 * SoundX desugaring phase: desugaring the derivation
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/DesugaringPhase

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Environment
		org/sugarj/soundx/ExtensionDefinition
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/InductiveDefinitions
		org/sugarj/soundx/Utils
		org/sugarj/soundx/DerivationDesugaring

imports org/sugarj/soundx/processing/EnvDesugaring

imports org/sugarj/soundx/Debug


/**
 * Hook desugaring into SugarJ
 */
strategies
	internal-main = sx-desugar

	/**
	 * Main SoundX desugaring procedure
	 */
	sx-desugar =
		?decl;
		sx-is-toplevel-declaration;
		if sx-is-last-toplevel-decl then
			sx-env-get-errors  => errors;
			if !errors; ?[] then
				sx-env-extract-extension-decls => env-decls;
				if !decl; (sx-is-namespace-decl + sx-is-import-decl) then
					![decl|env-decls]
				else
					!env-decls
				end => decls;
				sx-derivation-desugaring => desugared-decls;
				debug(!"DESUGARED DECLS");
				!decls
				// env desugaring and derivation desugaring
			else
				// If there are errors, attach them all to the last
				// declaration. Desugar the declaration into the empty
				// string such that it gets added to the list of sugared
				// toplevel declarations in the SugarJ driver and
				// can be extracted by constraint-error.
				// If it is a namespace of import decl return it unchanged.
				<put-analysis-data(|"all-errors", errors)> decl;
				if !decl; (sx-is-namespace-decl + sx-is-import-decl) then
					!decl
				else
					!""
				end
			end
		else
			if sx-env-is-extension-processing then
				sx-env-extract-extension-decls
			else
				// the Stratego code is always written to be available at
				// verification time which takes place before the desugaring
				// of the last toplevel declaration
				sx-env-extract-extension-decls-stratego => trans-decls;
				if !decl; (sx-is-namespace-decl + sx-is-import-decl) then
					![decl, SXExtensionDecl(trans-decls)]
				else
					![SXExtensionDecl(trans-decls)]
				end
			end
		end
		
	sx-is-toplevel-declaration =
		sx-is-extension-end +
		sx-is-extension-begin +
		sx-is-grammar-elems +
		sx-is-inductive-definitions +
		sx-is-desugarings +
		sx-is-import-decl +
		sx-is-namespace-decl +
		sx-is-body-decl

	sx-is-extension-end =
		?SXExtensionEnd(_)

	sx-is-extension-begin =
		?SXExtensionBegin(_)

	sx-is-grammar-elems =
		?SXGrammarElems(_)

	sx-is-inductive-definitions =
		?SXInductiveDefinitions(_)

	sx-is-desugarings =
		?SXDesugarings(_)


	// Parts for the derivation desugaring procedure
	// TODO should go in another module	
