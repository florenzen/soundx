/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Auxiliary utility functions and wrappers for Stratego primitives.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/Utils

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Print something to the error console.
	 *
	 * @type a -> _
	 *
	 */
	sx-print-error = debug(!"")

	/**
 	 * Checks if the current toplevel declaration is the last one.
 	 *
 	 * @type _ -> _
 	 */
	sx-is-last-toplevel-decl =
		prim("SUGARJ_is_last_toplevel_declaration")

	/**
	 * Calls the box pretty printer.
	 *
	 * @param tbl PPTable
	 *
	 * @type a -> String
	 */
	sx-pretty-print(|tbl) =
		prim("SUGARJ_pretty_print", | tbl)

	/**
	 * Generates a pretty printer table from an SDF2 module.
	 *
	 * @type Sdf2Module -> PPTable
	 */
	sx-generate-pp-table =
		prim("SUGARJ_generate_pp_table")

 	/**
 	 * Calls the pretty printer of the base language.
 	 *
 	 * @type a -> String
 	 */
	sx-base-lang-pretty-print =
		prim("SUGARJ_sx_base_lang_pretty_print")

	/**
	 * Removes duplicates from the list. It keeps the last occurence of a specific element.
	 *
	 * @type List(a) -> List(a)
	 */
	sx-nub:
		[] -> []
	sx-nub:
		[x|xs] -> [x|xs1]
		where
			<not(elem)> (x, xs);
			<sx-nub> xs => xs1
	sx-nub:
		[x|xs] -> xs1
		where
			<elem> (x, xs);
			<sx-nub> xs => xs1

	/**
	 * Splits a string into a list of string at the given separator
	 * (must be a one character string).
	 *
	 * @param sep String
	 *
	 * @type String -> List(String)
	 */
	sx-split-string(|sep) =
		?str;
		<explode-string> sep => [s];
		<explode-string> str => chars;
		<sx-split-string1(|s)> chars => splitted;
		<map(implode-string)> splitted

	/**
	 * Helper for sx-split-string.
	 *
	 * @param sep Char
	 *
	 * @type List(Char) -> List(List(Char))
	 */
	sx-split-string1(|sep) =
		?[]; ![]
	sx-split-string1(|sep) =
		?cs@[_|_];
		<sx-split-chars-at-first-sep(|sep)> cs => (cs1, cs2);
		<sx-split-string1(|sep)> cs2 => strs;
		![cs1 | strs]

	/**
	 * Splits a list of characters at the first occurrence of sep.
	 *
	 * @param sep Char
	 *
	 * @type List(Char) -> (List(Char), List(Char))
	 */
	sx-split-chars-at-first-sep(|sep) =
		?[]; !([], [])
	sx-split-chars-at-first-sep(|sep) =
		?[c|cs];
		if <eq> (c, sep) then
			!([], cs)
		else
			<sx-split-chars-at-first-sep(|sep)> cs => (cs1, cs2);
			!([c|cs1], cs2)
		end
