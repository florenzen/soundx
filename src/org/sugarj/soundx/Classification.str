/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Classification of inference rules
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/Classification

imports org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/BasicDesugaring
		org/sugarj/soundx/DepthFirstBC
		org/sugarj/soundx/Declarations
		org/sugarj/soundx/AnalysisFunctions
		org/sugarj/soundx/Environment

imports org/sugarj/soundx/Debug


strategies
	/**
	 * Classifies all inference rules. It fails if a rule cannot be classified.
	 *
	 * @param current-ext String
	 * @param base-inf-rules List(SXInfRule)
	 *
	 * @type List(SXInfRule) -> _
	 */
	sx-classify-all-inf-rules(|current-ext, base-inf-rules) =
		?ext-inf-rules;
		map(sx-classify-inf-rule(|current-ext, ext-inf-rules, base-inf-rules))
		
	/**
	 * Classifies an inference rule. It fails if the inference rule cannot
	 * be classified.
	 *
	 * @param current-ext String
	 * @param ext-inf-rules List(SXInfRule)
	 * @param base-inf-rules List(SXInfRule)
	 *
	 * @type SXInfRule -> SXClassification
	 */
	sx-classify-inf-rule(|current-ext, ext-inf-rules, base-inf-rules) =
		?inf-rule@(_, name, _);
		((sx-classify-inf-rule-x(|current-ext, ext-inf-rules, base-inf-rules) +
		  sx-classify-inf-rule-b(|current-ext, ext-inf-rules, base-inf-rules)) <+
		 <sx-env-get-named-inf-rule> name => Some(input);
		 <sx-analysis-fail(|"Could not verify this rule")> input)
		 // TODO give more helpful error message including assumptions and desugared conclusion

	/**
	 * Classifies an inference rule as X rule. It fails if the inference rule cannot
	 * be classified as X.
	 *
	 * @param current-ext String
	 * @param ext-inf-rules List(SXInfRule)
	 * @param base-inf-rules List(SXInfRule)
	 *
	 * @type SXInfRule -> SXClassification
	 */
	sx-classify-inf-rule-x(|current-ext, ext-inf-rules, base-inf-rules) =
		?rule@SXInfRule(premises, name, concl);
		// <sx-debug(|"trying to verify as X: ")> rule;
		<sx-basic-desugar-inf-rule(|current-ext)> rule => des-rule@SXInfRule(des-premises, _, des-concl);
		<sx-debug(|"desugared rule ")> des-rule;
		<map(!SXDerivAsm(<id>))> premises => asms;
		<conc> (ext-inf-rules, base-inf-rules) => all-inf-rules;
		if <sx-dfsbc-build-derivation> (asms, all-inf-rules, des-concl) => deriv then
			if !deriv; ?SXDerivInst(_, rule-name, _) then
				<map(sx-inf-rule-name)> base-inf-rules => base-rule-names;
				if <elem> (rule-name, base-rule-names) then
					// <sx-debug(|"successfully classified as X: ")> name;
					!SXRuleX()
				else
					// <sx-debug(|"failed to classify as X rule (last rule not from base): ")> name;
					fail
				end
			else
				// <sx-debug(|"failed to classify as X rule (conclusion in assumptions): ")> name;
				fail
			end
		else
			// <sx-debug(|"failed to classify as X rule (no derivation): ")> name;
			fail
		end

	/**
	 * Classifies an inference rule as B rule. It fails if the inference rule cannot
	 * be classified as B.
	 *
	 * @param current-ext String
	 * @param ext-inf-rules List(SXInfRule)
	 * @param base-inf-rules List(SXInfRule)
	 *
	 * @type SXInfRule -> SXClassification
	 */
	sx-classify-inf-rule-b(|current-ext, ext-inf-rules, base-inf-rules) =
		?rule@SXInfRule(premises, name, concl);
		// <sx-debug(|"trying to verify as B: ")> rule;
		<sx-basic-desugar-inf-rule(|current-ext)> rule => des-rule@SXInfRule(des-premises, _, des-concl);
		// <sx-debug(|"desugared rule ")> des-rule;
		<sx-extension-cons-names> current-ext => ext-cons-names;
		<sx-collect-all-cons-names> des-premises => des-premises-cons-names;
		// <sx-debug(|"all cons names of the premises ")> des-premises-cons-names;
		if <isect> (ext-cons-names, des-premises-cons-names); ?[] then
			<map(!SXDerivAsm(<id>))> des-premises => asms;
			if <sx-dfsbc-build-derivation> (asms, base-inf-rules, des-concl) => deriv then
				// <sx-debug(|"successfully classified as B: ")> name;
				!SXRuleB()
			else
				// <sx-debug(|"failed to classify as B rule (no derivation): ")> name;
				fail
			end
		else
			// <sx-debug(|"failed to classify as B rule (extended expressions in premises): ")> name;
			fail
		end
