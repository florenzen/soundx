/**
 * SoundX environment
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/Environment

imports org/sugarj/soundx/AbstractSyntax

/**
 * Basic handling of the environment hash table
 *
 * The environment is a hash table from Strings to values.
 * We use SXEnv in type annotation.
 */
strategies
	/**
	 * The environment hash table
	 *
	 * Do not call directly, use sx-env-get-hashtable instead.
	 *
	 * @type _ -> SXEnv
	 */
    sx-env-hashtable = fail

    /**
     * Returns the environment
     *
     * Creates an empty hash table if called for the first time.
     *
     * @type _ -> SXEnv
     */
    sx-env-get-hashtable =
  	    sx-env-hashtable <+
  	    (sx-env-new-hashtable => ht;
  	    rules(sx-env-hashtable: () -> ht);
  	    !ht)

    /**
     * Creates empty environment containing all keys
     *
     * @type _ -> SXEnv
     */
    sx-env-new-hashtable =
  	    new-hashtable;
  	    hashtable-put(|"toplevel-declarations", []);
  	    hashtable-put(|"failed", SXFalse());
  	    hashtable-put(|"namespace", "");
  	    hashtable-put(|"imports", []);
  	    hashtable-put(|"cons-names", []);
  	    hashtable-put(|"extension-processing", SXFalse());
  	    hashtable-put(|"errors", []);
  	    hashtable-put(|"desugarings", []);
  	    hashtable-put(|"inference-rules", <new-hashtable> ());
  	    hashtable-put(|"grammar-elems", []);
  	    hashtable-put(|"name-counter", 0)

    /**
     * Looks up a key in the environment
     *
     * @type String -> a
     */
    sx-env-get:
  	    key -> value
  	    where
  		    <sx-env-get-hashtable> ();
  		    hashtable-get(|key) => value

    /**
     * Sets a key to a value in the environment
     *
     * @type String * a -> SXEnv
     */
    sx-env-set =
        ?(key, value);
  	    <sx-env-get-hashtable> ();
  	    hashtable-put(|key, value)

/**
 * Fresh names
 */
strategies
	/**
	 * Gets name-counter
	 *
	 * @type _ -> integer
	 */
	sx-env-get-name-counter =
		<sx-env-get> "name-counter"

    /**
     * Sets name-counter
     *
     * @type integer -> SXEnv
     */
    sx-env-set-name-counter =
    	?counter;
    	<sx-env-set> ("name-counter", counter)

    /**
     * Generates a fresh name with the given prefix
     *
     * @type String -> String
     */
    sx-env-fresh-name:
    	prefix -> fresh-name
    	where
    		<sx-env-get-name-counter> () => counter;
    	    <sx-env-set-name-counter> (<add> (counter, 1));
    	    <int-to-string> counter => suffix;
    	    <conc-strings> (prefix, suffix) => fresh-name

    /**
     * Generates a fresh name for a constructor
     *
     * The namespace is included in the constructor name
     * to make them distinct over all modules.
     *
     * @type _ -> String
     */
    sx-env-fresh-cons-name =
    	sx-env-get-namespace => namespace;
    	<sx-env-fresh-name> (<conc-strings> ("SXCons", namespace))
  
/**
 * Handling of grammar-elems
 */
strategies
	/**
	 * Gets grammar-elems
	 *
	 * @type _ -> List(Grammar)
	 */
    sx-env-get-grammar-elems =
        <sx-env-get> "grammar-elems"

    /**
     * Sets grammar-elems
     *
     * @type List(Grammar) -> SXEnv
     */
    sx-env-set-grammar-elems =
        ?grammar-elems-new;
  	    <sx-env-set> ("grammar-elems", grammar-elems-new)

    /**
     * Adds grammar-elems
     *
     * @type List(Grammar) -> SXEnv
     */
    sx-env-add-grammar-elems =
  	    ?grammar-elems-new;
  	    sx-env-get-grammar-elems => grammar-elems-old;
  	    <sx-env-set-grammar-elems> (<conc> (grammar-elems-new, grammar-elems-old))

/**
 * Handling of desugarings
 */
strategies
	/**
	 * Adds an error to the list of errors
	 *
	 * @type (a, String) -> SXEnv
	 */
	sx-env-add-desugaring =
		?desugaring;
		<sx-env-get> "desugarings" => desugarings;
		<sx-env-set> ("desugarings", [desugaring|desugarings])

	/**
	 * Gets all desugarings
	 *
	 * @type _ -> List(SXDesugaring)
	 */
	sx-env-get-desugarings =
		<sx-env-get> "desugarings"

/**
 * Handling of inference rules
 */
strategies
    /**
	 * Gets an inference rule
	 *
	 * @type String -> Option(SXInfRule)
	 */
    sx-env-get-inference-rule =
    	?name;
  	    <sx-env-get> "inference-rules";
  	    maybe(hashtable-get(|name))

    /**
     * Adds an inference rules
     *
     * @type (String, SXInfRule) -> SXEnv
     */  
    sx-env-add-inference-rule =
  	    ?(name, rule);
  	    <sx-env-get> "inference-rules";
  	    hashtable-put(|name, rule)

/**
 * Handling of errors
 */
strategies
	/**
	 * Adds an error to the list of errors
	 *
	 * @type (a, String) -> SXEnv
	 */
	sx-env-add-error =
		?error;
		<sx-env-get> "errors" => errors;
		<sx-env-set> ("errors", [error|errors])

	/**
	 * Gets all errors
	 *
	 * @type _ -> List((a, String))
	 */
	sx-env-get-errors =
		<sx-env-get> "errors"

/**
 * Handling of toplevel-declarations
 */
strategies
	/**
	 * Gets the list of toplevel declarations
	 *
	 * @type _ -> List(SXToplevelDeclarations)
	 */
	sx-env-get-toplevel-declarations =
		<sx-env-get> "toplevel-declarations"

	/**
	 * Adds a declaration to the list of toplevel declarations
	 *
	 * @type SXToplevelDeclaration -> SXEnv
	 */
    sx-env-add-toplevel-declaration =
    	?decl;
    	<sx-env-get> "toplevel-declarations" => decls;
    	<sx-env-set> ("toplevel-declarations", <conc> (decls, [decl]))

/**
 * Handling of the failed flags
 */
strategies
	/**
	 * Gets failed flag
	 *
	 * @type _ -> SXBool
	 */
    sx-env-get-failed =
        <sx-env-get> "failed"

    /**
     * Sets the failed flag
     *
     * @type SXBool -> SXEnv
     */
    sx-env-set-failed =
        ?failed-new;
  	    <sx-env-set> ("failed", failed-new)

    /**
     * Set failed flag to true
     *
     * @type _ -> SXEnv
     */
    sx-env-failed =
    	<sx-env-set-failed> SXTrue()

/**
 * Handling of namespace
 */
strategies
	/**
	 * Gets namespace
	 *
	 * @type _ -> String
	 */
	sx-env-get-namespace =
		<sx-env-get> "namespace"

	/**
	 * Sets namespace
	 *
	 * @type String -> SXEnv
	 */		
    sx-env-set-namespace =
    	?string;
    	<sx-env-set> ("namespace", string)

    /**
     * Succeeds if namespace is defined
     *
     * @type _ -> String
     */
    sx-env-is-namespace-defined =
    	sx-env-get-namespace; not(?"")

/**
 * Handling of imports
 */
strategies
	/**
	 * Adds an import
	 *
	 * @type String -> SXEnv
	 */
	sx-env-add-import =
		?import;
		<sx-env-get> "imports" => imports;
		<sx-env-set> ("imports", [import|imports])

    /**
     * Gets the list of imports
     *
     * @type _ -> List(String)
     */
	sx-env-get-imports =
		<sx-env-get> "import"

/**
 * Handling of extension-processing
 */
strategies
	/**
	 * Set extension-processing
	 *
	 * @type _ -> SXEnv
	 */
	sx-env-set-extension-processing =
		<sx-env-set> ("extension-processing", SXTrue())

	/**
	 * Checks if extension-processing is set
	 *
	 * @type _ -> _
	 */
	sx-env-is-extension-processing =
		<sx-env-get> "extension-processing"; not(?SXFalse())

	/**
	 * Unset extension processing
	 *
	 * @type _ -> SXEnv
	 */
	sx-env-unset-extension-processing =
		<sx-env-set> ("extension-processing", SXFalse())
		
/**
 * Handling of constructor names
 */
strategies
	/**
	 * Adds a constructor name
	 *
	 * @type String -> SXEnv
	 */
	sx-env-add-cons-name =
		?name;
		<sx-env-get> "cons-names" => names;
		<sx-env-set> ("cons-names", [name|names])

    /**
     * Succeeds if a constructor name is defined
     *
     * @type String -> List(String)
     */
	sx-env-cons-name-defined =
		?name;
		<sx-env-get> "cons-names" => names;
		<elem> (name, names)