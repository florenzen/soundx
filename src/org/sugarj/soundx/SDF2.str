/*
 * Copyright (c) 2015, TU Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 * - Neither the name of the TU Berlin nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Manipulation of SDF2 abstract syntax.
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/SDF2

imports org/sugarj/languages/Sdf2


strategies
	/**
	 * Gets name of sort and parameterized-sort symbol.
	 *
	 * @type Sdf2Symbol -> String
	 */
	sx-sdf2-symbol-name =
		(?sort(name); !name) +
		(?parameterized-sort(name, _); !name)

	/**
	 * Generate the SDF2 cons attribute as ATerm
	 *
	 * @type String -> Sdf2Attribute
	 */
	sx-sdf2-cons-attribute:
		cons-name -> attribute
		where 
			<double-quote> cons-name => cons-name-quoted;
			!term(default(appl(unquoted("cons"),
			  [fun(quoted(cons-name-quoted))]))) => attribute

    /**
     * Gives the constructor name from a cons attribute
     *
     * @type Sdf2Attribute -> String
     */
    sx-sdf2-cons-attribute-name-quoted:
    	term(default(appl(unquoted("cons"), [fun(quoted(cons-name-quoted))]))) -> cons-name-quoted

    /**
     * Succeeds if attribute is ATerm attribute of specified name
     *
     * @param attrib-name String
     *
     * @type Sdf2Attribute -> Sdf2Attribute
     */
    sx-sdf2-is-attribute(|attrib-name) =
    	?term(default(appl(unquoted(attrib-name), _))) +
    	?term(default(fun(unquoted(attrib-name))))

	/**
	 * Generates a ATerm attribute with a string argument
	 *
	 * The first string is the name of the attribute, the second
	 * string is its value.
	 *
	 * @type (String, String) -> Sdf2Attribute
	 */
	sx-sdf2-aterm-attribute =
		?(name, string);
		!term(name#([string]))

    /**
     * Succeeds if ATerm attribute of given name is defined in attributes
     *
     * @param attrib-name String
     *
     * @type Sdf2Attributes -> Sdf2Attributes
     */
    sx-sdf2-is-aterm-attribute-defined(|attrib-name) =
    	if ?no-attrs() then
    		fail
    	else
    		?attrs(attribs);
    		where(
    			<elem(\(_, a2) -> <sx-sdf2-is-attribute(|attrib-name)> a2\)> (attrib-name, attribs))
    	end

	/**
	 * Extracts ATerm attribute of given name from SDF2 ttributes
	 *
	 * @param attrib-name String
	 *
	 * @type Sdf2Attributes -> Sdf2Attribute
	 */
    sx-sdf2-extract-aterm-attribute(|attrib-name) =
    	if ?no-attrs() then
    		fail
    	else
    		?attrs(attribs);
    		<fetch-elem(sx-sdf2-is-attribute(|attrib-name))> attribs
    	end

	/**
	 * Gets the n-th argument of an ATerm attribute
	 *
	 * Numbering starts with 1.
	 *
	 * @param index Int
	 *
	 * @type Sdf2Attribute -> Sdf2ATerm
	 */
    sx-sdf2-get-arg-from-aterm-attribute(|index) =
    	?term(default(appl(_, args)));
    	<index> (index, args)

    /**
     * Gets the arguments of an ATerm attribute
     *
     * @type Sdf2Attribute -> List(Sdf2ATerm)
     */
    sx-sdf2-get-args-from-aterm-attribute =
    	(?term(default(appl(_, args))); !args) +
    	(?term(default(fun(_))); ![])

	/**
	 * Returns the left-most position of a labelled symbol
	 *
	 * Strategy fails if the label is not in the input list.
	 * The position calculated is the position the corresponding
	 * subtree appears in the abstract syntax constructor.
	 *
	 * @param label String
	 *
	 * @type List(Sdf2Symbol) -> Int
	 */
	sx-sdf2-find-index-of-labelled-symbol(|label) =
		(?[]; fail) <+
		(?[label(unquoted(label), symbol)|_];
		 !0) <+
		(?[lit(_)|symbols];
		 <sx-sdf2-find-index-of-labelled-symbol(|label)> symbols) <+
		(?[symbol|symbols];
		 <sx-sdf2-find-index-of-labelled-symbol(|label)> symbols => index;
		 !(<add> (1, index)))

	/**
	 * Counts how many abstract syntax subtree as list of symbols generates
	 *
	 * @type List(Sdf2Symbol) -> Int
	 */
	sx-sdf2-count-subtrees =
		(?[];
		 !0) <+
		(?[lit(_) | symbols];
		 <sx-sdf2-count-subtrees> symbols) <+
		(?[symbol|symbols];
		 <sx-sdf2-count-subtrees> symbols => num;
		 !(<add> (1, num)))

	/**
	 * Returns the string of an Sdf2Label.
	 *
	 * @type Sdf2Label -> String
	 */
	sx-sdf2-label-to-string:
		unquoted(str) -> str
	sx-sdf2-label-to-string:
		quoted(str) -> <un-double-quote> str

	/**
	 * Returns a list of all labels with their argument
	 * position in the abstract syntax.
	 *
	 * @type List(Sdf2Symbol) -> List((String, Int))
	 */
	sx-sdf2-get-labels-and-positions =
		?symbols;
		<sx-sdf2-get-labels-and-positions1> (symbols, 0)

	/**
	 * Returns a list of all labels with their argument position
	 * in the abstract syntax where the first label has the given
	 * index.
	 *
	 * @type (List(Sdf2Symbol), Int) -> List((String, Int))
	 */
	sx-sdf2-get-labels-and-positions1 =
		(?([], _); ![]) <+
		(?([label(unquoted(label), symbol) | symbols], n);
		 <sx-sdf2-get-labels-and-positions1> (symbols, <add> (n, 1)) => labs-pos;
		 ![(label,n) | labs-pos]) <+
		(?([lit(_)|symbols], n);
		 <sx-sdf2-get-labels-and-positions1> (symbols, n)) <+
		(?([symbol|symbols], n);
		 <sx-sdf2-get-labels-and-positions1> (symbols, <add> (n, 1)))
