/**
 * Functions to signal errors
 *
 * @author Florian Lorenzen <florian.lorenzen@tu-berlin.de>
 */
module org/sugarj/soundx/AnalysisFunctions

imports org/sugarj/stdlib/StdTrans

imports org/sugarj/soundx/Environment
		org/sugarj/soundx/AbstractSyntax
		org/sugarj/soundx/Debug


strategies
    /**
     * Annotates error message, set failed flag, and abort analysis with fail
     *
     * Analysis is aborted after the first error to avoid
     * follow-up errors. Otherwise, all analyses would have
     * to check the failed flag and ignore certain errors as follow-ups.
     *
     * @param String
     * @type a -> a
     */
    sx-analysis-fail(|msg) =
    	?term;
    	where(<sx-env-failed> ());
    	<sx-debug(|"*** The following error occured ***")> "";
    	<sx-debug(|<conc-strings> ("  ", <indent-text(|2)> msg))> "";
    	<sx-debug(|"  The input to blame is")> "";
    	<sx-debug(|"  ")> term;
    	<sx-debug(|"  (if a parse error follows this error it may not be reported at the end)")> "";
    	<sx-analysis-store-error(|msg)> term;
    	fail

    /**
     * Annotates error message only if not failed and sets failed flag
     *
     * This strategy is intended for default case handling, e. g.
     * using (... + ... + ...) <+ sxbld-analyze-unsupported(...)
     *
     * @param msg String
     * @type a -> a
     */
    sx-analysis-unsupported(|msg) =
    	where(<sx-env-get-failed> () => SXFalse());
    	where(<sx-env-failed> ());
    	sx-analysis-store-error(|msg);
    	fail

    /**
     * Adds error message to the environment
     *
     * @param msg String
     * @type a -> a
     */
    sx-analysis-store-error(|msg) =
    	?ast;
    	<sx-env-add-error> (ast, msg)

	/**
	 * Adds an error message indicating a bug in SoundX.
	 *
	 * @param msg String
	 *
	 * @type a -> a
	 */
	sx-signal-bug(|msg) =
		?ast;
		<conc-strings> ("*** BUG ***\nThe following error occured which is a SoundX bug.\n", msg) => bug-msg;
		<sx-analysis-fail(|bug-msg)> ast

	/**
	 * Annotates the is-source attribute to all nodes of the input
	 *
	 * @type a -> a
	 */
	sx-annotate-is-source =
		topdown(put-analysis-data(|"is-source", ()))

	/**
	 * Find the outermost term that has the is-source attribute.
	 *
	 * @type a -> Maybe(a)
	 */
	sx-locate-source =
		?term;
		let has-is-source =
			{ term:
				?term;
				debug(!"TRYING ... ");
				<get-analysis-data(|"is-source")> term;
				!term
			}
		in
			if <collect-one(has-is-source)> term => input then
				!Some(input)
				;debug(!"SOME INPUT ")
			else
				!None()
				;debug(!"NO INPUT ")
			end
		end
	